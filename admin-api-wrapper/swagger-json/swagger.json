{
	"swagger": "2.0",
	"info": {
		"description": "The PingFederate Administrative API is a REST-based interface that provides a programmatic way to make configuration changes to PingFederate as an alternative to using the administrative console.<br/><br/>Expand the resources below to display implementation details on that resource such as the available endpoints, the parameter and response models for the operation, and the model structure of the resources themselves. Each resource operation comes with the ability to interact with the API. You are prompted for proper administration credentials when you try to perform an API operation.",
		"title": "Administrative API Documentation"
	},
	"host": "localhost:9999",
	"basePath": "/pf-admin-api/v1",
	"tags": [
		{
			"name": "/oauth/accessTokenManagers"
		},
		{
			"name": "/oauth/accessTokenMappings"
		},
		{
			"name": "/administrativeAccounts"
		},
		{
			"name": "/sp/authenticationPolicyContractMappings"
		},
		{
			"name": "/authenticationApi"
		},
		{
			"name": "/authenticationPolicies"
		},
		{
			"name": "/authenticationPolicyContracts"
		},
		{
			"name": "/authenticationSelectors"
		},
		{
			"name": "/session"
		},
		{
			"name": "/oauth/authorizationDetailProcessors"
		},
		{
			"name": "/oauth/authServerSettings"
		},
		{
			"name": "/bulk"
		},
		{
			"name": "/captchaProviders"
		},
		{
			"name": "/certificates/groups"
		},
		{
			"name": "/certificates/revocation"
		},
		{
			"name": "/cluster"
		},
		{
			"name": "/configArchive"
		},
		{
			"name": "/configStore"
		},
		{
			"name": "/configurationEncryptionKeys"
		},
		{
			"name": "/connectionMetadata"
		},
		{
			"name": "/idp/connectors"
		},
		{
			"name": "/dataStores"
		},
		{
			"name": "/extendedProperties"
		},
		{
			"name": "/identityStoreProvisioners"
		},
		{
			"name": "/idp/adapters"
		},
		{
			"name": "/sp/idpConnections"
		},
		{
			"name": "/idp/defaultUrls"
		},
		{
			"name": "/idpToSpAdapterMapping"
		},
		{
			"name": "/incomingProxySettings"
		},
		{
			"name": "/kerberos/realms"
		},
		{
			"name": "/license"
		},
		{
			"name": "/localIdentity/identityProfiles"
		},
		{
			"name": "/metadataUrls"
		},
		{
			"name": "/notificationPublishers"
		},
		{
			"name": "/oauth/authenticationPolicyContractMappings"
		},
		{
			"name": "/oauth/cibaServerPolicy"
		},
		{
			"name": "/oauth/clients"
		},
		{
			"name": "/oauth/clientSettings"
		},
		{
			"name": "/oauth/clientRegistrationPolicies"
		},
		{
			"name": "/oauth/idpAdapterMappings"
		},
		{
			"name": "/oauth/outOfBandAuthPlugins"
		},
		{
			"name": "/keyPairs/oauthOpenIdConnect"
		},
		{
			"name": "/oauth/resourceOwnerCredentialsMappings"
		},
		{
			"name": "/oauth/openIdConnect"
		},
		{
			"name": "/passwordCredentialValidators"
		},
		{
			"name": "/pingOneConnections"
		},
		{
			"name": "/pingOneForEnterprise"
		},
		{
			"name": "/protocolMetadata"
		},
		{
			"name": "/redirectValidation"
		},
		{
			"name": "/keyPairs"
		},
		{
			"name": "/secretManagers"
		},
		{
			"name": "/serverSettings"
		},
		{
			"name": "/serviceAuthentication"
		},
		{
			"name": "/keyPairs/signing"
		},
		{
			"name": "/sp/adapters"
		},
		{
			"name": "/idp/spConnections"
		},
		{
			"name": "/sp/defaultUrls"
		},
		{
			"name": "/sp/targetUrlMappings"
		},
		{
			"name": "/keyPairs/sslClient"
		},
		{
			"name": "/keyPairs/sslServer"
		},
		{
			"name": "/idp/stsRequestParametersContracts"
		},
		{
			"name": "/sp/tokenGenerators"
		},
		{
			"name": "/idp/tokenProcessors"
		},
		{
			"name": "/tokenProcessorToTokenGeneratorMappings"
		},
		{
			"name": "/certificates/ca"
		},
		{
			"name": "/version"
		},
		{
			"name": "/virtualHostNames"
		},
		{
			"name": "/oauth/authorizationDetailTypes"
		},
		{
			"name": "/oauth/issuers"
		},
		{
			"name": "/oauth/tokenExchange/tokenGeneratorMappings"
		},
		{
			"name": "/oauth/tokenExchange/generator"
		},
		{
			"name": "/oauth/tokenExchange/processor"
		}
	],
	"schemes": [
		"https"
	],
	"paths": {
		"/oauth/accessTokenManagers/{id}": {
			"get": {
				"tags": [
					"/oauth/accessTokenManagers"
				],
				"summary": "Get a specific token management plugin instance.",
				"description": "",
				"operationId": "getTokenManager",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of token management plugin instance.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AccessTokenManager"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/oauth/accessTokenManagers"
				],
				"summary": "Update a token management plugin instance.",
				"description": "",
				"operationId": "updateTokenManager",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of token management plugin instance.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for token management plugin instance.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AccessTokenManager"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Access Token Management instance updated.",
						"schema": {
							"$ref": "#/definitions/AccessTokenManager"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/oauth/accessTokenManagers"
				],
				"summary": "Delete a token management plugin instance.",
				"description": "",
				"operationId": "deleteTokenManager",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of token management plugin instance.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Access token management instance deleted."
					},
					"403": {
						"description": "The operation is not permitted, based on the current configuration of the server."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/accessTokenManagers/descriptors": {
			"get": {
				"tags": [
					"/oauth/accessTokenManagers"
				],
				"summary": "Get the list of available token management plugin descriptors.",
				"description": "",
				"operationId": "getTokenManagerDescriptors",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AccessTokenManagerDescriptors"
						}
					}
				}
			}
		},
		"/oauth/accessTokenManagers/descriptors/{id}": {
			"get": {
				"tags": [
					"/oauth/accessTokenManagers"
				],
				"summary": "Get the description of a token management plugin descriptor.",
				"description": "",
				"operationId": "getTokenManagerDescriptor",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of token management plugin descriptor.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AccessTokenManagerDescriptor"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/accessTokenManagers/settings": {
			"get": {
				"tags": [
					"/oauth/accessTokenManagers"
				],
				"summary": "Get general access token management settings.",
				"description": "",
				"operationId": "getSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AccessTokenManagementSettings"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/oauth/accessTokenManagers"
				],
				"summary": "Update general access token management settings.",
				"description": "",
				"operationId": "updateSettings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Access token management settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AccessTokenManagementSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Settings updated.",
						"schema": {
							"$ref": "#/definitions/AccessTokenManagementSettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/accessTokenManagers": {
			"get": {
				"tags": [
					"/oauth/accessTokenManagers"
				],
				"summary": "Get a list of all token management plugin instances.",
				"description": "",
				"operationId": "getTokenManagers",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AccessTokenManagers"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/oauth/accessTokenManagers"
				],
				"summary": "Create a token management plugin instance.",
				"description": "",
				"operationId": "createTokenManager",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for plugin instance.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AccessTokenManager"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Access Token Management instance created.",
						"schema": {
							"$ref": "#/definitions/AccessTokenManager"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/accessTokenMappings/{id}": {
			"get": {
				"tags": [
					"/oauth/accessTokenMappings"
				],
				"summary": "Find the Access Token Mapping by its ID.",
				"description": "",
				"operationId": "getMapping",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the Access Token Mapping.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AccessTokenMapping"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/oauth/accessTokenMappings"
				],
				"summary": "Update an Access Token Mapping.",
				"description": "Update an Access Token Mapping with the matching ID. If the mapping is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected. Note: A 404 status code is returned for nonexistent mapping ID.",
				"operationId": "updateMapping",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the Access Token Mapping to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for updated mapping.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AccessTokenMapping"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "Access token attribute mapping updated.",
						"schema": {
							"$ref": "#/definitions/AccessTokenMapping"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/oauth/accessTokenMappings"
				],
				"summary": "Delete an Access Token Mapping.",
				"description": "",
				"operationId": "deleteMapping",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the Access Token Mapping.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Access token attribute mapping deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/accessTokenMappings": {
			"get": {
				"tags": [
					"/oauth/accessTokenMappings"
				],
				"summary": "Get the list of Access Token Mappings.",
				"description": "",
				"operationId": "getMappings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AccessTokenMappings"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/oauth/accessTokenMappings"
				],
				"summary": "Create a new Access Token Mapping.",
				"description": "Create a new Access Token Mapping. If the mapping is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "createMapping",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for the new Access Token Mapping.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AccessTokenMapping"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"201": {
						"description": "Access token attribute mapping created.",
						"schema": {
							"$ref": "#/definitions/AccessTokenMapping"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/administrativeAccounts": {
			"get": {
				"tags": [
					"/administrativeAccounts"
				],
				"summary": "Get all the PingFederate native Administrative Accounts.",
				"description": "",
				"operationId": "getAccounts",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AdministrativeAccounts"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/administrativeAccounts"
				],
				"summary": "Add a new PingFederate native Administrative Account.",
				"description": "",
				"operationId": "addAccount",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Administrative account information.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AdministrativeAccount"
						}
					}
				],
				"responses": {
					"200": {
						"description": "New Administrative Account created.",
						"schema": {
							"$ref": "#/definitions/AdministrativeAccount"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/administrativeAccounts/changePassword": {
			"post": {
				"tags": [
					"/administrativeAccounts"
				],
				"summary": "Change the Password of current PingFederate native Account.",
				"description": "",
				"operationId": "changePassword",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "User Account credential.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UserCredentials"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Administrator password changed.",
						"schema": {
							"$ref": "#/definitions/UserCredentials"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/administrativeAccounts/{username}": {
			"get": {
				"tags": [
					"/administrativeAccounts"
				],
				"summary": "Get a PingFederate native Administrative Account.",
				"description": "",
				"operationId": "getAccount",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "username",
						"in": "path",
						"description": "Username of the administrative account.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AdministrativeAccount"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/administrativeAccounts"
				],
				"summary": "Update the information for a native Administrative Account.",
				"description": "",
				"operationId": "updateAccount",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "username",
						"in": "path",
						"description": "Username of the account to be updated.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Administrative account information.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AdministrativeAccount"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Administrator Account updated.",
						"schema": {
							"$ref": "#/definitions/AdministrativeAccount"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/administrativeAccounts"
				],
				"summary": "Delete a PingFederate native Administrative Account information.",
				"description": "",
				"operationId": "deleteAccount",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "username",
						"in": "path",
						"description": "Username of the account to be deleted.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Administrator Account Deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/administrativeAccounts/{username}/resetPassword": {
			"post": {
				"tags": [
					"/administrativeAccounts"
				],
				"summary": "Reset the Password of an existing PingFederate native Administrative Account.",
				"description": "",
				"operationId": "resetPassword",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "username",
						"in": "path",
						"description": "Username of the administrative account.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "New password.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UserCredentials"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Administrator password reset.",
						"schema": {
							"$ref": "#/definitions/UserCredentials"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/sp/authenticationPolicyContractMappings": {
			"get": {
				"tags": [
					"/sp/authenticationPolicyContractMappings"
				],
				"summary": "Get the list of APC-to-SP Adapter Mappings.",
				"description": "",
				"operationId": "getApcToSpAdapterMappings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ApcToSpAdapterMappings"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/sp/authenticationPolicyContractMappings"
				],
				"summary": "Create a new APC-to-SP Adapter Mapping.",
				"description": "",
				"operationId": "createApcToSpAdapterMapping",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for a new APC-to-SP Adapter Mapping.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ApcToSpAdapterMapping"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"201": {
						"description": "Authentication policy contract-to-SP adapter mapping created.",
						"schema": {
							"$ref": "#/definitions/ApcToSpAdapterMapping"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/sp/authenticationPolicyContractMappings/{id}": {
			"get": {
				"tags": [
					"/sp/authenticationPolicyContractMappings"
				],
				"summary": "Get an APC-to-SP Adapter Mapping.",
				"description": "",
				"operationId": "getApcToSpAdapterMappingById",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of APC-to-SP Adapter Mapping to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ApcToSpAdapterMapping"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/sp/authenticationPolicyContractMappings"
				],
				"summary": "Update an APC-to-SP Adapter Mapping.",
				"description": "",
				"operationId": "updateApcToSpAdapterMappingById",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of APC-to-SP Adapter Mapping to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for updated APC-to-SP Adapter Mapping.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ApcToSpAdapterMapping"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "Authentication policy contract-to-SP adapter mapping updated.",
						"schema": {
							"$ref": "#/definitions/ApcToSpAdapterMapping"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/sp/authenticationPolicyContractMappings"
				],
				"summary": "Delete an APC-to-SP Adapter Mapping.",
				"description": "",
				"operationId": "deleteApcToSpAdapterMappingById",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of APC-to-SP Adapter Mapping to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Authentication policy contract-to-SP adapter mapping deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/authenticationApi/applications/{id}": {
			"get": {
				"tags": [
					"/authenticationApi"
				],
				"summary": "Find Authentication API Application by ID.",
				"description": "Get an Authentication API Application with the specified ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getApplication",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the Authentication API Application to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AuthnApiApplication"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/authenticationApi"
				],
				"summary": "Update an Authentication API Application.",
				"description": "Update an Authentication API Application with the matching ID. If the application is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected. Note: A 404 status code is returned for nonexistent IDs.",
				"operationId": "updateApplication",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the Authentication API Application to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for updated application.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AuthnApiApplication"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Authentication API Application updated.",
						"schema": {
							"$ref": "#/definitions/AuthnApiApplication"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/authenticationApi"
				],
				"summary": "Delete an Authentication API Application.",
				"description": "Delete an Authentication API Application with the specified ID. A 404 status code is returned for nonexistent IDs. Note: If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
				"operationId": "deleteApplication",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of Authentication API Application to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Authentication API Application deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/authenticationApi/applications": {
			"get": {
				"tags": [
					"/authenticationApi"
				],
				"summary": "Get the collection of Authentication API Applications.",
				"description": "",
				"operationId": "getAuthenticationApiApplications",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AuthnApiApplications"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/authenticationApi"
				],
				"summary": "Create a new Authentication API Application.",
				"description": "",
				"operationId": "createApplication",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for new Authentication API Application.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AuthnApiApplication"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Authentication API Application created.",
						"schema": {
							"$ref": "#/definitions/AuthnApiApplication"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/authenticationApi/settings": {
			"get": {
				"tags": [
					"/authenticationApi"
				],
				"summary": "Get the Authentication API settings.",
				"description": "",
				"operationId": "getAuthenticationApiSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AuthnApiSettings"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/authenticationApi"
				],
				"summary": "Set the Authentication API settings.",
				"description": "",
				"operationId": "updateAuthenticationApiSettings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Authentication API Settings",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AuthnApiSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Settings updated.",
						"schema": {
							"$ref": "#/definitions/AuthnApiSettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/authenticationPolicies/fragments/{id}": {
			"get": {
				"tags": [
					"/authenticationPolicies"
				],
				"summary": "Get an authentication policy fragment by ID.",
				"description": "",
				"operationId": "getFragment",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the policy fragment to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AuthenticationPolicyFragment"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/authenticationPolicies"
				],
				"summary": "Update an authentication policy fragment.",
				"description": "",
				"operationId": "updateFragment",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the policy fragment to  update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration of the authentication policy fragment.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AuthenticationPolicyFragment"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "Authentication policy fragment updated.",
						"schema": {
							"$ref": "#/definitions/AuthenticationPolicyFragment"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/authenticationPolicies"
				],
				"summary": "Delete an authentication policy fragment.",
				"description": "",
				"operationId": "deleteFragment",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the policy fragment to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Authentication policy fragment deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/authenticationPolicies/policy/{id}": {
			"get": {
				"tags": [
					"/authenticationPolicies"
				],
				"summary": "Get an authentication policy by ID.",
				"description": "",
				"operationId": "getPolicy",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Authentication policy Id.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AuthenticationPolicyTree"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/authenticationPolicies"
				],
				"summary": "Update an authentication policy.",
				"description": "",
				"operationId": "updatePolicy",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Authentication policy Id.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration of the authentication policy.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AuthenticationPolicyTree"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "Authentication policy updated.",
						"schema": {
							"$ref": "#/definitions/AuthenticationPolicyTree"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/authenticationPolicies"
				],
				"summary": "Delete an authentication policy.",
				"description": "",
				"operationId": "deletePolicy",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Authentication policy Id.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Authentication policy deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/authenticationPolicies/fragments": {
			"get": {
				"tags": [
					"/authenticationPolicies"
				],
				"summary": "Get all of the authentication policies fragments.",
				"description": "",
				"operationId": "getFragments",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "Page number to retrieve.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "numberPerPage",
						"in": "query",
						"description": "Number of fragments per page.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter criteria limits the fragments that are returned to only those that match it. The filter criteria is compared to the fragment instance name and ID fields. The comparison is a case-insensitive partial match. No additional pattern based matching is supported.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AuthenticationPolicyFragments"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/authenticationPolicies"
				],
				"summary": "Create an authentication policy fragment.",
				"description": "",
				"operationId": "createFragment",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration of the authentication policy fragment.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AuthenticationPolicyFragment"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"201": {
						"description": "Authentication policy fragment created.",
						"schema": {
							"$ref": "#/definitions/AuthenticationPolicyFragment"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/authenticationPolicies/settings": {
			"get": {
				"tags": [
					"/authenticationPolicies"
				],
				"summary": "Get the authentication policies settings.",
				"description": "",
				"operationId": "getSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AuthenticationPoliciesSettings"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/authenticationPolicies"
				],
				"summary": "Set the authentication policies settings.",
				"description": "",
				"operationId": "updateSettings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Authentication policies settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AuthenticationPoliciesSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Settings updated.",
						"schema": {
							"$ref": "#/definitions/AuthenticationPoliciesSettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					}
				}
			}
		},
		"/authenticationPolicies/policy": {
			"post": {
				"tags": [
					"/authenticationPolicies"
				],
				"summary": "Create a new authentication policy.",
				"description": "",
				"operationId": "createPolicy",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration of the authentication policy.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AuthenticationPolicyTree"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"201": {
						"description": "Authentication policy created.",
						"schema": {
							"$ref": "#/definitions/AuthenticationPolicyTree"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/authenticationPolicies/default": {
			"get": {
				"tags": [
					"/authenticationPolicies"
				],
				"summary": "Get the default configured authentication policy.",
				"description": "",
				"operationId": "getDefaultAuthenticationPolicy",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AuthenticationPolicy"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/authenticationPolicies"
				],
				"summary": "Set the default authentication policy.",
				"description": "",
				"operationId": "updateDefaultAuthenticationPolicy",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Default authentication policy.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AuthenticationPolicy"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "Default authentication policy updated.",
						"schema": {
							"$ref": "#/definitions/AuthenticationPolicy"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/authenticationPolicies/policy/{id}/move": {
			"post": {
				"tags": [
					"/authenticationPolicies"
				],
				"summary": "Move an authentication policy to a location within the policy tree.",
				"description": "",
				"operationId": "movePolicy",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Authentication policy Id.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Metadata about where to move the policy",
						"required": true,
						"schema": {
							"$ref": "#/definitions/MoveItemRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/authenticationPolicyContracts": {
			"get": {
				"tags": [
					"/authenticationPolicyContracts"
				],
				"summary": "Gets the Authentication Policy Contracts.",
				"description": "",
				"operationId": "getAuthenticationPolicyContracts",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "Page number to retrieve.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "numberPerPage",
						"in": "query",
						"description": "Number of contracts per page.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter criteria limits the authentication policy contracts that are returned to only those that match it. The filter criteria is compared to the authentication policy contract name and ID fields. The comparison is a case-insensitive partial match. No additional pattern based matching is supported.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AuthenticationPolicyContracts"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/authenticationPolicyContracts"
				],
				"summary": "Create a new Authentication Policy Contract.",
				"description": "Create a new Authentication Policy Contract. If the Authentication Policy Contract is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "createAuthenticationPolicyContract",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for a new contract.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AuthenticationPolicyContract"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Authentication policy contract created.",
						"schema": {
							"$ref": "#/definitions/AuthenticationPolicyContract"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/authenticationPolicyContracts/{id}": {
			"get": {
				"tags": [
					"/authenticationPolicyContracts"
				],
				"summary": "Gets the Authentication Policy Contract by ID.",
				"description": "Get an Authentication Policy Contract with the specified ID. A 404 status code is returned for nonexistent IDs",
				"operationId": "getAuthenticationPolicyContract",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of contract to fetch",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AuthenticationPolicyContract"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/authenticationPolicyContracts"
				],
				"summary": "Update an Authentication Policy Contract by ID.",
				"description": "Update an Authentication Policy Contract with the specified ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "updateAuthenticationPolicyContract",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the Authentication Policy Contract to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for updated Authentication Policy Contract.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AuthenticationPolicyContract"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Authentication policy contract updated.",
						"schema": {
							"$ref": "#/definitions/AuthenticationPolicyContract"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/authenticationPolicyContracts"
				],
				"summary": "Delete an Authentication Policy Contract.",
				"description": "Delete an Authentication Policy Contract with the specified ID. A 404 status code is returned for nonexistent IDs. Note: If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
				"operationId": "deleteAuthenticationPolicyContract",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of Authentication Policy Contract to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Authentication policy contract deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Resource is in use and cannot be deleted.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/authenticationSelectors/{id}": {
			"get": {
				"tags": [
					"/authenticationSelectors"
				],
				"summary": "Get an Authentication Selector instance by ID.",
				"description": "Get the configured Authentication Selector instance with the specified ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getAuthenticationSelector",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of Authentication Selector instance to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AuthenticationSelector"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/authenticationSelectors"
				],
				"summary": "Update an authentication selector instance.",
				"description": "Update an authentication selector instance. If the authentication selector is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "updateAuthenticationSelector",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the authentication selector instance.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for updated authentication selector instance.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AuthenticationSelector"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Authentication selector updated.",
						"schema": {
							"$ref": "#/definitions/AuthenticationSelector"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/authenticationSelectors"
				],
				"summary": "Delete an Authentication Selector instance.",
				"description": "Delete an Authentication Selector instance with the specified ID. A 404 status code is returned for nonexistent IDs. Note: Only selectors not in use can be deleted. If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
				"operationId": "deleteAuthenticationSelector",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of Authentication Selector to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Authentication selector deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Resource is in use and cannot be deleted.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/authenticationSelectors": {
			"get": {
				"tags": [
					"/authenticationSelectors"
				],
				"summary": "Get the list of configured Authentication Selector instances.",
				"description": "",
				"operationId": "getAuthenticationSelectors",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "Page number to retrieve.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "numberPerPage",
						"in": "query",
						"description": "Number of selectors per page.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter criteria limits the authentication selector instances that are returned to only those that match it. The filter criteria is compared to the authentication selector instance name and ID fields. The comparison is a case-insensitive partial match. No additional pattern based matching is supported.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AuthenticationSelectors"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/authenticationSelectors"
				],
				"summary": "Create a new authentication selector instance.",
				"description": "Create a new authentication selector instance. If the authentication selector is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "createAuthenticationSelector",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for a new authentication selector instance.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AuthenticationSelector"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Authentication selector created.",
						"schema": {
							"$ref": "#/definitions/AuthenticationSelector"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/authenticationSelectors/descriptors": {
			"get": {
				"tags": [
					"/authenticationSelectors"
				],
				"summary": "Get the list of available Authentication Selector descriptors.",
				"description": "",
				"operationId": "getAuthenticationSelectorDescriptors",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AuthenticationSelectorDescriptors"
						}
					}
				}
			}
		},
		"/authenticationSelectors/descriptors/{id}": {
			"get": {
				"tags": [
					"/authenticationSelectors"
				],
				"summary": "Get the description of an Authentication Selector plugin by ID.",
				"description": "Get the description of an Authentication Selector plugin by ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getAuthenticationSelectorDescriptorsById",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of Authentication Selector descriptor to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AuthenticationSelectorDescriptor"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/session/authenticationSessionPolicies/global": {
			"get": {
				"tags": [
					"/session"
				],
				"summary": "Get the global authentication session policy.",
				"description": "",
				"operationId": "getGlobalPolicy",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/GlobalAuthenticationSessionPolicy"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/session"
				],
				"summary": "Update the global authentication session policy.",
				"description": "",
				"operationId": "updateGlobalPolicy",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Global authentication session policy.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/GlobalAuthenticationSessionPolicy"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Global authentication session policy updated.",
						"schema": {
							"$ref": "#/definitions/GlobalAuthenticationSessionPolicy"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/session/applicationSessionPolicy": {
			"get": {
				"tags": [
					"/session"
				],
				"summary": "Get the application session policy.",
				"description": "",
				"operationId": "getApplicationPolicy",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ApplicationSessionPolicy"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/session"
				],
				"summary": "Update the application session policy.",
				"description": "",
				"operationId": "updateApplicationPolicy",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Application session policy.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ApplicationSessionPolicy"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Application session policy updated.",
						"schema": {
							"$ref": "#/definitions/ApplicationSessionPolicy"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/session/authenticationSessionPolicies": {
			"get": {
				"tags": [
					"/session"
				],
				"summary": "Get list of session policies.",
				"description": "Get a list of all session policies that are associated with specific authentication sources.",
				"operationId": "getSourcePolicies",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AuthenticationSessionPolicies"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/session"
				],
				"summary": "Create a new session policy.",
				"description": "Create a new session policy for a specified authentication source. If the session policy is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "createSourcePolicy",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for new policy.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AuthenticationSessionPolicy"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Authentication session policy created.",
						"schema": {
							"$ref": "#/definitions/AuthenticationSessionPolicy"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/session/authenticationSessionPolicies/{id}": {
			"get": {
				"tags": [
					"/session"
				],
				"summary": "Find session policy by ID.",
				"description": "Get the session policy with the specified ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getSourcePolicy",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the session policy to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AuthenticationSessionPolicy"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/session"
				],
				"summary": "Update a session policy.",
				"description": "Update the session policy with the matching ID. If the policy is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "updateSourcePolicy",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the session policy to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for updated policy.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AuthenticationSessionPolicy"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Authentication session policy updated.",
						"schema": {
							"$ref": "#/definitions/AuthenticationSessionPolicy"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/session"
				],
				"summary": "Delete a session policy.",
				"description": "Delete the session policy with the specified ID. A 404 status code is returned for nonexistent IDs. If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
				"operationId": "deleteSourcePolicy",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of session policy to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Authentication session policy deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/session/settings": {
			"get": {
				"tags": [
					"/session"
				],
				"summary": "Get general session management settings.",
				"description": "",
				"operationId": "getSessionSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/SessionSettings"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/session"
				],
				"summary": "Update general session management settings.",
				"description": "",
				"operationId": "updateSessionSettings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Session settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SessionSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "General session management settings updated.",
						"schema": {
							"$ref": "#/definitions/SessionSettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/authorizationDetailProcessors": {
			"get": {
				"tags": [
					"/oauth/authorizationDetailProcessors"
				],
				"summary": "Get a list of authorization detail processor plugin instances.",
				"description": "",
				"operationId": "getAuthorizationDetailProcessors",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AuthorizationDetailProcessors"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/oauth/authorizationDetailProcessors"
				],
				"summary": "Create an authorization detail processor plugin instance.",
				"description": "",
				"operationId": "createAuthorizationDetailProcessor",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for a authorization detail processor plugin instance.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AuthorizationDetailProcessor"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Authorization Detail Processor plugin created.",
						"schema": {
							"$ref": "#/definitions/AuthorizationDetailProcessor"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/authorizationDetailProcessors/{id}": {
			"get": {
				"tags": [
					"/oauth/authorizationDetailProcessors"
				],
				"summary": "Get a specific authorization detail processor plugin instance.",
				"description": "",
				"operationId": "getAuthorizationDetailProcessor",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of an authorization detail processor plugin instance.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AuthorizationDetailProcessor"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/oauth/authorizationDetailProcessors"
				],
				"summary": "Update an authorization detail processor plugin instance.",
				"description": "",
				"operationId": "updateAuthorizationDetailProcessor",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of an authorization detail processor plugin instance.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for a authorization detail processor plugin instance.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AuthorizationDetailProcessor"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Authorization Detail Processor plugin updated.",
						"schema": {
							"$ref": "#/definitions/AuthorizationDetailProcessor"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/oauth/authorizationDetailProcessors"
				],
				"summary": "Delete an authorization detail processor plugin instance.",
				"description": "",
				"operationId": "deleteAuthorizationDetailProcessor",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of an authorization detail processor plugin instance.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Authorization Detail Processor plugin deleted."
					},
					"403": {
						"description": "The operation is not permitted, based on the current configuration of the server."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/authorizationDetailProcessors/descriptors": {
			"get": {
				"tags": [
					"/oauth/authorizationDetailProcessors"
				],
				"summary": "Get a list of available authorization detail processor plugin descriptors.",
				"description": "",
				"operationId": "getAuthorizationDetailProcessorPluginDescriptors",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AuthorizationDetailProcessorDescriptors"
						}
					}
				}
			}
		},
		"/oauth/authorizationDetailProcessors/descriptors/{id}": {
			"get": {
				"tags": [
					"/oauth/authorizationDetailProcessors"
				],
				"summary": "Get an authorization detail processor plugin descriptor.",
				"description": "",
				"operationId": "getAuthorizationDetailProcessorPluginDescriptor",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of authorization detail processor plugin descriptor.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AuthorizationDetailProcessorDescriptor"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/authServerSettings": {
			"get": {
				"tags": [
					"/oauth/authServerSettings"
				],
				"summary": "Get the Authorization Server Settings.",
				"description": "",
				"operationId": "getAuthorizationServerSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AuthorizationServerSettings"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/oauth/authServerSettings"
				],
				"summary": "Update the Authorization Server Settings.",
				"description": "",
				"operationId": "updateAuthorizationServerSettings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for updated server settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AuthorizationServerSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Authorization Server Settings updated.",
						"schema": {
							"$ref": "#/definitions/AuthorizationServerSettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/authServerSettings/scopes/commonScopeGroups": {
			"post": {
				"tags": [
					"/oauth/authServerSettings"
				],
				"summary": "Create a new common scope group.",
				"description": "",
				"operationId": "addCommonScopeGroup",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "The scope group definition",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ScopeGroupEntry"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Common Scope Group created.",
						"schema": {
							"$ref": "#/definitions/ScopeGroupEntry"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/authServerSettings/scopes/commonScopes/{name}": {
			"get": {
				"tags": [
					"/oauth/authServerSettings"
				],
				"summary": "Get an existing common scope.",
				"description": "",
				"operationId": "getCommonScope",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "name",
						"in": "path",
						"description": "Name of the common scope.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ScopeEntry"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/oauth/authServerSettings"
				],
				"summary": "Update an existing common scope.",
				"description": "",
				"operationId": "updateCommonScope",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "name",
						"in": "path",
						"description": "Name of the common scope.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "The scope definition",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ScopeEntry"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Common Scope updated.",
						"schema": {
							"$ref": "#/definitions/ScopeEntry"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/oauth/authServerSettings"
				],
				"summary": "Remove an existing common scope.",
				"description": "",
				"operationId": "removeCommonScope",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "name",
						"in": "path",
						"description": "Name of the common scope.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Common Scope deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/authServerSettings/scopes/exclusiveScopes/{name}": {
			"get": {
				"tags": [
					"/oauth/authServerSettings"
				],
				"summary": "Get an existing exclusive scope.",
				"description": "",
				"operationId": "getExclusiveScope",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "name",
						"in": "path",
						"description": "Name of the exclusive scope.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ScopeEntry"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/oauth/authServerSettings"
				],
				"summary": "Update an existing exclusive scope.",
				"description": "",
				"operationId": "updateExclusiveScope",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "name",
						"in": "path",
						"description": "Name of the exclusive scope.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "The scope definition.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ScopeEntry"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Exclusive Scope updated.",
						"schema": {
							"$ref": "#/definitions/ScopeEntry"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/oauth/authServerSettings"
				],
				"summary": "Remove an existing exclusive scope.",
				"description": "",
				"operationId": "removeExclusiveScope",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "name",
						"in": "path",
						"description": "Name of the exclusive scope.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Exclusive Scope deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/authServerSettings/scopes/commonScopes": {
			"post": {
				"tags": [
					"/oauth/authServerSettings"
				],
				"summary": "Add a new common scope.",
				"description": "",
				"operationId": "addCommonScope",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "The scope definition.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ScopeEntry"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Common Scope added.",
						"schema": {
							"$ref": "#/definitions/ScopeEntry"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/authServerSettings/scopes/exclusiveScopes": {
			"post": {
				"tags": [
					"/oauth/authServerSettings"
				],
				"summary": "Add a new exclusive scope.",
				"description": "",
				"operationId": "addExclusiveScope",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "A new exclusive scope",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ScopeEntry"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Exclusive Scope added.",
						"schema": {
							"$ref": "#/definitions/ScopeEntry"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/authServerSettings/scopes/exclusiveScopeGroups/{name}": {
			"get": {
				"tags": [
					"/oauth/authServerSettings"
				],
				"summary": "Get an existing exclusive scope group.",
				"description": "",
				"operationId": "getExclusiveScopeGroup",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "name",
						"in": "path",
						"description": "Name of the exclusive scope group.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ScopeGroupEntry"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/oauth/authServerSettings"
				],
				"summary": "Update an existing exclusive scope group.",
				"description": "",
				"operationId": "updateExclusiveScopeGroups",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "name",
						"in": "path",
						"description": "Name of the exclusive scope group.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "The scope group definition",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ScopeGroupEntry"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Exclusive Scope Group updated.",
						"schema": {
							"$ref": "#/definitions/ScopeGroupEntry"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/oauth/authServerSettings"
				],
				"summary": "Remove an existing exclusive scope group.",
				"description": "",
				"operationId": "removeExclusiveScopeGroup",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "name",
						"in": "path",
						"description": "Name of the exclusive scope group.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Exclusive Scope Group deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/authServerSettings/scopes/exclusiveScopeGroups": {
			"post": {
				"tags": [
					"/oauth/authServerSettings"
				],
				"summary": "Create a new exclusive scope group.",
				"description": "",
				"operationId": "addExclusiveScopeGroup",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "The scope group definition",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ScopeGroupEntry"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Exclusive Scope Group created.",
						"schema": {
							"$ref": "#/definitions/ScopeGroupEntry"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/authServerSettings/scopes/commonScopeGroups/{name}": {
			"get": {
				"tags": [
					"/oauth/authServerSettings"
				],
				"summary": "Get an existing common scope group.",
				"description": "",
				"operationId": "getCommonScopeGroup",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "name",
						"in": "path",
						"description": "Name of the common scope group.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ScopeGroupEntry"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/oauth/authServerSettings"
				],
				"summary": "Update an existing common scope group.",
				"description": "",
				"operationId": "updateCommonScopeGroup",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "name",
						"in": "path",
						"description": "Name of the common scope group.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "The scope group definition.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ScopeGroupEntry"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Common Scope Group updated.",
						"schema": {
							"$ref": "#/definitions/ScopeGroupEntry"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/oauth/authServerSettings"
				],
				"summary": "Remove an existing common scope group.",
				"description": "",
				"operationId": "removeCommonScopeGroup",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "name",
						"in": "path",
						"description": "Name of the common scope group.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Common Scope Group deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/bulk/export": {
			"get": {
				"tags": [
					"/bulk"
				],
				"summary": "Export all API resources to a JSON file.",
				"description": "For the /configStore resource type, only the settings that are different from the defaults for this version of PingFederate are included in the export.<br><br>Only resource types currently supported by the Administrative API are included in the exported data. Resources not yet supported include:<br><br>- SMS Provider Settings<br>",
				"operationId": "exportConfiguration",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "includeExternalResources",
						"in": "query",
						"description": "Include external resources like OAuth clients stored outside of PingFederate.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/BulkConfig"
						}
					},
					"403": {
						"description": "The current configuration cannot be bulk exported."
					}
				}
			}
		},
		"/bulk/import": {
			"post": {
				"tags": [
					"/bulk"
				],
				"summary": "Import configuration for a PingFederate deployment from a JSON file.",
				"description": "All existing configuration will be wiped before the import begins. If any validation errors are found, PingFederate will roll back to the previous configuration. The master key set in pf.jwk must include the key in use when the JSON configuration was originally exported.",
				"operationId": "importConfiguration",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "failFast",
						"in": "query",
						"description": "When set to true, stops the import as soon as any validation errors are encountered. When false, import will continue to validate configuration after the first failure to identify all validation errors. If any validation errors are present PingFederate will roll back to the state prior to the import attempt.",
						"required": false,
						"type": "boolean",
						"default": true
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration to import.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/BulkConfig"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "Success."
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/captchaProviders/settings": {
			"get": {
				"tags": [
					"/captchaProviders"
				],
				"summary": "Get general CAPTCHA providers settings.",
				"description": "",
				"operationId": "getSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/CaptchaProvidersSettings"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/captchaProviders"
				],
				"summary": "Update general CAPTCHA providers settings.",
				"description": "",
				"operationId": "updateSettings",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "CAPTCHA providers settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CaptchaProvidersSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Settings updated.",
						"schema": {
							"$ref": "#/definitions/CaptchaProvidersSettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/captchaProviders/{id}": {
			"get": {
				"tags": [
					"/captchaProviders"
				],
				"summary": "Get a specific CAPTCHA provider plugin instance.",
				"description": "",
				"operationId": "getCaptchaProvider",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of a CAPTCHA provider plugin instance.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/CaptchaProvider"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/captchaProviders"
				],
				"summary": "Update a CAPTCHA provider plugin instance.",
				"description": "",
				"operationId": "updateCaptchaProvider",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of a CAPTCHA provider plugin instance.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for a CAPTCHA provider plugin instance.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CaptchaProvider"
						}
					}
				],
				"responses": {
					"200": {
						"description": "CAPTCHA Provider plugin updated.",
						"schema": {
							"$ref": "#/definitions/CaptchaProvider"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/captchaProviders"
				],
				"summary": "Delete a CAPTCHA provider plugin instance.",
				"description": "",
				"operationId": "deleteCaptchaProvider",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of a CAPTCHA provider plugin instance.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "CAPTCHA Provider plugin deleted."
					},
					"403": {
						"description": "The operation is not permitted, based on the current configuration of the server."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/captchaProviders/descriptors/{id}": {
			"get": {
				"tags": [
					"/captchaProviders"
				],
				"summary": "Get a CAPTCHA provider plugin descriptor.",
				"description": "",
				"operationId": "getCaptchaProviderPluginDescriptor",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of CAPTCHA provider plugin descriptor.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/A CAPTCHA provider plugin descriptor."
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/captchaProviders": {
			"get": {
				"tags": [
					"/captchaProviders"
				],
				"summary": "Get a list of CAPTCHA provider plugin instances.",
				"description": "",
				"operationId": "getCaptchaProviders",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/CaptchaProviders"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/captchaProviders"
				],
				"summary": "Create a CAPTCHA provider plugin instance.",
				"description": "",
				"operationId": "createCaptchaProvider",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for a CAPTCHA provider plugin instance.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CaptchaProvider"
						}
					}
				],
				"responses": {
					"201": {
						"description": "CAPTCHA Provider plugin created.",
						"schema": {
							"$ref": "#/definitions/CaptchaProvider"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/captchaProviders/descriptors": {
			"get": {
				"tags": [
					"/captchaProviders"
				],
				"summary": "Get a list of available CAPTCHA provider plugin descriptors.",
				"description": "",
				"operationId": "getCaptchaProviderPluginDescriptors",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/A collection of CAPTCHA provider plugin descriptors."
						}
					}
				}
			}
		},
		"/certificates/groups/{groupName}/{id}": {
			"get": {
				"tags": [
					"/certificates/groups"
				],
				"summary": "Retrieve details of a certificate.",
				"description": "",
				"operationId": "getCertificateFromGroup",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "groupName",
						"in": "path",
						"description": "Name of the group to retrieve certificates for.",
						"required": true,
						"type": "string"
					},
					{
						"name": "id",
						"in": "path",
						"description": "ID of the certificate to retrieve.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/CertView"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/certificates/groups"
				],
				"summary": "Delete a certificate from a group.",
				"description": "If the request is successful, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
				"operationId": "deleteCertificateFromGroup",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "groupName",
						"in": "path",
						"description": "Name of the group to retrieve certificates for.",
						"required": true,
						"type": "string"
					},
					{
						"name": "id",
						"in": "path",
						"description": "ID of the certificate to retrieve.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Group certificate deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/certificates/groups/{groupName}": {
			"get": {
				"tags": [
					"/certificates/groups"
				],
				"summary": "Get list of all certificates for a group.",
				"description": "",
				"operationId": "getCertificatesForGroup",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "groupName",
						"in": "path",
						"description": "Name of the group to retrieve certificates for.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/CertViews"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/certificates/groups/{groupName}/import": {
			"post": {
				"tags": [
					"/certificates/groups"
				],
				"summary": "Import a new certificate to a group.",
				"description": "",
				"operationId": "importFeatureCert",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "groupName",
						"in": "path",
						"description": "Name of the group to retrieve certificates for.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "File data to import.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/X509File"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Group certificate imported.",
						"schema": {
							"$ref": "#/definitions/CertView"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/certificates/revocation/ocspCertificates": {
			"get": {
				"tags": [
					"/certificates/revocation"
				],
				"summary": "Get the list of available OCSP responder signature verification certificates.",
				"description": "",
				"operationId": "getOcspCertificates",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/CertViews"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/certificates/revocation"
				],
				"summary": "Import an OCSP responder signature verification certificate.",
				"description": "",
				"operationId": "importOcspCertificate",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "File to import.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/X509File"
						}
					}
				],
				"responses": {
					"201": {
						"description": "OCSP responder signature verification certificate imported.",
						"schema": {
							"$ref": "#/definitions/CertView"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/certificates/revocation/ocspCertificates/{id}": {
			"get": {
				"tags": [
					"/certificates/revocation"
				],
				"summary": "Get an OCSP responder signature verification certificate by ID.",
				"description": "",
				"operationId": "getOcspCertificateById",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Certificate ID.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/CertView"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/certificates/revocation"
				],
				"summary": "Delete an OCSP responder signature verification certificate by ID.",
				"description": "",
				"operationId": "deleteOcspCertificateById",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Certificate ID.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "OCSP responder signature verification certificate deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Resource is in use and cannot be deleted."
					}
				}
			}
		},
		"/certificates/revocation/settings": {
			"get": {
				"tags": [
					"/certificates/revocation"
				],
				"summary": "Get certificate revocation settings.",
				"description": "",
				"operationId": "getRevocationSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/CertificateRevocationSettings"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/certificates/revocation"
				],
				"summary": "Update certificate revocation settings.",
				"description": "",
				"operationId": "updateRevocationSettings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Certificate revocation settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CertificateRevocationSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Certificate revocation settings updated.",
						"schema": {
							"$ref": "#/definitions/CertificateRevocationSettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/cluster/replicate": {
			"post": {
				"tags": [
					"/cluster"
				],
				"summary": "Replicate configuration updates to all nodes in the cluster.",
				"description": "",
				"operationId": "startReplication",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Replication completed successfully.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"403": {
						"description": "This PingFederate instance is not deployed in clustered mode."
					}
				}
			}
		},
		"/cluster/status": {
			"get": {
				"tags": [
					"/cluster"
				],
				"summary": "Get information on the current status of the cluster.",
				"description": "",
				"operationId": "getClusterStatus",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ClusterStatus"
						}
					},
					"403": {
						"description": "This PingFederate instance is not deployed in clustered mode."
					}
				}
			}
		},
		"/configArchive/import": {
			"post": {
				"tags": [
					"/configArchive"
				],
				"summary": "Import a configuration archive.",
				"description": "If there are missing components or license inconsistencies, the import is halted by default to allow you to install the necessary components or license. However, you can choose to force the deployment by setting 'forceImport' to true and then install the necessary files later.",
				"operationId": "importConfigArchive",
				"consumes": [
					"multipart/form-data"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "file",
						"in": "formData",
						"required": false,
						"type": "file"
					},
					{
						"name": "forceImport",
						"in": "query",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "forceUnsupportedImport",
						"in": "query",
						"description": "Force import of unsupported versions.",
						"required": false,
						"type": "boolean",
						"default": false
					},
					{
						"name": "reencryptData",
						"in": "query",
						"description": "Reencrypt configuration archive data with the current deployment's encryption key.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "Configuration Archive imported.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/configArchive/export": {
			"get": {
				"tags": [
					"/configArchive"
				],
				"summary": "Export a configuration archive.",
				"description": "",
				"operationId": "exportConfigArchive",
				"produces": [
					"application/json",
					"application/zip"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success."
					}
				}
			}
		},
		"/configStore/{bundle}": {
			"get": {
				"tags": [
					"/configStore"
				],
				"summary": "Get all settings from a bundle.",
				"description": "",
				"operationId": "getSettings",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "bundle",
						"in": "path",
						"description": "This field represents a configuration file that contains a bundle of settings.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ConfigStoreBundle"
						}
					},
					"403": {
						"description": "The specified configuration bundle is unavailable."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/configStore/{bundle}/{id}": {
			"get": {
				"tags": [
					"/configStore"
				],
				"summary": "Get a single setting from a bundle.",
				"description": "",
				"operationId": "getSetting",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "bundle",
						"in": "path",
						"description": "This field represents a configuration file that contains a bundle of settings.",
						"required": true,
						"type": "string"
					},
					{
						"name": "id",
						"in": "path",
						"description": "ID of setting to retrieve.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ConfigStoreSetting"
						}
					},
					"403": {
						"description": "The specified configuration bundle is unavailable."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/configStore"
				],
				"summary": "Create or update a setting/bundle.",
				"description": "Create or update a setting/bundle. This is an advanced operation with minimal validation. Incorrect use of this operation can harm the integrity of your PingFederate configuration. Please ensure you have specified the correct bundle name, setting ID, and setting value before invoking this operation.",
				"operationId": "updateSetting",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "bundle",
						"in": "path",
						"description": "This field represents a configuration file that contains a bundle of settings.",
						"required": true,
						"type": "string"
					},
					{
						"name": "id",
						"in": "path",
						"description": "ID of setting to create/update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration setting.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ConfigStoreSetting"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Configuration setting created/updated.",
						"schema": {
							"$ref": "#/definitions/ConfigStoreSetting"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"403": {
						"description": "The specified configuration bundle is unavailable."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/configStore"
				],
				"summary": "Delete a setting.",
				"description": "Delete a setting. This is an advanced operation with minimal validation. Incorrect use of this operation can harm the integrity of your PingFederate configuration. Please ensure you have specified the correct bundle name and setting ID before invoking this operation.",
				"operationId": "deleteSetting",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "bundle",
						"in": "path",
						"description": "This field represents a configuration file that contains a bundle of settings.",
						"required": true,
						"type": "string"
					},
					{
						"name": "id",
						"in": "path",
						"description": "ID of setting to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Configuration setting deleted."
					},
					"403": {
						"description": "The specified configuration bundle is unavailable."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/configurationEncryptionKeys": {
			"get": {
				"tags": [
					"/configurationEncryptionKeys"
				],
				"summary": "Get the list of Configuration Encryption Keys.",
				"description": "The first key in the list is the current key used for encryption and decryption. Other keys are used for decryption.",
				"operationId": "getConfigurationEncryptionKeys",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ConfigurationEncryptionKeys"
						}
					}
				}
			}
		},
		"/configurationEncryptionKeys/rotate": {
			"post": {
				"tags": [
					"/configurationEncryptionKeys"
				],
				"summary": "Rotate the current Configuration Encryption Key.",
				"description": "A new key will be generated and will be used for encryption and decryption. The previous encryption key will continue to be used for decryption.",
				"operationId": "rotateConfigurationEncryptionKey",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"201": {
						"description": "Configuration encryption key rotated.",
						"schema": {
							"$ref": "#/definitions/ConfigurationEncryptionKeys"
						}
					}
				}
			}
		},
		"/connectionMetadata/convert": {
			"post": {
				"tags": [
					"/connectionMetadata"
				],
				"summary": "Convert a partner's SAML metadata into a JSON representation.",
				"description": "Convert a partner's SAML metadata into an API JSON representation that can be later saved using one of the connection creation endpoints. The metadata can also be overlaid on top of a specified template connection. The convert operation also returns the authenticity of the metadata based on its certificate. If a certificate isn't embedded in the metadata, one can be provided. Bindings and profiles are only enabled in the resulting connection if the partner metadata provides related endpoints. In several scenarios, additional connection configuration details (such as backchannel authentication) may be required in the connection.",
				"operationId": "convert",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Convert metadata request.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ConvertMetadataRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Partner's SAML metadata converted.",
						"schema": {
							"$ref": "#/definitions/ConvertMetadataResponse"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/connectionMetadata/export": {
			"post": {
				"tags": [
					"/connectionMetadata"
				],
				"summary": "Export a connection's SAML metadata that can be given to a partner.",
				"description": "",
				"operationId": "export",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Export metadata request.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ExportMetadataRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Connection SAML metadata exported.",
						"schema": {
							"type": "string"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/idp/connectors/descriptors": {
			"get": {
				"tags": [
					"/idp/connectors"
				],
				"summary": "Get the list of available IdP connector descriptors.",
				"description": "",
				"operationId": "getIdpConnectorDescriptors",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/SaasPluginDescriptors"
						}
					}
				}
			}
		},
		"/idp/connectors/descriptors/{id}": {
			"get": {
				"tags": [
					"/idp/connectors"
				],
				"summary": "Get the list of available connector descriptors.",
				"description": "",
				"operationId": "getIdpConnectorDescriptorById",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "the type of connector descriptor to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/SaasPluginDescriptor"
						}
					}
				}
			}
		},
		"/dataStores/{id}/actions": {
			"get": {
				"tags": [
					"/dataStores"
				],
				"summary": "List the actions for a data store instance.",
				"description": "List the actions for a data store instance. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getActions",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of data store to which these actions belong to.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/Actions"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/dataStores/{id}/actions/{actionId}": {
			"get": {
				"tags": [
					"/dataStores"
				],
				"summary": "Find a data store instance's action by ID.",
				"description": "Find a data store instance's action by ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getAction",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of data store to which these actions belong to.",
						"required": true,
						"type": "string"
					},
					{
						"name": "actionId",
						"in": "path",
						"description": "ID of the action.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/Action"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/dataStores/descriptors/{id}": {
			"get": {
				"tags": [
					"/dataStores"
				],
				"summary": "Get the description of a custom data store plugin by ID.",
				"description": "Get the description of a custom data store plugin by ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getCustomDataStoreDescriptor",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of custom data store descriptor to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/CustomDataStoreDescriptor"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/dataStores/descriptors": {
			"get": {
				"tags": [
					"/dataStores"
				],
				"summary": "Get the list of available custom data store descriptors.",
				"description": "",
				"operationId": "getCustomDataStoreDescriptors",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/CustomDataStoreDescriptors"
						}
					}
				}
			}
		},
		"/dataStores/{id}": {
			"get": {
				"tags": [
					"/dataStores"
				],
				"summary": "Find data store by ID.",
				"description": "Get a data store with the specified ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getDataStore",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of data store instance.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/DataStore"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/dataStores"
				],
				"summary": "Update a data store.",
				"description": "Update a data store with the matching ID. If the data store is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected. Note: A 404 status code is returned for nonexistent IDs.",
				"operationId": "updateDataStore",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of data store instance.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for the data store.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/DataStore"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "Connection test will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "Data store updated.",
						"schema": {
							"$ref": "#/definitions/DataStore"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/dataStores"
				],
				"summary": "Delete a data store.",
				"description": "Delete a data store with the specified ID. A 404 status code is returned for nonexistent IDs. Note: Only unused data stores can be deleted. If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
				"operationId": "deleteDataStore",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of data store instance.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Data store deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Resource is in use and cannot be deleted.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/dataStores": {
			"get": {
				"tags": [
					"/dataStores"
				],
				"summary": "Get list of all data stores.",
				"description": "",
				"operationId": "getDataStores",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/DataStores"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/dataStores"
				],
				"summary": "Create a new data store.",
				"description": "Create a new data store. If the data store is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "createDataStore",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for new data store.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/DataStore"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "Connection test will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"201": {
						"description": "Data store created.",
						"schema": {
							"$ref": "#/definitions/DataStore"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/dataStores/{id}/actions/{actionId}/invokeAction": {
			"post": {
				"tags": [
					"/dataStores"
				],
				"summary": "Invokes an action for a data source instance.",
				"description": "Invokes an action for a data source instance. A 404 status code is returned for nonexistent IDs. If the action produces a download file, the file will be returned directly in the response. Otherwise an ActionResult will be returned.",
				"operationId": "invokeActionWithOptions",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of data store to which these actions belong to.",
						"required": true,
						"type": "string"
					},
					{
						"name": "actionId",
						"in": "path",
						"description": "ID of the action.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Action options for action invoked.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/ActionOptions"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Action invoked on Data store.",
						"schema": {
							"$ref": "#/definitions/ActionResult"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/extendedProperties": {
			"get": {
				"tags": [
					"/extendedProperties"
				],
				"summary": "Get the defined Extended Properties.",
				"description": "",
				"operationId": "getExtendedProperties",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ExtendedProperties"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/extendedProperties"
				],
				"summary": "Update the Extended Properties.",
				"description": "",
				"operationId": "updateExtendedProperties",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Definition of extended properties.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ExtendedProperties"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Extended properties updated.",
						"schema": {
							"$ref": "#/definitions/ExtendedProperties"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/identityStoreProvisioners/descriptors/{id}": {
			"get": {
				"tags": [
					"/identityStoreProvisioners"
				],
				"summary": "Get the descriptor of an identity store provisioner by ID.",
				"description": "",
				"operationId": "getIdentityStoreProvisionerDescriptorById",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of identity store provisioner descriptor",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/IdentityStoreProvisionerDescriptor"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/identityStoreProvisioners/descriptors": {
			"get": {
				"tags": [
					"/identityStoreProvisioners"
				],
				"summary": "Get the list of available identity store provisioner descriptors.",
				"description": "",
				"operationId": "getIdentityStoreProvisionerDescriptors",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/IdentityStoreProvisionerDescriptors"
						}
					}
				}
			}
		},
		"/identityStoreProvisioners/{id}": {
			"get": {
				"tags": [
					"/identityStoreProvisioners"
				],
				"summary": "Get an identity store provisioner by ID.",
				"description": "",
				"operationId": "getIdentityStoreProvisioner",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of identity store provisioner instance",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/IdentityStoreProvisioner"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/identityStoreProvisioners"
				],
				"summary": "Update an identity store provisioner instance",
				"description": "",
				"operationId": "updateIdentityStoreProvisioner",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of identity store provisioner instance",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for the identity store provisioner instance",
						"required": true,
						"schema": {
							"$ref": "#/definitions/IdentityStoreProvisioner"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Identity store provisioner updated",
						"schema": {
							"$ref": "#/definitions/IdentityStoreProvisioner"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/identityStoreProvisioners"
				],
				"summary": "Delete an identity store provisioner instance",
				"description": "",
				"operationId": "deleteIdentityStoreProvisioner",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of identity store provisioner instance",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Identity store provisioner deleted"
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Resource is in use and cannot be deleted.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/identityStoreProvisioners": {
			"get": {
				"tags": [
					"/identityStoreProvisioners"
				],
				"summary": "Get the list of configured identity store provisioner instances.",
				"description": "",
				"operationId": "getIdentityStoreProvisioners",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/IdentityStoreProvisioners"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/identityStoreProvisioners"
				],
				"summary": "Create a new identity store provisioner instance.",
				"description": "",
				"operationId": "createIdentityStoreProvisioner",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for the identity store provisioner instance.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/IdentityStoreProvisioner"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/IdentityStoreProvisioner"
						}
					},
					"201": {
						"description": "Identity store provisioner created.",
						"schema": {
							"$ref": "#/definitions/IdentityStoreProvisioner"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/idp/adapters/{id}/actions": {
			"get": {
				"tags": [
					"/idp/adapters"
				],
				"summary": "List the actions for an IdP adapter instance.",
				"description": "List the actions for an IdP adapter instance. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getActions",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the IdP adapter instance to which these actions belongs to.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/Actions"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/idp/adapters/descriptors": {
			"get": {
				"tags": [
					"/idp/adapters"
				],
				"summary": "Get the list of available IdP adapter descriptors.",
				"description": "",
				"operationId": "getIdpAdapterDescriptors",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/IdpAdapterDescriptors"
						}
					}
				}
			}
		},
		"/idp/adapters/descriptors/{id}": {
			"get": {
				"tags": [
					"/idp/adapters"
				],
				"summary": "Get the description of an IdP adapter plugin by ID.",
				"description": "Get the description of an IdP adapter plugin by ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getIdpAdapterDescriptorsById",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of IdP adapter descriptor to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/IdpAdapterDescriptor"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/idp/adapters/{id}/actions/{actionId}": {
			"get": {
				"tags": [
					"/idp/adapters"
				],
				"summary": "Find an IdP adapter instance's action by ID.",
				"description": "Find an IdP adapter instance's action by ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getAction",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the IdP adapter instance to which these actions belongs to.",
						"required": true,
						"type": "string"
					},
					{
						"name": "actionId",
						"in": "path",
						"description": "ID of the action.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/Action"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/idp/adapters": {
			"get": {
				"tags": [
					"/idp/adapters"
				],
				"summary": "Get the list of configured IdP adapter instances.",
				"description": "",
				"operationId": "getIdpAdapters",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "Page number to retrieve.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "numberPerPage",
						"in": "query",
						"description": "Number of adapters per page.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter criteria limits the IdP adapters that are returned to only those that match it. The filter criteria is compared to the IdP adapter instance name and ID fields. The comparison is a case-insensitive partial match. No additional pattern based matching is supported.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/IdpAdapters"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/idp/adapters"
				],
				"summary": "Create a new IdP adapter instance.",
				"description": "Create a new IdP adapter instance. If the IdP adapter is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "createIdpAdapter",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for the IdP adapter instance.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/IdpAdapter"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"201": {
						"description": "Adapter created.",
						"schema": {
							"$ref": "#/definitions/IdpAdapter"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/idp/adapters/{id}": {
			"get": {
				"tags": [
					"/idp/adapters"
				],
				"summary": "Find an IdP adapter instance by ID.",
				"description": "Get the configured IdP adapter instance with the specified ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getIdpAdapter",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of IdP adapter instance.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/IdpAdapter"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/idp/adapters"
				],
				"summary": "Update an IdP adapter instance.",
				"description": "Update an IdP adapter instance.If the IdP adapter is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "updateIdpAdapter",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of IdP adapter instance.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for the IdP adapter instance.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/IdpAdapter"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "Adapter updated.",
						"schema": {
							"$ref": "#/definitions/IdpAdapter"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/idp/adapters"
				],
				"summary": "Delete an IdP adapter instance.",
				"description": "Delete an IdP adapter instance with the specified ID. A 404 status code is returned for nonexistent IDs. Note: Only adapters not in use can be deleted. If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
				"operationId": "deleteIdpAdapter",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of IdP adapter instance.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Adapter deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Resource is in use and cannot be deleted.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/idp/adapters/{id}/actions/{actionId}/invokeAction": {
			"post": {
				"tags": [
					"/idp/adapters"
				],
				"summary": "Invokes an action for an IdP adapter instance.",
				"description": "Invokes an action for an IdP adapter instance. A 404 status code is returned for nonexistent IDs. If the action produces a download file, the file will be returned directly in the response. Otherwise an ActionResult will be returned.",
				"operationId": "invokeActionWithOptions",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the IdP adapter instance to which these actions belongs to.",
						"required": true,
						"type": "string"
					},
					{
						"name": "actionId",
						"in": "path",
						"description": "ID of the action.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Action options for action invoked.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/ActionOptions"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Action invoked on adapter.",
						"schema": {
							"$ref": "#/definitions/ActionResult"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/sp/idpConnections/{id}": {
			"get": {
				"tags": [
					"/sp/idpConnections"
				],
				"summary": "Find IdP connection by ID.",
				"description": "Get a SAML 2.0 IdP connection with the specified ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getConnection",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of IdP Connection to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/IdpConnection"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/sp/idpConnections"
				],
				"summary": "Update an IdP connection.",
				"description": "Update an IdP connection with the matching ID. If the IdP connection is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected. Note: A 404 status code is returned for nonexistent IDs.",
				"operationId": "updateConnection",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of IdP Connection to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for updated connection.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/IdpConnection"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "Connection updated.",
						"schema": {
							"$ref": "#/definitions/IdpConnection"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/sp/idpConnections"
				],
				"summary": "Delete an IdP connection.",
				"description": "Delete an IdP connection with the specified ID. A 404 status code is returned for nonexistent IDs. Note: Only inactive connections can be deleted. If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
				"operationId": "deleteConnection",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of IdP Connection to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Connection deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Resource is in use and cannot be deleted.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/sp/idpConnections": {
			"get": {
				"tags": [
					"/sp/idpConnections"
				],
				"summary": "Get list of IdP connections.",
				"description": "Get a list of all the OIDC, WS-Trust, WS-Fed, SAML1.0, SAML1.1 and SAML 2.0 IdP connections.",
				"operationId": "getConnections",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "entityId",
						"in": "query",
						"description": "Entity ID of the connection to fetch. (case-sensitive)",
						"required": false,
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "Page number to retrieve.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "numberPerPage",
						"in": "query",
						"description": "Number of connections per page.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter criteria limits the IdP connections that are returned to only those that match it. The filter criteria is compared to the IdP connection name and partner entity ID fields. The comparison is a case-insensitive partial match. No additional pattern based matching is supported.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/IdpConnections"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/sp/idpConnections"
				],
				"summary": "Create a new IdP connection.",
				"description": "Create a new IdP connection. If the IdP connection is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "createConnection",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for new connection.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/IdpConnection"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"201": {
						"description": "Connection created.",
						"schema": {
							"$ref": "#/definitions/IdpConnection"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/sp/idpConnections/{id}/credentials/certs": {
			"get": {
				"tags": [
					"/sp/idpConnections"
				],
				"summary": "Get the IdP connection's certificates.",
				"description": "",
				"operationId": "getConnectionCerts",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the IdP Connection.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ConnectionCerts"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/sp/idpConnections"
				],
				"summary": "Add a new IdP connection certificate.",
				"description": "If the certificate's activeVerificationCert flag is set to true, it will become the connection's primary verification certificate.",
				"operationId": "addConnectionCert",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the IdP Connection to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for a verification certificate.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ConnectionCert"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Connection Certificate added.",
						"schema": {
							"$ref": "#/definitions/ConnectionCert"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/sp/idpConnections"
				],
				"summary": "Update the IdP connection's certificates.",
				"description": "",
				"operationId": "updateConnectionCerts",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the IdP Connection to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for a verification certificates.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ConnectionCerts"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Connection updated.",
						"schema": {
							"$ref": "#/definitions/ConnectionCerts"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/sp/idpConnections/{id}/credentials/decryptionKeys": {
			"get": {
				"tags": [
					"/sp/idpConnections"
				],
				"summary": "Get the decryption keys of an IdP connection.",
				"description": "",
				"operationId": "getDecryptionKeys",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the IdP Connection to update.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/DecryptionKeys"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/sp/idpConnections"
				],
				"summary": "Updating the IdP connection's decryption keys.",
				"description": "",
				"operationId": "updateDecryptionKeys",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the IdP Connection to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for decryption keys.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/DecryptionKeys"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Connection updated.",
						"schema": {
							"$ref": "#/definitions/DecryptionKeys"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/sp/idpConnections/{id}/credentials/signingSettings": {
			"get": {
				"tags": [
					"/sp/idpConnections"
				],
				"summary": "Get the IdP connection's signature settings.",
				"description": "",
				"operationId": "getSigningSettings",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the IdP Connection.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/SigningSettings"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/sp/idpConnections"
				],
				"summary": "Update the IdP connection's signature settings.",
				"description": "",
				"operationId": "updateSigningSettings",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the IdP Connection to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Signature settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SigningSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Connection updated.",
						"schema": {
							"$ref": "#/definitions/SigningSettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/idp/defaultUrls": {
			"get": {
				"tags": [
					"/idp/defaultUrls"
				],
				"summary": "Gets the IDP Default URL settings.",
				"description": "",
				"operationId": "getDefaultUrl",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/IdpDefaultUrl"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/idp/defaultUrls"
				],
				"summary": "Update the IDP Default URL settings.",
				"description": "",
				"operationId": "updateDefaultUrlSettings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for the IdP Default URL settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/IdpDefaultUrl"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Default URL updated.",
						"schema": {
							"$ref": "#/definitions/IdpDefaultUrl"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/idpToSpAdapterMapping/{id}": {
			"get": {
				"tags": [
					"/idpToSpAdapterMapping"
				],
				"summary": "Get an IdP-to-SP Adapter Mapping.",
				"description": "",
				"operationId": "getIdpToSpAdapterMappingsById",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of IdP-to-SP Adapter Mapping to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/IdpToSpAdapterMapping"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/idpToSpAdapterMapping"
				],
				"summary": "Update the specified IdP-to-SP Adapter mapping.",
				"description": "",
				"operationId": "updateIdpToSpAdapterMapping",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of source adapter in the IdP-to-SP Adapter Mapping to fetch.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for updated IdP-to-SP Adapter Mapping.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/IdpToSpAdapterMapping"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "IdP-to-SP adapter mapping updated.",
						"schema": {
							"$ref": "#/definitions/IdpToSpAdapterMapping"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/idpToSpAdapterMapping"
				],
				"summary": "Delete an Adapter to Adapter Mapping.",
				"description": "",
				"operationId": "deleteIdpToSpAdapterMappingsById",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the IdP-to-SP Adapter Mapping to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "IdP-to-SP adapter mapping deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/idpToSpAdapterMapping": {
			"get": {
				"tags": [
					"/idpToSpAdapterMapping"
				],
				"summary": "Get list of IdP-to-SP Adapter Mappings.",
				"description": "",
				"operationId": "getIdpToSpAdapterMappings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/IdpToSpAdapterMappings"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/idpToSpAdapterMapping"
				],
				"summary": "Create a new IdP-to-SP Adapter mapping.",
				"description": "",
				"operationId": "createIdpToSpAdapterMapping",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for new IdP-to-SP Adapter Mapping.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/IdpToSpAdapterMapping"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"201": {
						"description": "IdP-to-SP adapter mapping created.",
						"schema": {
							"$ref": "#/definitions/IdpToSpAdapterMapping"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/incomingProxySettings": {
			"get": {
				"tags": [
					"/incomingProxySettings"
				],
				"summary": "Get incoming proxy settings.",
				"description": "When PingFederate is deployed behind a proxy server or load balancer, use information in HTTP headers added by the proxy server to construct correct responses.",
				"operationId": "getIncomingProxySettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/IncomingProxySettings"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/incomingProxySettings"
				],
				"summary": "Update incoming proxy settings.",
				"description": "When PingFederate is deployed behind a proxy server or load balancer, use information in HTTP headers added by the proxy server to construct correct responses.",
				"operationId": "updateIncomingProxySettings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Incoming proxy settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/IncomingProxySettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Incoming proxy settings updated.",
						"schema": {
							"$ref": "#/definitions/IncomingProxySettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/kerberos/realms/{id}": {
			"get": {
				"tags": [
					"/kerberos/realms"
				],
				"summary": "Find a Kerberos Realm by ID.",
				"description": "Get a Kerberos Realm with the specified ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getKerberosRealm",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the Kerberos Realm to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/KerberosRealm"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/kerberos/realms"
				],
				"summary": "Update a Kerberos Realm by ID.",
				"description": "Update a Kerberos Realm with the specified ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "updateKerberosRealm",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the Kerberos Realm to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for updated Domain/Realm.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/KerberosRealm"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Defaults to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "Kerberos realm updated.",
						"schema": {
							"$ref": "#/definitions/KerberosRealm"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/kerberos/realms"
				],
				"summary": "Delete a Kerberos Realm.",
				"description": "Delete a Kerberos Realm with the specified ID. A 404 status code is returned for nonexistent IDs. Note: If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
				"operationId": "deleteKerberosRealm",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of Kerberos Realm to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Kerberos realm deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/kerberos/realms": {
			"get": {
				"tags": [
					"/kerberos/realms"
				],
				"summary": "Gets the Kerberos Realms.",
				"description": "",
				"operationId": "getKerberosRealms",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/KerberosRealms"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/kerberos/realms"
				],
				"summary": "Create a new Kerberos Realm.",
				"description": "Create a new Kerberos Realm. If the Kerberos Realm is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "createKerberosRealm",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for new policy.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/KerberosRealm"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Defaults to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"201": {
						"description": "Kerberos realm created.",
						"schema": {
							"$ref": "#/definitions/KerberosRealm"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/kerberos/realms/settings": {
			"get": {
				"tags": [
					"/kerberos/realms"
				],
				"summary": "Gets the Kerberos Realms Settings.",
				"description": "",
				"operationId": "getKerberosRealmSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/KerberosRealmsSettings"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/kerberos/realms"
				],
				"summary": "Set/Update the Kerberos Realms Settings.",
				"description": "",
				"operationId": "updateSettings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Kerberos Realms Settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/KerberosRealmsSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Settings updated.",
						"schema": {
							"$ref": "#/definitions/KerberosRealmsSettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/license": {
			"get": {
				"tags": [
					"/license"
				],
				"summary": "Get a license summary.",
				"description": "",
				"operationId": "getLicense",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/LicenseView"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/license"
				],
				"summary": "Import a license.",
				"description": "",
				"operationId": "updateLicense",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Base64 encoded value of a license.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/LicenseFile"
						}
					}
				],
				"responses": {
					"200": {
						"description": "License imported.",
						"schema": {
							"$ref": "#/definitions/LicenseView"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/license/agreement": {
			"get": {
				"tags": [
					"/license"
				],
				"summary": "Get license agreement link.",
				"description": "The license agreement has to be accepted before performing any other API calls.",
				"operationId": "getLicenseAgreement",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/LicenseAgreementInfo"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/license"
				],
				"summary": "Accept license agreement.",
				"description": "The license agreement has to be accepted before performing any other API calls.",
				"operationId": "updateLicenseAgreement",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "License Agreement reference.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/LicenseAgreementInfo"
						}
					}
				],
				"responses": {
					"200": {
						"description": "License agreement accepted.",
						"schema": {
							"$ref": "#/definitions/LicenseAgreementInfo"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/localIdentity/identityProfiles/{id}": {
			"get": {
				"tags": [
					"/localIdentity/identityProfiles"
				],
				"summary": "Get the local identity profile by ID.",
				"description": "Get a local identity profile with the specified ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getIdentityProfile",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of profile to fetch",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/LocalIdentityProfile"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/localIdentity/identityProfiles"
				],
				"summary": "Update the local identity profile by ID.",
				"description": "Update a local identity profile with the specified ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "updateIdentityProfile",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the profile to update",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for updated local identity profile.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/LocalIdentityProfile"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "Local identity profile updated.",
						"schema": {
							"$ref": "#/definitions/LocalIdentityProfile"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/localIdentity/identityProfiles"
				],
				"summary": "Delete the local identity profile by ID.",
				"description": "Delete a local identity profile with the specified ID. A 404 status code is returned for nonexistent IDs. Note: If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
				"operationId": "deleteIdentityProfile",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the profile to delete",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Local identity profile deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/localIdentity/identityProfiles": {
			"get": {
				"tags": [
					"/localIdentity/identityProfiles"
				],
				"summary": "Get the list of configured local identity profiles.",
				"description": "",
				"operationId": "getIdentityProfiles",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "Page number to retrieve.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "numberPerPage",
						"in": "query",
						"description": "Number of local identity profiles per page.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter criteria limits the local identity profiles that are returned to only those that match it. The filter criteria is compared to the local identity profile name and ID fields. The comparison is a case-insensitive partial match. No additional pattern based matching is supported.",
						"required": false,
						"type": "string"
					},
					{
						"name": "apcId",
						"in": "query",
						"description": "Filter the local identity profiles by matching policy contract ID.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/LocalIdentityProfiles"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/localIdentity/identityProfiles"
				],
				"summary": "Create a new local identity profile.",
				"description": "Create a new local identity profile. If the local identity profile is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "createIdentityProfile",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for a new profile.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/LocalIdentityProfile"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"201": {
						"description": "Local identity profile created.",
						"schema": {
							"$ref": "#/definitions/LocalIdentityProfile"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/metadataUrls": {
			"get": {
				"tags": [
					"/metadataUrls"
				],
				"summary": "Get a list of Metadata URLs",
				"description": "",
				"operationId": "getMetadataUrls",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/MetadataUrls"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/metadataUrls"
				],
				"summary": "Add a new Metadata URL.",
				"description": "Add a new Metadata URL. If the Metadata URL is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "addMetadataUrl",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for a new Metadata URL.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/MetadataUrl"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Metadata URL added.",
						"schema": {
							"$ref": "#/definitions/MetadataUrl"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/metadataUrls/{id}": {
			"get": {
				"tags": [
					"/metadataUrls"
				],
				"summary": "Get a Metadata URL by ID.",
				"description": "Get a Metadata URL with the specified ID. A 404 status code is returned for nonexistent IDs",
				"operationId": "getMetadataUrl",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of Metadata URL to fetch",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/MetadataUrl"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/metadataUrls"
				],
				"summary": "Update a Metadata URL by ID.",
				"description": "Update a Metadata URL by ID. If the Metadata URL is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "updateMetadataUrl",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the Metadata URL to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for the Metadata URL.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/MetadataUrl"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Metadata URL updated.",
						"schema": {
							"$ref": "#/definitions/MetadataUrl"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/metadataUrls"
				],
				"summary": "Delete a Metadata URL by ID.",
				"description": "Delete Metadata URL with the specified ID. A 404 status code is returned for nonexistent IDs. Note: If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
				"operationId": "deleteMetadataUrl",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of Metadata URL to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Metadata URL deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Resource is in use and cannot be deleted.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/notificationPublishers/{id}/actions": {
			"get": {
				"tags": [
					"/notificationPublishers"
				],
				"summary": "List the actions for a notification publisher plugin instance.",
				"description": "",
				"operationId": "getActions",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the notification publisher plugin instance to which these actions belongs to.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/Actions"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/notificationPublishers/{id}/actions/{actionId}": {
			"get": {
				"tags": [
					"/notificationPublishers"
				],
				"summary": "Find an notification publisher plugin instance's action by ID.",
				"description": "",
				"operationId": "getAction",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the notification publisher plugin instance to which these actions belongs to.",
						"required": true,
						"type": "string"
					},
					{
						"name": "actionId",
						"in": "path",
						"description": "ID of the action to get.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/Action"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/notificationPublishers/settings": {
			"get": {
				"tags": [
					"/notificationPublishers"
				],
				"summary": "Get general notification publisher settings.",
				"description": "",
				"operationId": "getSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/NotificationPublishersSettings"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/notificationPublishers"
				],
				"summary": "Update general notification publisher settings.",
				"description": "",
				"operationId": "updateSettings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": true,
						"schema": {
							"$ref": "#/definitions/NotificationPublishersSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Notification publisher settings updated.",
						"schema": {
							"$ref": "#/definitions/NotificationPublishersSettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/notificationPublishers/{id}": {
			"get": {
				"tags": [
					"/notificationPublishers"
				],
				"summary": "Get a specific notification publisher plugin instance.",
				"description": "",
				"operationId": "getNotificationPublisher",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of a notification publisher plugin instance.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/NotificationPublisher"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/notificationPublishers"
				],
				"summary": "Update a notification publisher plugin instance.",
				"description": "",
				"operationId": "updateNotificationPublisher",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of a notification publisher plugin instance.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for a notification publisher plugin instance.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/NotificationPublisher"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Notification Publisher plugin updated.",
						"schema": {
							"$ref": "#/definitions/NotificationPublisher"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/notificationPublishers"
				],
				"summary": "Delete a notification publisher plugin instance.",
				"description": "",
				"operationId": "deleteNotificationPublisher",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of a notification publisher plugin instance.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Notification Publisher plugin deleted."
					},
					"403": {
						"description": "The operation is not permitted, based on the current configuration of the server."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/notificationPublishers/{id}/actions/{actionId}/invokeAction": {
			"post": {
				"tags": [
					"/notificationPublishers"
				],
				"summary": "Invokes an action for notification publisher plugin instance.",
				"description": "",
				"operationId": "invokeActionWithOptions",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the notification publisher plugin instance to which these actions belongs to.",
						"required": true,
						"type": "string"
					},
					{
						"name": "actionId",
						"in": "path",
						"description": "ID of the action to get.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Action options for action invoked.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/ActionOptions"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Notification Publisher plugin action invoked.",
						"schema": {
							"$ref": "#/definitions/ActionResult"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/notificationPublishers": {
			"get": {
				"tags": [
					"/notificationPublishers"
				],
				"summary": "Get a list of notification publisher plugin instances.",
				"description": "",
				"operationId": "getNotificationPublishers",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/NotificationPublishers"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/notificationPublishers"
				],
				"summary": "Create a notification publisher plugin instance.",
				"description": "",
				"operationId": "createNotificationPublisher",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for a notification publisher plugin instance.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/NotificationPublisher"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Notification Publisher plugin created.",
						"schema": {
							"$ref": "#/definitions/NotificationPublisher"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/notificationPublishers/descriptors": {
			"get": {
				"tags": [
					"/notificationPublishers"
				],
				"summary": "Get the list of available Notification Publisher Plugin descriptors.",
				"description": "",
				"operationId": "getNotificationPublisherPluginDescriptors",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/NotificationPublisherDescriptors"
						}
					}
				}
			}
		},
		"/notificationPublishers/descriptors/{id}": {
			"get": {
				"tags": [
					"/notificationPublishers"
				],
				"summary": "Get the description of a notification publisher plugin descriptor.",
				"description": "",
				"operationId": "getNotificationPublisherPluginDescriptor",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of notification publisher plugin descriptor.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/NotificationPublisherDescriptor"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/authenticationPolicyContractMappings": {
			"get": {
				"tags": [
					"/oauth/authenticationPolicyContractMappings"
				],
				"summary": "Get the list of authentication policy contract to persistent grant mappings.",
				"description": "",
				"operationId": "getApcMappings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ApcToPersistentGrantMappings"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/oauth/authenticationPolicyContractMappings"
				],
				"summary": "Create a new authentication policy contract to persistent grant mapping.",
				"description": "Create a new authentication policy contract to persistent grant mapping. If a mapping can't be created, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "createApcMapping",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for an authentication policy contract to persistent grant mapping.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ApcToPersistentGrantMapping"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"201": {
						"description": "Authentication policy contract to persistent grant mapping created.",
						"schema": {
							"$ref": "#/definitions/ApcToPersistentGrantMapping"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/authenticationPolicyContractMappings/{id}": {
			"get": {
				"tags": [
					"/oauth/authenticationPolicyContractMappings"
				],
				"summary": "Find the authentication policy contract to persistent grant mapping by ID.",
				"description": "",
				"operationId": "getApcMapping",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the authentication policy contract to persistent grant mapping.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ApcToPersistentGrantMapping"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/oauth/authenticationPolicyContractMappings"
				],
				"summary": "Update an authentication policy contract to persistent grant mapping.",
				"description": "",
				"operationId": "updateApcMapping",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the authentication policy contract to persistent grant mapping to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for an authentication policy contract to persistent grant mapping.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ApcToPersistentGrantMapping"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "Authentication policy contract to persistent grant mapping updated.",
						"schema": {
							"$ref": "#/definitions/ApcToPersistentGrantMapping"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/oauth/authenticationPolicyContractMappings"
				],
				"summary": "Delete an authentication policy contract to persistent grant mapping.",
				"description": "",
				"operationId": "deleteApcMapping",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the authentication policy contract to persistent grant mapping.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Authentication policy contract to persistent grant mapping deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/cibaServerPolicy/requestPolicies/{id}": {
			"get": {
				"tags": [
					"/oauth/cibaServerPolicy"
				],
				"summary": "Find request policy by ID.",
				"description": "Get a request policy with the specified ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getPolicy",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the request policy to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/RequestPolicy"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/oauth/cibaServerPolicy"
				],
				"summary": "Update a request policy.",
				"description": "Update a request policy with the matching ID. If the policy is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected. Note: A 404 status code is returned for nonexistent IDs.",
				"operationId": "updatePolicy",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the request policy to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for updated policy.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/RequestPolicy"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "Request Handling Policy updated.",
						"schema": {
							"$ref": "#/definitions/RequestPolicy"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/oauth/cibaServerPolicy"
				],
				"summary": "Delete a request policy.",
				"description": "Delete a request policy with the specified ID. A 404 status code is returned for nonexistent IDs. Note: If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
				"operationId": "deletePolicy",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of request policy to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Request Handling Policy deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/cibaServerPolicy/requestPolicies": {
			"get": {
				"tags": [
					"/oauth/cibaServerPolicy"
				],
				"summary": "Get list of request policies.",
				"description": "",
				"operationId": "getPolicies",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/RequestPolicies"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/oauth/cibaServerPolicy"
				],
				"summary": "Create a new request policy.",
				"description": "Create a new request policy. If the request policy is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "createPolicy",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for new policy.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/RequestPolicy"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"201": {
						"description": "Request Handling Policy created.",
						"schema": {
							"$ref": "#/definitions/RequestPolicy"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/cibaServerPolicy/settings": {
			"get": {
				"tags": [
					"/oauth/cibaServerPolicy"
				],
				"summary": "Get general ciba server request policy settings.",
				"description": "",
				"operationId": "getSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/CibaServerPolicySettings"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/oauth/cibaServerPolicy"
				],
				"summary": "Update general ciba server request policy settings.",
				"description": "",
				"operationId": "updateSettings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Ciba server request policy settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CibaServerPolicySettings"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "Settings updated.",
						"schema": {
							"$ref": "#/definitions/CibaServerPolicySettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/clients/{id}": {
			"get": {
				"tags": [
					"/oauth/clients"
				],
				"summary": "Find the OAuth client by ID.",
				"description": "",
				"operationId": "getClient",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the client.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/Client"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/oauth/clients"
				],
				"summary": "Updates the OAuth client.",
				"description": "",
				"operationId": "updateClient",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the client to be updated.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for the client.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Client"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Client updated.",
						"schema": {
							"$ref": "#/definitions/Client"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/oauth/clients"
				],
				"summary": "Delete an OAuth client.",
				"description": "",
				"operationId": "deleteClient",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the client.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Client deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Resource is in use and cannot be deleted.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/clients": {
			"get": {
				"tags": [
					"/oauth/clients"
				],
				"summary": "Get the list of OAuth clients.",
				"description": "",
				"operationId": "getClients",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "Page number to retrieve.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "numberPerPage",
						"in": "query",
						"description": "Number of OAuth clients per page. (uncapped if unspecified)",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter criteria limits the OAuth clients that are returned to only those that match it. The filter criteria is compared to the OAuth client name and ID fields. The comparison is a case-insensitive partial match. No additional pattern based matching is supported.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/Clients"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/oauth/clients"
				],
				"summary": "Create a new OAuth client.",
				"description": "Create a new OAuth client. If an OAuth client can't be created, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "createClient",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for new client.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Client"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Client created.",
						"schema": {
							"$ref": "#/definitions/Client"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/clients/{id}/clientAuth/clientSecret": {
			"get": {
				"tags": [
					"/oauth/clients"
				],
				"summary": "Get the client secret of an existing OAuth client.",
				"description": "",
				"operationId": "getClientSecret",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the client.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ClientSecret"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/oauth/clients"
				],
				"summary": "Update the client secret of an existing OAuth client.",
				"description": "",
				"operationId": "updateClientSecret",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the client to be updated.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Client Secret.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ClientSecret"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Client updated.",
						"schema": {
							"$ref": "#/definitions/ClientSecret"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/clientSettings": {
			"get": {
				"tags": [
					"/oauth/clientSettings"
				],
				"summary": "Configure the client settings.",
				"description": "",
				"operationId": "getClientSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ClientSettings"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/oauth/clientSettings"
				],
				"summary": "Update the client settings.",
				"description": "",
				"operationId": "updateClientSettings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for client settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ClientSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Client Settings updated.",
						"schema": {
							"$ref": "#/definitions/ClientSettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/clientRegistrationPolicies/{id}": {
			"get": {
				"tags": [
					"/oauth/clientRegistrationPolicies"
				],
				"summary": "Get a specific client registration policy plugin instance.",
				"description": "",
				"operationId": "getDynamicClientRegistrationPolicy",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of client registration policy plugin instance.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ClientRegistrationPolicy"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/oauth/clientRegistrationPolicies"
				],
				"summary": "Update a client registration policy plugin instance.",
				"description": "",
				"operationId": "updateDynamicClientRegistrationPolicy",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of a client registration policy plugin instance.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for a client registration policy plugin instance.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ClientRegistrationPolicy"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Client Registration Policy plugin updated.",
						"schema": {
							"$ref": "#/definitions/ClientRegistrationPolicy"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/oauth/clientRegistrationPolicies"
				],
				"summary": "Delete a client registration policy plugin instance.",
				"description": "",
				"operationId": "deleteDynamicClientRegistrationPolicy",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of a client registration policy plugin instance.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Client Registration Policy plugin deleted."
					},
					"403": {
						"description": "The operation is not permitted, based on the current configuration of the server."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/clientRegistrationPolicies/descriptors": {
			"get": {
				"tags": [
					"/oauth/clientRegistrationPolicies"
				],
				"summary": "Get the list of available client registration policy plugin descriptors.",
				"description": "",
				"operationId": "getDynamicClientRegistrationDescriptors",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ClientRegistrationPolicyDescriptors"
						}
					}
				}
			}
		},
		"/oauth/clientRegistrationPolicies": {
			"get": {
				"tags": [
					"/oauth/clientRegistrationPolicies"
				],
				"summary": "Get a list of client registration policy plugin instances.",
				"description": "",
				"operationId": "getDynamicClientRegistrationPolicies",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ClientRegistrationPolicies"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/oauth/clientRegistrationPolicies"
				],
				"summary": "Create a client registration policy plugin instance.",
				"description": "",
				"operationId": "createDynamicClientRegistrationPolicy",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for a client registration policy plugin instance.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ClientRegistrationPolicy"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Client Registration Policy plugin created.",
						"schema": {
							"$ref": "#/definitions/ClientRegistrationPolicy"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/clientRegistrationPolicies/descriptors/{id}": {
			"get": {
				"tags": [
					"/oauth/clientRegistrationPolicies"
				],
				"summary": "Get the description of a client registration policy plugin descriptor.",
				"description": "",
				"operationId": "getDynamicClientRegistrationDescriptor",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of client registration policy plugin descriptor.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ClientRegistrationPolicyDescriptor"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/idpAdapterMappings/{id}": {
			"get": {
				"tags": [
					"/oauth/idpAdapterMappings"
				],
				"summary": "Find the IdP adapter mapping by the ID.",
				"description": "",
				"operationId": "getIdpAdapterMapping",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the adapter mapping.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/IdpAdapterMapping"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/oauth/idpAdapterMappings"
				],
				"summary": "Update an IdP adapter mapping.",
				"description": "",
				"operationId": "updateIdpAdapterMapping",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the IdP adapter mapping to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for IdP adapter mapping.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/IdpAdapterMapping"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "IdP adapter mapping updated.",
						"schema": {
							"$ref": "#/definitions/IdpAdapterMapping"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/oauth/idpAdapterMappings"
				],
				"summary": "Delete an IdP adapter mapping.",
				"description": "",
				"operationId": "deleteIdpAdapterMapping",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the IdP adapter mapping.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "IdP adapter mapping deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/idpAdapterMappings": {
			"get": {
				"tags": [
					"/oauth/idpAdapterMappings"
				],
				"summary": "Get the list of IdP adapter mappings.",
				"description": "",
				"operationId": "getIdpAdapterMappings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/IdpAdapterMappings"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/oauth/idpAdapterMappings"
				],
				"summary": "Create a new IdP adapter mapping.",
				"description": "Create a new IdP adapter mapping. If an IdP adapter mapping can't be created, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "createIdpAdapterMapping",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for IdP adapter mapping.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/IdpAdapterMapping"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"201": {
						"description": "IdP adapter mapping created.",
						"schema": {
							"$ref": "#/definitions/IdpAdapterMapping"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/outOfBandAuthPlugins/{id}/actions": {
			"get": {
				"tags": [
					"/oauth/outOfBandAuthPlugins"
				],
				"summary": "List of actions for an Out of Band authenticator plugin instance.",
				"description": "",
				"operationId": "getActions",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the Out of Band authenticator plugin instance to which these actions belongs to.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/Actions"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/outOfBandAuthPlugins/descriptors": {
			"get": {
				"tags": [
					"/oauth/outOfBandAuthPlugins"
				],
				"summary": "Get the list of available Out of Band authenticator plugin descriptors.",
				"description": "",
				"operationId": "getOOBAuthPluginDescriptors",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/OutOfBandAuthPluginDescriptors"
						}
					}
				}
			}
		},
		"/oauth/outOfBandAuthPlugins": {
			"get": {
				"tags": [
					"/oauth/outOfBandAuthPlugins"
				],
				"summary": "Get a list of Out of Band authenticator plugin instances.",
				"description": "",
				"operationId": "getOOBAuthenticators",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/OutOfBandAuthenticators"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/oauth/outOfBandAuthPlugins"
				],
				"summary": "Create an Out of Band authenticator plugin instance.",
				"description": "",
				"operationId": "createOOBAuthenticator",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for an Out of Band authenticator plugin instance.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/OutOfBandAuthenticator"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Out of Band Authenticator created.",
						"schema": {
							"$ref": "#/definitions/OutOfBandAuthenticator"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/outOfBandAuthPlugins/{id}": {
			"get": {
				"tags": [
					"/oauth/outOfBandAuthPlugins"
				],
				"summary": "Get a specific Out of Band authenticator plugin instance.",
				"description": "",
				"operationId": "getOOBAuthenticator",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of Out of Band authenticator plugin instance.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/OutOfBandAuthenticator"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/oauth/outOfBandAuthPlugins"
				],
				"summary": "Update an Out of Band authenticator plugin instance.",
				"description": "",
				"operationId": "updateOOBAuthenticator",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of Out of Band authenticator plugin instance.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for an Out of Band authenticator plugin instance.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/OutOfBandAuthenticator"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Out of Band Authenticator updated.",
						"schema": {
							"$ref": "#/definitions/OutOfBandAuthenticator"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/oauth/outOfBandAuthPlugins"
				],
				"summary": "Delete an Out of Band authenticator plugin instance.",
				"description": "",
				"operationId": "deleteOOBAuthenticator",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of Out of Band authenticator plugin instance.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Out of Band Authenticator deleted."
					},
					"403": {
						"description": "The operation is not permitted, based on the current configuration of the server."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/outOfBandAuthPlugins/descriptors/{id}": {
			"get": {
				"tags": [
					"/oauth/outOfBandAuthPlugins"
				],
				"summary": "Get the descriptor of an Out of Band authenticator plugin.",
				"description": "",
				"operationId": "getOOBAuthPluginDescriptor",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of an Out of Band authenticator plugin descriptor.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/OutOfBandAuthPluginDescriptor"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/outOfBandAuthPlugins/{id}/actions/{actionId}": {
			"get": {
				"tags": [
					"/oauth/outOfBandAuthPlugins"
				],
				"summary": "Find an Out of Band authenticator plugin instance's action by ID.",
				"description": "",
				"operationId": "getAction",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the Out of Band authenticator plugin instance to which these actions belongs to.",
						"required": true,
						"type": "string"
					},
					{
						"name": "actionId",
						"in": "path",
						"description": "ID of the action.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/Action"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/outOfBandAuthPlugins/{id}/actions/{actionId}/invokeAction": {
			"post": {
				"tags": [
					"/oauth/outOfBandAuthPlugins"
				],
				"summary": "Invokes an action for Out of Band authenticator plugin instance.",
				"description": "",
				"operationId": "invokeActionWithOptions",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the Out of Band authenticator plugin instance to which these actions belongs to.",
						"required": true,
						"type": "string"
					},
					{
						"name": "actionId",
						"in": "path",
						"description": "ID of the action.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Action options for action invoked.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/ActionOptions"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Action invoked on Out of Band authenticator.",
						"schema": {
							"$ref": "#/definitions/ActionResult"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/keyPairs/oauthOpenIdConnect/additionalKeySets": {
			"get": {
				"tags": [
					"/keyPairs/oauthOpenIdConnect"
				],
				"summary": "Retrieve OAuth/OpenID Connect additional signing key sets.",
				"description": "",
				"operationId": "getKeySets",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AdditionalKeySets"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/keyPairs/oauthOpenIdConnect"
				],
				"summary": "Create a new OAuth/OpenID Connect additional signing key set.",
				"description": "Create a new OAuth/OpenID Connect additional signing key set.  If not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "createKeySet",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for a new signing key set.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AdditionalKeySet"
						}
					}
				],
				"responses": {
					"201": {
						"description": "OAuth/OpenID Connect key set created.",
						"schema": {
							"$ref": "#/definitions/AdditionalKeySet"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/keyPairs/oauthOpenIdConnect": {
			"get": {
				"tags": [
					"/keyPairs/oauthOpenIdConnect"
				],
				"summary": "Retrieve OAuth/OpenID Connect key settings.",
				"description": "",
				"operationId": "getOauthOidcKeysSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/OAuthOidcKeysSettings"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/keyPairs/oauthOpenIdConnect"
				],
				"summary": "Update OAuth/OpenID Connect key settings.",
				"description": "",
				"operationId": "updateOAuthOidcKeysSettings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "OAuth and OpenID Connect static key settings",
						"required": true,
						"schema": {
							"$ref": "#/definitions/OAuthOidcKeysSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OAuth/Open ID Connect key settings updated.",
						"schema": {
							"$ref": "#/definitions/OAuthOidcKeysSettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/keyPairs/oauthOpenIdConnect/additionalKeySets/{id}": {
			"get": {
				"tags": [
					"/keyPairs/oauthOpenIdConnect"
				],
				"summary": "Retrieve an OAuth/OpenID Connect additional signing key set.",
				"description": "",
				"operationId": "getKeySet",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of an OAuth/OpenID Connect additional signing key set to update.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AdditionalKeySet"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/keyPairs/oauthOpenIdConnect"
				],
				"summary": "Update an existing OAuth/OpenID Connect additional signing key set.",
				"description": "Update an existing OAuth/OpenID Connect additional signing key set.  If not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "updateKeySet",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of an OAuth/OpenID Connect additional signing key set to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for updated OAuth/OpenID Connect additional signing key set.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AdditionalKeySet"
						}
					}
				],
				"responses": {
					"200": {
						"description": "OAuth/OpenID Connect key set updated.",
						"schema": {
							"$ref": "#/definitions/AdditionalKeySet"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/keyPairs/oauthOpenIdConnect"
				],
				"summary": "Delete an existing OAuth/OpenID Connect additional signing key set.",
				"description": "",
				"operationId": "deleteKeySet",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of an additional key set to be deleted.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "OAuth/OpenID Connect key set deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/resourceOwnerCredentialsMappings/{id}": {
			"get": {
				"tags": [
					"/oauth/resourceOwnerCredentialsMappings"
				],
				"summary": "Find the Resource Owner Credentials mapping by the ID.",
				"description": "",
				"operationId": "getResourceOwnerCredentialsMapping",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the Resource Owner Credentials mapping.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ResourceOwnerCredentialsMapping"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/oauth/resourceOwnerCredentialsMappings"
				],
				"summary": "Update a Resource Owner Credentials mapping.",
				"description": "",
				"operationId": "updateResourceOwnerCredentialsMapping",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the Resource Owner Credentials mapping to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for Resource Owner Credentials mapping.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ResourceOwnerCredentialsMapping"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "Resource owner credentials mapping updated.",
						"schema": {
							"$ref": "#/definitions/ResourceOwnerCredentialsMapping"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/oauth/resourceOwnerCredentialsMappings"
				],
				"summary": "Delete a Resource Owner Credentials mapping.",
				"description": "",
				"operationId": "deleteResourceOwnerCredentialsMapping",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the Resource Owner Credentials mapping.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Resource owner credentials mapping deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/resourceOwnerCredentialsMappings": {
			"get": {
				"tags": [
					"/oauth/resourceOwnerCredentialsMappings"
				],
				"summary": "Get the list of Resource Owner Credentials Grant Mapping.",
				"description": "",
				"operationId": "getResourceOwnerCredentialsMappings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ResourceOwnerCredentialsMappings"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/oauth/resourceOwnerCredentialsMappings"
				],
				"summary": "Create a new Resource Owner Credentials mapping.",
				"description": "Create a new Resource Owner Credentials mapping. If a Resource Owner Credentials mapping can't be created, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "createResourceOwnerCredentialsMapping",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for Resource Owner Credentials mapping.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ResourceOwnerCredentialsMapping"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"201": {
						"description": "Resource owner credentials mapping created.",
						"schema": {
							"$ref": "#/definitions/ResourceOwnerCredentialsMapping"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/openIdConnect/policies/{id}": {
			"get": {
				"tags": [
					"/oauth/openIdConnect"
				],
				"summary": "Find OpenID Connect Policy by ID.",
				"description": "Get an OpenID Connect Policy with the specified ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getPolicy",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the OpenID Connect Policy to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/OpenIdConnectPolicy"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/oauth/openIdConnect"
				],
				"summary": "Update an OpenID Connect Policy.",
				"description": "Update an OpenID Connect Policy with the matching ID. If the policy is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected. Note: A 404 status code is returned for nonexistent IDs.",
				"operationId": "updatePolicy",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the OpenID Connect Policy to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for updated policy.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/OpenIdConnectPolicy"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "Policy updated.",
						"schema": {
							"$ref": "#/definitions/OpenIdConnectPolicy"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/oauth/openIdConnect"
				],
				"summary": "Delete an OpenID Connect Policy.",
				"description": "Delete an OpenID Connect Policy with the specified ID. A 404 status code is returned for nonexistent IDs. Note: If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
				"operationId": "deletePolicy",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of OpenID Connect Policy to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Policy deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/openIdConnect/policies": {
			"get": {
				"tags": [
					"/oauth/openIdConnect"
				],
				"summary": "Get list of OpenID Connect Policies.",
				"description": "",
				"operationId": "getPolicies",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/OpenIdConnectPolicies"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/oauth/openIdConnect"
				],
				"summary": "Create a new OpenID Connect Policy.",
				"description": "Create a new OpenID Connect Policy. If the OpenID Connect policy is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "createPolicy",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for new policy.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/OpenIdConnectPolicy"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"201": {
						"description": "Policy created.",
						"schema": {
							"$ref": "#/definitions/OpenIdConnectPolicy"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/openIdConnect/settings": {
			"get": {
				"tags": [
					"/oauth/openIdConnect"
				],
				"summary": "Get the OpenID Connect Settings.",
				"description": "",
				"operationId": "getSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/OpenIdConnectSettings"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/oauth/openIdConnect"
				],
				"summary": "Set the OpenID Connect Settings.",
				"description": "",
				"operationId": "updateSettings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "OpenID Connect Settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/OpenIdConnectSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Settings updated.",
						"schema": {
							"$ref": "#/definitions/OpenIdConnectSettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/passwordCredentialValidators/{id}": {
			"get": {
				"tags": [
					"/passwordCredentialValidators"
				],
				"summary": "Find a password credential validator by ID.",
				"description": "Get the configured password credential validator instance with the specified ID. A 404 status code is returned for a nonexistent ID.",
				"operationId": "getPasswordCredentialValidator",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of password credential validator instance to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/PasswordCredentialValidator"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/passwordCredentialValidators"
				],
				"summary": "Update a password credential validator instance.",
				"description": "Update a password credential validator instance. If the password credential validator is not properly configured, a 422 status code is returned along with a list of validation errors that need to be corrected.",
				"operationId": "updatePasswordCredentialValidator",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the password credential validator instance",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for the updated password credential validator instance.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PasswordCredentialValidator"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Password credential validator updated.",
						"schema": {
							"$ref": "#/definitions/PasswordCredentialValidator"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/passwordCredentialValidators"
				],
				"summary": "Delete a password credential validator instance.",
				"description": "Delete a password credential validator instance with the specified ID. A 404 status code is returned for nonexistent IDs. Note: Only validators not in use can be deleted. If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the errors.",
				"operationId": "deletePasswordCredentialValidator",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the password credential validator to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Password credential validator deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Resource is in use and cannot be deleted.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/passwordCredentialValidators/descriptors": {
			"get": {
				"tags": [
					"/passwordCredentialValidators"
				],
				"summary": "Get a list of available password credential validator descriptors.",
				"description": "",
				"operationId": "getPasswordCredentialValidatorDescriptors",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/PasswordCredentialValidatorDescriptors"
						}
					}
				}
			}
		},
		"/passwordCredentialValidators/descriptors/{id}": {
			"get": {
				"tags": [
					"/passwordCredentialValidators"
				],
				"summary": "Get the description of a password credential validator by ID.",
				"description": "Get the description of a password credential validator by ID. A 404 status code is returned for a nonexistent ID.",
				"operationId": "getPasswordCredentialValidatorDescriptor",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the password credential validator descriptor to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/PasswordCredentialValidatorDescriptor"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/passwordCredentialValidators": {
			"get": {
				"tags": [
					"/passwordCredentialValidators"
				],
				"summary": "Get the list of available password credential validators",
				"description": "",
				"operationId": "getPasswordCredentialValidators",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/PasswordCredentialValidators"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/passwordCredentialValidators"
				],
				"summary": "Create a new password credential validator instance",
				"description": "Create a new password credential validator instance. If the password credential validator is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "createPasswordCredentialValidator",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for the new password credential validator instance.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PasswordCredentialValidator"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Password credential validator created.",
						"schema": {
							"$ref": "#/definitions/PasswordCredentialValidator"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/pingOneConnections/{id}": {
			"get": {
				"tags": [
					"/pingOneConnections"
				],
				"summary": "Get a PingOne connection with the specified ID.",
				"description": "",
				"operationId": "getPingOneConnection",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the connection to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/PingOneConnection"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/pingOneConnections"
				],
				"summary": "Update a PingOne connection.",
				"description": "",
				"operationId": "updatePingOneConnection",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the PingOne connection to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for the updated connection.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PingOneConnection"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "PingOne connection updated.",
						"schema": {
							"$ref": "#/definitions/PingOneConnection"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/pingOneConnections"
				],
				"summary": "Delete a PingOne connection.",
				"description": "",
				"operationId": "deletePingOneConnection",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the PingOne connection to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "PingOne connection deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/pingOneConnections/{id}/environments": {
			"get": {
				"tags": [
					"/pingOneConnections"
				],
				"summary": "Get the list of environments that the PingOne connection has access to.",
				"description": "",
				"operationId": "getPingOneConnectionEnvironments",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the PingOne connection.",
						"required": true,
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "Page number to retrieve.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "numberPerPage",
						"in": "query",
						"description": "Number of environments per page.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter criteria limits the environments that are returned to only those that match it. The filter criteria is compared to the environment name and ID fields. The comparison is a case-insensitive partial match. No additional pattern based matching is supported.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/PingOneEnvironments"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"500": {
						"description": "Error connecting to PingOne"
					}
				}
			}
		},
		"/pingOneConnections/{id}/credentialStatus": {
			"get": {
				"tags": [
					"/pingOneConnections"
				],
				"summary": "Get the status of the credential associated with the PingOne connection",
				"description": "",
				"operationId": "getCredentialStatus",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the PingOne connection.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/PingOneCredentialStatus"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/pingOneConnections/{id}/usage": {
			"get": {
				"tags": [
					"/pingOneConnections"
				],
				"summary": "Get the list of resources that reference this PingOne connection.",
				"description": "",
				"operationId": "getPingOneConnectionUsages",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the PingOne connection.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ResourceUsages"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/pingOneConnections": {
			"get": {
				"tags": [
					"/pingOneConnections"
				],
				"summary": "Get the list of all PingOne connections.",
				"description": "",
				"operationId": "getPingOneConnections",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/PingOneConnections"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/pingOneConnections"
				],
				"summary": "Create a new PingOne connection.",
				"description": "",
				"operationId": "createPingOneConnection",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for the new PingOne connection.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PingOneConnection"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"201": {
						"description": "PingOne connection created.",
						"schema": {
							"$ref": "#/definitions/PingOneConnection"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/pingOneConnections/{id}/serviceAssociations": {
			"get": {
				"tags": [
					"/pingOneConnections"
				],
				"summary": "Get information about components using this connection to access PingOne services.",
				"description": "",
				"operationId": "getPingOneConnectionAssociations",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the PingOne connection.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ServiceAssociations"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/pingOneForEnterprise/disconnect": {
			"post": {
				"tags": [
					"/pingOneForEnterprise"
				],
				"summary": "Disconnect from PingOne for Enterprise",
				"description": "",
				"operationId": "disconnect",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Disconnected from PingOne for Enterprise",
						"schema": {
							"$ref": "#/definitions/PingOneForEnterpriseSettings"
						}
					},
					"403": {
						"description": "PingFederate is not connected to PingOne for Enterprise. Operation not available."
					},
					"422": {
						"description": "Unable to disconnect from PingOne for Enterprise."
					}
				}
			}
		},
		"/pingOneForEnterprise/keyPairs/rotate": {
			"post": {
				"tags": [
					"/pingOneForEnterprise"
				],
				"summary": "Rotate the authentication key",
				"description": "",
				"operationId": "rotateKeys",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/P14EKeysView"
						}
					},
					"403": {
						"description": "PingFederate is not connected to PingOne for Enterprise. Operation not available."
					}
				}
			}
		},
		"/pingOneForEnterprise": {
			"get": {
				"tags": [
					"/pingOneForEnterprise"
				],
				"summary": "Get the PingOne for Enterprise settings",
				"description": "",
				"operationId": "getPingOneForEnterpriseSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/PingOneForEnterpriseSettings"
						}
					},
					"403": {
						"description": "PingFederate is not connected to PingOne for Enterprise. Operation not available."
					}
				}
			},
			"put": {
				"tags": [
					"/pingOneForEnterprise"
				],
				"summary": "Update the PingOne for Enterprise settings.",
				"description": "",
				"operationId": "updatePingOneSettings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "PingOne for Enterprise connection settings",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PingOneForEnterpriseSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/PingOneForEnterpriseSettings"
						}
					},
					"403": {
						"description": "PingFederate is not connected to PingOne for Enterprise. Operation not available."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/pingOneForEnterprise/keyPairs": {
			"get": {
				"tags": [
					"/pingOneForEnterprise"
				],
				"summary": "Get the PingOne for Enterprise key pair settings",
				"description": "",
				"operationId": "getKeyPairs",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/P14EKeysView"
						}
					},
					"403": {
						"description": "PingFederate is not connected to PingOne for Enterprise. Operation not available."
					}
				}
			}
		},
		"/pingOneForEnterprise/updateIdentityRepository": {
			"post": {
				"tags": [
					"/pingOneForEnterprise"
				],
				"summary": "Update the PingOne Identity Repository",
				"description": "Update the identity repository to keep your PingFederate and PingOne for Enterprise settings synchronized.<br>CAUTION: Updating the identity repository overwrites the existing PingOne for Enterprise identity repository, causing users to be directed to the current PingFederate instance for SSO.",
				"operationId": "updatePingOneForEnterpriseIdentityRepository",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/PingOneForEnterpriseSettings"
						}
					},
					"403": {
						"description": "PingFederate is not connected to PingOne for Enterprise. Operation not available."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/protocolMetadata/signingSettings": {
			"get": {
				"tags": [
					"/protocolMetadata"
				],
				"summary": "Get the certificate ID and algorithm used for metadata signing.",
				"description": "",
				"operationId": "getSigningSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/MetadataSigningSettings"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/protocolMetadata"
				],
				"summary": "Update the certificate and algorithm for metadata signing.",
				"description": "",
				"operationId": "updateSigningSettings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"required": false,
						"schema": {
							"$ref": "#/definitions/MetadataSigningSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Metadata signing settings updated.",
						"schema": {
							"$ref": "#/definitions/MetadataSigningSettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/protocolMetadata/lifetimeSettings": {
			"get": {
				"tags": [
					"/protocolMetadata"
				],
				"summary": "Get metadata cache duration and reload delay for automated reloading.",
				"description": "",
				"operationId": "getLifetimeSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/MetadataLifetimeSettings"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/protocolMetadata"
				],
				"summary": "Update metadata cache duration and reload delay for automated reloading.",
				"description": "",
				"operationId": "updateLifetimeSettings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Metadata lifetime settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/MetadataLifetimeSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Metadata lifetime settings updated.",
						"schema": {
							"$ref": "#/definitions/MetadataLifetimeSettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/redirectValidation": {
			"get": {
				"tags": [
					"/redirectValidation"
				],
				"summary": "Retrieve redirect validation settings.",
				"description": "",
				"operationId": "getRedirectValidationSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/RedirectValidationSettings"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/redirectValidation"
				],
				"summary": "Update redirect validation settings.",
				"description": "<b>Note: </b>Ensure IdP Discovery and/or WS-Federation is enabled for redirect validation to function for IdP Discovery and/or wreply for SLO respectively.",
				"operationId": "updateRedirectValidationSettings",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Redirect validation settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/RedirectValidationSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Redirect validation settings updated.",
						"schema": {
							"$ref": "#/definitions/RedirectValidationSettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/keyPairs/keyAlgorithms": {
			"get": {
				"tags": [
					"/keyPairs"
				],
				"summary": "Get list of the key algorithms supported for key pair generation.",
				"description": "",
				"operationId": "getKeyAlgorithms",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/KeyAlgorithms"
						}
					}
				}
			}
		},
		"/secretManagers/{id}/actions": {
			"get": {
				"tags": [
					"/secretManagers"
				],
				"summary": "Get a list of actions for a secret manager plugin instance.",
				"description": "",
				"operationId": "getActions",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of a secret manager plugin instance.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/Actions"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/secretManagers/{id}/actions/{actionId}": {
			"get": {
				"tags": [
					"/secretManagers"
				],
				"summary": "Get a secret manager plugin instance's action by ID.",
				"description": "",
				"operationId": "getAction",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of a secret manager plugin instance.",
						"required": true,
						"type": "string"
					},
					{
						"name": "actionId",
						"in": "path",
						"description": "ID of the action.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/Action"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/secretManagers/{id}": {
			"get": {
				"tags": [
					"/secretManagers"
				],
				"summary": "Get a specific secret manager plugin instance.",
				"description": "",
				"operationId": "getSecretManager",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of a secret manager plugin instance.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/SecretManager"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/secretManagers"
				],
				"summary": "Update a secret manager plugin instance.",
				"description": "",
				"operationId": "updateSecretManager",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of a secret manager plugin instance.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for a secret manager plugin instance.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SecretManager"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Secret Manager plugin updated.",
						"schema": {
							"$ref": "#/definitions/SecretManager"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/secretManagers"
				],
				"summary": "Delete a secret manager plugin instance.",
				"description": "",
				"operationId": "deleteSecretManager",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of a secret manager plugin instance.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Secret Manager plugin deleted."
					},
					"403": {
						"description": "The operation is not permitted, based on the current configuration of the server."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/secretManagers/descriptors/{id}": {
			"get": {
				"tags": [
					"/secretManagers"
				],
				"summary": "Get a secret manager plugin descriptor.",
				"description": "",
				"operationId": "getSecretManagerPluginDescriptor",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of secret manager plugin descriptor.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/SecretManagerDescriptor"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/secretManagers": {
			"get": {
				"tags": [
					"/secretManagers"
				],
				"summary": "Get a list of secret manager plugin instances.",
				"description": "",
				"operationId": "getSecretManagers",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/SecretManagers"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/secretManagers"
				],
				"summary": "Create a secret manager plugin instance.",
				"description": "",
				"operationId": "createSecretManager",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for a secret manager plugin instance.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SecretManager"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Secret Manager plugin created.",
						"schema": {
							"$ref": "#/definitions/SecretManager"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/secretManagers/descriptors": {
			"get": {
				"tags": [
					"/secretManagers"
				],
				"summary": "Get a list of available secret manager plugin descriptors.",
				"description": "",
				"operationId": "getSecretManagerPluginDescriptors",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/SecretManagerDescriptors"
						}
					}
				}
			}
		},
		"/secretManagers/{id}/actions/{actionId}/invokeAction": {
			"post": {
				"tags": [
					"/secretManagers"
				],
				"summary": "Invokes an action for secret manager plugin instance.",
				"description": "Invokes an action for secret manager plugin instance. A 404 status code is returned for nonexistent IDs. If the action produces a download file, the file will be returned directly in the response. Otherwise an ActionResult will be returned.",
				"operationId": "invokeActionWithOptions",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of a secret manager plugin instance.",
						"required": true,
						"type": "string"
					},
					{
						"name": "actionId",
						"in": "path",
						"description": "ID of the action.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Action options for action invoked.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/ActionOptions"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Secret Manager plugin action invoked.",
						"schema": {
							"$ref": "#/definitions/ActionResult"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/serverSettings/wsTrustStsSettings/issuerCertificates": {
			"get": {
				"tags": [
					"/serverSettings"
				],
				"summary": "Get the list of certificates for WS-Trust STS Settings.",
				"description": "",
				"operationId": "getCerts",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/IssuerCerts"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/serverSettings"
				],
				"summary": "Import a new certificate.",
				"description": "",
				"operationId": "importCertificate",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "File data to import.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/X509File"
						}
					}
				],
				"responses": {
					"201": {
						"description": "New certificate has been imported to WS-Trust STS Settings",
						"schema": {
							"$ref": "#/definitions/IssuerCert"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResponse"
						}
					}
				}
			}
		},
		"/serverSettings/notifications": {
			"get": {
				"tags": [
					"/serverSettings"
				],
				"summary": "Gets the notification settings",
				"description": "",
				"operationId": "getNotificationSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/NotificationSettings"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/serverSettings"
				],
				"summary": "Update the notification settings.",
				"description": "",
				"operationId": "updateNotificationSettings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Notification settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/NotificationSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Notifications updated.",
						"schema": {
							"$ref": "#/definitions/NotificationSettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/serverSettings/wsTrustStsSettings/issuerCertificates/{id}": {
			"get": {
				"tags": [
					"/serverSettings"
				],
				"summary": "Retrieve details of a certificate.",
				"description": "",
				"operationId": "getCert",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the certificate to retrieve.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/IssuerCert"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResponse"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/serverSettings"
				],
				"summary": "Delete a certificate from WS-Trust STS Settings.",
				"description": "If the request is successful, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
				"operationId": "deleteCertificate",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the certificate to delete",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Certificate has been deleted from WS-Trust STS Settings"
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Resource is in use and cannot be deleted.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/serverSettings/systemKeys": {
			"get": {
				"tags": [
					"/serverSettings"
				],
				"summary": "Get the system keys.",
				"description": "For each key, only encryptedKeyData and not keyData will be returned",
				"operationId": "getSystemKeys",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/SystemKeys"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/serverSettings"
				],
				"summary": "Update the system keys.",
				"description": "For each key, either encryptedKeyData or keyData must be provided.",
				"operationId": "updateSystemKeys",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "System keys.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SystemKeys"
						}
					}
				],
				"responses": {
					"200": {
						"description": "System keys updated.",
						"schema": {
							"$ref": "#/definitions/SystemKeys"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/serverSettings/captchaSettings": {
			"get": {
				"tags": [
					"/serverSettings"
				],
				"summary": "(Deprecated) Gets the CAPTCHA settings.",
				"description": "",
				"operationId": "getCaptchaSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"deprecated": true,
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/CaptchaSettings"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/serverSettings"
				],
				"summary": "(Deprecated) Update the CAPTCHA settings.",
				"description": "",
				"operationId": "updateCaptchaSettings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "CAPTCHA settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CaptchaSettings"
						}
					}
				],
				"deprecated": true,
				"responses": {
					"200": {
						"description": "Captcha settings updated.",
						"schema": {
							"$ref": "#/definitions/CaptchaSettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/serverSettings/logSettings": {
			"get": {
				"tags": [
					"/serverSettings"
				],
				"summary": "Gets the log settings.",
				"description": "",
				"operationId": "getLogSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/LogSettings"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/serverSettings"
				],
				"summary": "Update log settings.",
				"description": "",
				"operationId": "updateLogSettings",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for log settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/LogSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Log settings have been updated.",
						"schema": {
							"$ref": "#/definitions/LogSettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/serverSettings/systemKeys/rotate": {
			"post": {
				"tags": [
					"/serverSettings"
				],
				"summary": "Rotate the system keys.",
				"description": "Upon rotation, previous key will be replaced by the current key, the current key will be replaced by the pending key, while the newly generated key replaces the pending key. Periodic rotation can ensure optimal security of your environment.",
				"operationId": "rotateSystemKeys",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/SystemKeys"
						}
					},
					"201": {
						"description": "System Keys rotated.",
						"schema": {
							"$ref": "#/definitions/SystemKeys"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/serverSettings": {
			"get": {
				"tags": [
					"/serverSettings"
				],
				"summary": "Gets the server settings",
				"description": "",
				"operationId": "getServerSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ServerSettings"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/serverSettings"
				],
				"summary": "Update the server settings.",
				"description": "",
				"operationId": "updateServerSettings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for server settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ServerSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Server Settings updated.",
						"schema": {
							"$ref": "#/definitions/ServerSettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/serverSettings/generalSettings": {
			"get": {
				"tags": [
					"/serverSettings"
				],
				"summary": "Gets the general settings.",
				"description": "",
				"operationId": "getGeneralSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/GeneralSettings"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/serverSettings"
				],
				"summary": "Update general settings.",
				"description": "",
				"operationId": "updateGeneralSettings",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for general settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/GeneralSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "General settings have been updated.",
						"schema": {
							"$ref": "#/definitions/GeneralSettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/serverSettings/emailServer": {
			"get": {
				"tags": [
					"/serverSettings"
				],
				"summary": "(Deprecated) Gets the email server settings",
				"description": "",
				"operationId": "getEmailServerSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"deprecated": true,
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/EmailServerSettings"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/serverSettings"
				],
				"summary": "(Deprecated) Update the email server settings",
				"description": "(Deprecated) If the validationEmail is provided, an email will be sent to the validationEmail using the provided email server settings.  The settings will be saved if the test email is successfully sent.<br>",
				"operationId": "updateEmailServerSettings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for email server settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/EmailServerSettings"
						}
					},
					{
						"name": "validationEmail",
						"in": "query",
						"description": "The email address used to validate the email server settings.",
						"required": false,
						"type": "string"
					},
					{
						"name": "validateOnly",
						"in": "query",
						"description": "Only validation will be performed.  Email server settings will not be saved.",
						"required": false,
						"type": "boolean"
					}
				],
				"deprecated": true,
				"responses": {
					"200": {
						"description": "Email Server updated.",
						"schema": {
							"$ref": "#/definitions/EmailServerSettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/serverSettings/outboundProvisioning": {
			"get": {
				"tags": [
					"/serverSettings"
				],
				"summary": "Get database used for outbound provisioning",
				"description": "Get the settings for database used internally to facilitate outbound provisioning to service providers.",
				"operationId": "getOutBoundProvisioningSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/OutboundProvisionDatabase"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/serverSettings"
				],
				"summary": "Update database used for outbound provisioning",
				"description": "Update the settings for database used internally to facilitate outbound provisioning to service providers.",
				"operationId": "updateOutBoundProvisioningSettings",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "The Outbound Provision Database settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/OutboundProvisionDatabase"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Database updated for outbound provisioning.",
						"schema": {
							"$ref": "#/definitions/OutboundProvisionDatabase"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/serverSettings/wsTrustStsSettings": {
			"get": {
				"tags": [
					"/serverSettings"
				],
				"summary": "Get the current WS-Trust STS Settings.",
				"description": "",
				"operationId": "getWsTrustStsSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/WsTrustStsSettings"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/serverSettings"
				],
				"summary": "Update WS-Trust STS Settings.",
				"description": "",
				"operationId": "updateWsTrustStsSettings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for WS-Trust STS Settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/WsTrustStsSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Server Settings updated.",
						"schema": {
							"$ref": "#/definitions/WsTrustStsSettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/serviceAuthentication": {
			"get": {
				"tags": [
					"/serviceAuthentication"
				],
				"summary": "Get the service authentication settings.",
				"description": "",
				"operationId": "getServiceAuthentication",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ServiceAuthentication"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/serviceAuthentication"
				],
				"summary": "Update the service authentication settings.",
				"description": "Manage availability and credentials to services responsible for federation protocol handling, monitoring and administration.",
				"operationId": "updateServiceAuthentication",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Service authentication settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ServiceAuthentication"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Service authentication settings updated.",
						"schema": {
							"$ref": "#/definitions/ServiceAuthentication"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/keyPairs/signing/{id}/rotationSettings": {
			"get": {
				"tags": [
					"/keyPairs/signing"
				],
				"summary": "Retrieve details of rotation settings for a key pair.",
				"description": "",
				"operationId": "getRotationSettings",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the key pair to retrieve its rotation settings.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/KeyPairRotationSettings"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/keyPairs/signing"
				],
				"summary": "Add rotation settings to a key pair",
				"description": "",
				"operationId": "updateRotationSettings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the key pair.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "The key rotation settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/KeyPairRotationSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Key Pair updated.",
						"schema": {
							"$ref": "#/definitions/KeyPairRotationSettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/keyPairs/signing"
				],
				"summary": "Delete rotation settings for a signing key pair.",
				"description": "If the request is successful, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
				"operationId": "deleteKeyPairRotationSettings",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the key pair's rotation settings to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Rotation Settings deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/keyPairs/signing/import": {
			"post": {
				"tags": [
					"/keyPairs/signing"
				],
				"summary": "Import a new key pair.",
				"description": "",
				"operationId": "importKeyPair",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "File to import.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/KeyPairFile"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Key Pair imported.",
						"schema": {
							"$ref": "#/definitions/KeyPairView"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"403": {
						"description": "The operation is not permitted, based on the current configuration of the server."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/keyPairs/signing/{id}": {
			"get": {
				"tags": [
					"/keyPairs/signing"
				],
				"summary": "Retrieve details of a key pair.",
				"description": "",
				"operationId": "getKeyPair",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the key pair to retrieve.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/KeyPairView"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/keyPairs/signing"
				],
				"summary": "Delete a key pair.",
				"description": "If the request is successful, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
				"operationId": "deleteKeyPair",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the key pair to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Key Pair deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Resource is in use and cannot be deleted."
					}
				}
			}
		},
		"/keyPairs/signing/{id}/csr": {
			"get": {
				"tags": [
					"/keyPairs/signing"
				],
				"summary": "Generate a new certificate signing request (CSR) for this key pair.",
				"description": "For a successful request, the PEM-encoded CSR file is directly returned as text and the response content type is application/pkcs10. If an error occurs, an ApiResult is returned in JSON format, and the content type is application/json.",
				"operationId": "exportCsr",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the key pair.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"type": "string"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/keyPairs/signing"
				],
				"summary": "Import a CSR response for this key pair.",
				"description": "",
				"operationId": "importCsrResponse",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the key pair.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "The CSR response.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CSRResponse"
						}
					}
				],
				"responses": {
					"200": {
						"description": "CSR Response imported.",
						"schema": {
							"$ref": "#/definitions/KeyPairView"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/keyPairs/signing": {
			"get": {
				"tags": [
					"/keyPairs/signing"
				],
				"summary": "Get list of key pairs.",
				"description": "",
				"operationId": "getKeyPairs",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/KeyPairViews"
						}
					}
				}
			}
		},
		"/keyPairs/signing/{id}/pkcs12": {
			"post": {
				"tags": [
					"/keyPairs/signing"
				],
				"summary": "Download the key pair in PKCS12 format.",
				"description": "For a successful request, the PKCS12 file is directly returned in binary format and the response content type is application/x-pkcs12. If an error occurs, an ApiResult is returned in JSON format and the content type is application/json. Due to the sensitivity of the password parameter, the method for this operation is POST rather than GET.",
				"operationId": "exportPKCS12File",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the key pair.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Parameters for the export request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/KeyPairExportSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Key Pair downloaded.",
						"schema": {
							"type": "string"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"403": {
						"description": "The operation is not permitted, based on the current configuration of the server."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/keyPairs/signing/generate": {
			"post": {
				"tags": [
					"/keyPairs/signing"
				],
				"summary": "Generate a new key pair.",
				"description": "",
				"operationId": "createKeyPair",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Settings for the new key pair.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/NewKeyPairSettings"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Key Pair created.",
						"schema": {
							"$ref": "#/definitions/KeyPairView"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/keyPairs/signing/{id}/pem": {
			"post": {
				"tags": [
					"/keyPairs/signing"
				],
				"summary": "Download the key pair in PEM format.",
				"description": "For a successful request, the PEM file is directly returned in PEM format and the response content type is application/x-pem-file. In the exported PEM file, the private key is protected with PBES2 encryption and AES. If an error occurs, an ApiResult is returned in JSON format and the content type is application/json. Due to the sensitivity of the password parameter, the method for this operation is POST rather than GET.",
				"operationId": "exportPEMFile",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the key pair.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Parameters for the export request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/KeyPairExportSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Key Pair downloaded.",
						"schema": {
							"type": "string"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"403": {
						"description": "The operation is not permitted, based on the current configuration of the server."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/keyPairs/signing/{id}/certificate": {
			"get": {
				"tags": [
					"/keyPairs/signing"
				],
				"summary": "Download the certificate from a given key pair.",
				"description": "For a successful request, the PEM-encoded certificate file is directly returned as text and the response content type is application/x-x509-ca-cert. If an error occurs, an ApiResult is returned in JSON format and the content type is application/json.",
				"operationId": "exportCertificateFile",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the key pair.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"type": "string"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/sp/adapters/{id}/actions": {
			"get": {
				"tags": [
					"/sp/adapters"
				],
				"summary": "List the actions for an SP adapter instance.",
				"description": "List the actions for an SP adapter instance. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getActions",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the SP adapter instance to which this action belongs to.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/Actions"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/sp/adapters/{id}/actions/{actionId}": {
			"get": {
				"tags": [
					"/sp/adapters"
				],
				"summary": "Find an SP adapter instance's action by ID.",
				"description": "Find an SP adapter instance's action by ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getAction",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the SP adapter instance to which this action belongs to.",
						"required": true,
						"type": "string"
					},
					{
						"name": "actionId",
						"in": "path",
						"description": "ID of the action.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/Action"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/sp/adapters/descriptors": {
			"get": {
				"tags": [
					"/sp/adapters"
				],
				"summary": "Get the list of available SP adapter descriptors.",
				"description": "",
				"operationId": "getSpAdapterDescriptors",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/SpAdapterDescriptors"
						}
					}
				}
			}
		},
		"/sp/adapters/descriptors/{id}": {
			"get": {
				"tags": [
					"/sp/adapters"
				],
				"summary": "Get the description of an SP adapter plugin by ID.",
				"description": "Get the description of an SP adapter plugin by ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getSpAdapterDescriptorsById",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of SP adapter descriptor to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/SpAdapterDescriptor"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/sp/adapters/{id}": {
			"get": {
				"tags": [
					"/sp/adapters"
				],
				"summary": "Find an SP adapter instance by ID.",
				"description": "Get the configured SP adapter instance with the specified ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getSpAdapter",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of SP adapter instance.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/SpAdapter"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/sp/adapters"
				],
				"summary": "Update an SP adapter instance.",
				"description": "Update an SP adapter instance.If the SP adapter is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "updateSpAdapter",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of SP adapter instance.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for the SP adapter instance.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SpAdapter"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Adapter updated.",
						"schema": {
							"$ref": "#/definitions/SpAdapter"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/sp/adapters"
				],
				"summary": "Delete an SP adapter instance.",
				"description": "Delete an SP adapter instance with the specified ID. A 404 status code is returned for nonexistent IDs. Note: Only adapters not in use can be deleted. If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
				"operationId": "deleteSpAdapter",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of SP adapter instance.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Adapter deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Resource is in use and cannot be deleted.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/sp/adapters/urlMappings": {
			"get": {
				"tags": [
					"/sp/adapters"
				],
				"summary": "(Deprecated) List the mappings between URLs and adapter instances.",
				"description": "",
				"operationId": "getUrlMappings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"deprecated": true,
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/SpAdapterUrlMappings"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/sp/adapters"
				],
				"summary": "(Deprecated) Update the mappings between URLs and adapters instances.",
				"description": "",
				"operationId": "updateUrlMappings",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "The SP adapter URL mappings to update.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SpAdapterUrlMappings"
						}
					}
				],
				"deprecated": true,
				"responses": {
					"200": {
						"description": "Mapping updated.",
						"schema": {
							"$ref": "#/definitions/SpAdapterUrlMappings"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/sp/adapters": {
			"get": {
				"tags": [
					"/sp/adapters"
				],
				"summary": "Get the list of configured SP adapter instances.",
				"description": "",
				"operationId": "getSpAdapters",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"description": "Page number to retrieve.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "numberPerPage",
						"in": "query",
						"description": "Number of adapters per page.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter criteria limits the SP adapters that are returned to only those that match it. The filter criteria is compared to the SP adapter instance name and ID fields. The comparison is a case-insensitive partial match. No additional pattern based matching is supported.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/SpAdapters"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/sp/adapters"
				],
				"summary": "Create a new SP adapter instance.",
				"description": "Create a new SP adapter instance. If the SP adapter is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "createSpAdapter",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for the SP adapter instance.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SpAdapter"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Adapter created.",
						"schema": {
							"$ref": "#/definitions/SpAdapter"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/sp/adapters/{id}/actions/{actionId}/invokeAction": {
			"post": {
				"tags": [
					"/sp/adapters"
				],
				"summary": "Invokes an action for an SP adapter instance.",
				"description": "Invokes an action for an SP adapter instance. A 404 status code is returned for nonexistent IDs. If the action produces a download file, the file will be returned directly in the response. Otherwise an ActionResult will be returned.",
				"operationId": "invokeActionWithOptions",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the SP adapter instance to which this action belongs to.",
						"required": true,
						"type": "string"
					},
					{
						"name": "actionId",
						"in": "path",
						"description": "ID of the action.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Action options for action invoked.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/ActionOptions"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Action invoked on adapter.",
						"schema": {
							"$ref": "#/definitions/ActionResult"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/idp/spConnections/{id}": {
			"get": {
				"tags": [
					"/idp/spConnections"
				],
				"summary": "Find SP connection by ID.",
				"description": "Get an SP connection with the specified ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getConnection",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the SP Connection to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/SpConnection"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/idp/spConnections"
				],
				"summary": "Update an SP connection.",
				"description": "Update an SP connection with the matching ID. If the SP connection is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected. Note: A 404 status code is returned for nonexistent IDs.",
				"operationId": "updateConnection",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of SP Connection to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for updated connection.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SpConnection"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "Connection updated.",
						"schema": {
							"$ref": "#/definitions/SpConnection"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/idp/spConnections"
				],
				"summary": "Delete an SP connection.",
				"description": "Delete an SP connection with the specified ID. A 404 status code is returned for nonexistent IDs. Note: Only inactive connections can be deleted. If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
				"operationId": "deleteConnection",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of SP Connection to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Connection deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Resource is in use and cannot be deleted.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/idp/spConnections": {
			"get": {
				"tags": [
					"/idp/spConnections"
				],
				"summary": "Get list of SP connections.",
				"description": "Get a list of all the WS-Fed, WS-Trust, SAML1.0, SAML1.1 and SAML 2.0 SP connections.",
				"operationId": "getConnections",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "entityId",
						"in": "query",
						"description": "Entity ID of the connection to fetch. (case-sensitive)",
						"required": false,
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "Page number to retrieve.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "numberPerPage",
						"in": "query",
						"description": "Number of connections per page.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "filter",
						"in": "query",
						"description": "Filter criteria limits the SP connections that are returned to only those that match it. The filter criteria is compared to the SP connection name and partner entity ID fields. The comparison is a case-insensitive partial match. No additional pattern based matching is supported.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/SpConnections"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/idp/spConnections"
				],
				"summary": "Create a new SP connection.",
				"description": "Create a new SP connection. If the SP connection is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "createConnection",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for new connection.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SpConnection"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"201": {
						"description": "Connection created.",
						"schema": {
							"$ref": "#/definitions/SpConnection"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/idp/spConnections/{id}/credentials/certs": {
			"get": {
				"tags": [
					"/idp/spConnections"
				],
				"summary": "Get the SP connection's certificates.",
				"description": "",
				"operationId": "getConnectionCerts",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the SP Connection.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ConnectionCerts"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/idp/spConnections"
				],
				"summary": "Add a new SP connection certificate.",
				"description": "If the certificate's activeVerificationCert flag is set to true, it will become the connection's primary verification certificate.",
				"operationId": "addConnectionCert",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the SP Connection to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for a verification certificate.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ConnectionCert"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Connection Certificate added.",
						"schema": {
							"$ref": "#/definitions/ConnectionCert"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/idp/spConnections"
				],
				"summary": "Update the SP connection's certificates.",
				"description": "",
				"operationId": "updateConnectionCerts",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the SP Connection to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for a verification certificates.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ConnectionCerts"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Connection updated.",
						"schema": {
							"$ref": "#/definitions/ConnectionCerts"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/idp/spConnections/{id}/credentials/decryptionKeys": {
			"get": {
				"tags": [
					"/idp/spConnections"
				],
				"summary": "Get the decryption keys of an SP connection.",
				"description": "",
				"operationId": "getDecryptionKeys",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the SP Connection to update.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/DecryptionKeys"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/idp/spConnections"
				],
				"summary": "Updating the SP connection's decryption keys.",
				"description": "",
				"operationId": "updateDecryptionKeys",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the SP Connection to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for decryption keys.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/DecryptionKeys"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Connection updated.",
						"schema": {
							"$ref": "#/definitions/DecryptionKeys"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/idp/spConnections/{id}/credentials/signingSettings": {
			"get": {
				"tags": [
					"/idp/spConnections"
				],
				"summary": "Get the SP connection's signature settings.",
				"description": "",
				"operationId": "getSigningSettings",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the SP Connection.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/SigningSettings"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/idp/spConnections"
				],
				"summary": "Update the SP connection's signature settings.",
				"description": "",
				"operationId": "updateSigningSettings",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the SP Connection to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Signature settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SigningSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Connection updated.",
						"schema": {
							"$ref": "#/definitions/SigningSettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/sp/defaultUrls": {
			"get": {
				"tags": [
					"/sp/defaultUrls"
				],
				"summary": "Gets the SP Default URLs. These are Values that affect the user's experience when executing SP-initiated SSO operations.",
				"description": "",
				"operationId": "getDefaultUrls",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/SpDefaultUrls"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/sp/defaultUrls"
				],
				"summary": "Update the SP Default URLs. Enter values that affect the user's experience when executing SP-initiated SSO operations.",
				"description": "",
				"operationId": "updateDefaultUrls",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for the IDP Default URL settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SpDefaultUrls"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Default URL updated.",
						"schema": {
							"$ref": "#/definitions/SpDefaultUrls"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/sp/targetUrlMappings": {
			"get": {
				"tags": [
					"/sp/targetUrlMappings"
				],
				"summary": "List the mappings between URLs and adapter or connection instances.",
				"description": "",
				"operationId": "getUrlMappings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/SpUrlMappings"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/sp/targetUrlMappings"
				],
				"summary": "Update the mappings between URLs and adapters or connections instances.",
				"description": "",
				"operationId": "updateUrlMappings",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "The SP adapter URL mappings to update.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SpUrlMappings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Mapping updated.",
						"schema": {
							"$ref": "#/definitions/SpUrlMappings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/keyPairs/sslClient/import": {
			"post": {
				"tags": [
					"/keyPairs/sslClient"
				],
				"summary": "Import a new key pair.",
				"description": "",
				"operationId": "importKeyPair",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "File to import.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/KeyPairFile"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Key Pair imported.",
						"schema": {
							"$ref": "#/definitions/KeyPairView"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"403": {
						"description": "The operation is not permitted, based on the current configuration of the server."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/keyPairs/sslClient/{id}": {
			"get": {
				"tags": [
					"/keyPairs/sslClient"
				],
				"summary": "Retrieve details of a key pair.",
				"description": "",
				"operationId": "getKeyPair",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the key pair to retrieve.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/KeyPairView"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/keyPairs/sslClient"
				],
				"summary": "Delete a key pair.",
				"description": "If the request is successful, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
				"operationId": "deleteKeyPair",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the key pair to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Key Pair deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Resource is in use and cannot be deleted."
					}
				}
			}
		},
		"/keyPairs/sslClient/{id}/csr": {
			"get": {
				"tags": [
					"/keyPairs/sslClient"
				],
				"summary": "Generate a new certificate signing request (CSR) for this key pair.",
				"description": "For a successful request, the PEM-encoded CSR file is directly returned as text and the response content type is application/pkcs10. If an error occurs, an ApiResult is returned in JSON format, and the content type is application/json.",
				"operationId": "exportCsr",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the key pair.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"type": "string"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/keyPairs/sslClient"
				],
				"summary": "Import a CSR response for this key pair.",
				"description": "",
				"operationId": "importCsrResponse",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the key pair.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "The CSR response.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CSRResponse"
						}
					}
				],
				"responses": {
					"200": {
						"description": "CSR Response imported.",
						"schema": {
							"$ref": "#/definitions/KeyPairView"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/keyPairs/sslClient": {
			"get": {
				"tags": [
					"/keyPairs/sslClient"
				],
				"summary": "Get list of key pairs.",
				"description": "",
				"operationId": "getKeyPairs",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/KeyPairViews"
						}
					}
				}
			}
		},
		"/keyPairs/sslClient/{id}/pkcs12": {
			"post": {
				"tags": [
					"/keyPairs/sslClient"
				],
				"summary": "Download the key pair in PKCS12 format.",
				"description": "For a successful request, the PKCS12 file is directly returned in binary format and the response content type is application/x-pkcs12. If an error occurs, an ApiResult is returned in JSON format and the content type is application/json. Due to the sensitivity of the password parameter, the method for this operation is POST rather than GET.",
				"operationId": "exportPKCS12File",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the key pair.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Parameters for the export request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/KeyPairExportSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Key Pair downloaded.",
						"schema": {
							"type": "string"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"403": {
						"description": "The operation is not permitted, based on the current configuration of the server."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/keyPairs/sslClient/generate": {
			"post": {
				"tags": [
					"/keyPairs/sslClient"
				],
				"summary": "Generate a new key pair.",
				"description": "",
				"operationId": "createKeyPair",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Settings for the new key pair.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/NewKeyPairSettings"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Key Pair created.",
						"schema": {
							"$ref": "#/definitions/KeyPairView"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/keyPairs/sslClient/{id}/pem": {
			"post": {
				"tags": [
					"/keyPairs/sslClient"
				],
				"summary": "Download the key pair in PEM format.",
				"description": "For a successful request, the PEM file is directly returned in PEM format and the response content type is application/x-pem-file. In the exported PEM file, the private key is protected with PBES2 encryption and AES. If an error occurs, an ApiResult is returned in JSON format and the content type is application/json. Due to the sensitivity of the password parameter, the method for this operation is POST rather than GET.",
				"operationId": "exportPEMFile",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the key pair.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Parameters for the export request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/KeyPairExportSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Key Pair downloaded.",
						"schema": {
							"type": "string"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"403": {
						"description": "The operation is not permitted, based on the current configuration of the server."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/keyPairs/sslClient/{id}/certificate": {
			"get": {
				"tags": [
					"/keyPairs/sslClient"
				],
				"summary": "Download the certificate from a given key pair.",
				"description": "For a successful request, the PEM-encoded certificate file is directly returned as text and the response content type is application/x-x509-ca-cert. If an error occurs, an ApiResult is returned in JSON format and the content type is application/json.",
				"operationId": "exportCertificateFile",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the key pair.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"type": "string"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/keyPairs/sslServer/settings": {
			"get": {
				"tags": [
					"/keyPairs/sslServer"
				],
				"summary": "Get the SSL Server Certificate Settings.",
				"description": "",
				"operationId": "getSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/SslServerSettings"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/keyPairs/sslServer"
				],
				"summary": "Update the SSL Server Certificate Settings.",
				"description": "",
				"operationId": "updateSettings",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for activation of SSL server certificates.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SslServerSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "SSL Certificate Settings updated.",
						"schema": {
							"$ref": "#/definitions/SslServerSettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/keyPairs/sslServer/import": {
			"post": {
				"tags": [
					"/keyPairs/sslServer"
				],
				"summary": "Import a new key pair.",
				"description": "",
				"operationId": "importKeyPair",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "File to import.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/KeyPairFile"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Key Pair imported.",
						"schema": {
							"$ref": "#/definitions/KeyPairView"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"403": {
						"description": "The operation is not permitted, based on the current configuration of the server."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/keyPairs/sslServer/{id}": {
			"get": {
				"tags": [
					"/keyPairs/sslServer"
				],
				"summary": "Retrieve details of a key pair.",
				"description": "",
				"operationId": "getKeyPair",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the key pair to retrieve.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/KeyPairView"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/keyPairs/sslServer"
				],
				"summary": "Delete a key pair.",
				"description": "If the request is successful, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
				"operationId": "deleteKeyPair",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the key pair to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Key Pair deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Resource is in use and cannot be deleted."
					}
				}
			}
		},
		"/keyPairs/sslServer/{id}/csr": {
			"get": {
				"tags": [
					"/keyPairs/sslServer"
				],
				"summary": "Generate a new certificate signing request (CSR) for this key pair.",
				"description": "For a successful request, the PEM-encoded CSR file is directly returned as text and the response content type is application/pkcs10. If an error occurs, an ApiResult is returned in JSON format, and the content type is application/json.",
				"operationId": "exportCsr",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the key pair.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"type": "string"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/keyPairs/sslServer"
				],
				"summary": "Import a CSR response for this key pair.",
				"description": "",
				"operationId": "importCsrResponse",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the key pair.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "The CSR response.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CSRResponse"
						}
					}
				],
				"responses": {
					"200": {
						"description": "CSR Response imported.",
						"schema": {
							"$ref": "#/definitions/KeyPairView"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/keyPairs/sslServer": {
			"get": {
				"tags": [
					"/keyPairs/sslServer"
				],
				"summary": "Get list of key pairs.",
				"description": "",
				"operationId": "getKeyPairs",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/KeyPairViews"
						}
					}
				}
			}
		},
		"/keyPairs/sslServer/{id}/pkcs12": {
			"post": {
				"tags": [
					"/keyPairs/sslServer"
				],
				"summary": "Download the key pair in PKCS12 format.",
				"description": "For a successful request, the PKCS12 file is directly returned in binary format and the response content type is application/x-pkcs12. If an error occurs, an ApiResult is returned in JSON format and the content type is application/json. Due to the sensitivity of the password parameter, the method for this operation is POST rather than GET.",
				"operationId": "exportPKCS12File",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the key pair.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Parameters for the export request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/KeyPairExportSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Key Pair downloaded.",
						"schema": {
							"type": "string"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"403": {
						"description": "The operation is not permitted, based on the current configuration of the server."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/keyPairs/sslServer/generate": {
			"post": {
				"tags": [
					"/keyPairs/sslServer"
				],
				"summary": "Generate a new key pair.",
				"description": "",
				"operationId": "createKeyPair",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Settings for the new key pair.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/NewKeyPairSettings"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Key Pair created.",
						"schema": {
							"$ref": "#/definitions/KeyPairView"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/keyPairs/sslServer/{id}/pem": {
			"post": {
				"tags": [
					"/keyPairs/sslServer"
				],
				"summary": "Download the key pair in PEM format.",
				"description": "For a successful request, the PEM file is directly returned in PEM format and the response content type is application/x-pem-file. In the exported PEM file, the private key is protected with PBES2 encryption and AES. If an error occurs, an ApiResult is returned in JSON format and the content type is application/json. Due to the sensitivity of the password parameter, the method for this operation is POST rather than GET.",
				"operationId": "exportPEMFile",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the key pair.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Parameters for the export request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/KeyPairExportSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Key Pair downloaded.",
						"schema": {
							"type": "string"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"403": {
						"description": "The operation is not permitted, based on the current configuration of the server."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/keyPairs/sslServer/{id}/certificate": {
			"get": {
				"tags": [
					"/keyPairs/sslServer"
				],
				"summary": "Download the certificate from a given key pair.",
				"description": "For a successful request, the PEM-encoded certificate file is directly returned as text and the response content type is application/x-x509-ca-cert. If an error occurs, an ApiResult is returned in JSON format and the content type is application/json.",
				"operationId": "exportCertificateFile",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the key pair.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"type": "string"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/idp/stsRequestParametersContracts/{id}": {
			"get": {
				"tags": [
					"/idp/stsRequestParametersContracts"
				],
				"summary": "Get a STS Request Parameters Contract.",
				"description": "",
				"operationId": "getStsRequestParamContractById",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of STS Request Parameters Contract to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/StsRequestParametersContract"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/idp/stsRequestParametersContracts"
				],
				"summary": "Update a STS Request Parameters Contract.",
				"description": "",
				"operationId": "updateStsRequestParamContractById",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of STS Request Parameters Contract to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Details for updated STS Request Parameters Contract.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/StsRequestParametersContract"
						}
					}
				],
				"responses": {
					"200": {
						"description": "STS Request Parameters Contract updated.",
						"schema": {
							"$ref": "#/definitions/StsRequestParametersContract"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/idp/stsRequestParametersContracts"
				],
				"summary": "Delete a STS Request Parameters Contract.",
				"description": "",
				"operationId": "deleteStsRequestParamContractById",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of STS Request Parameters Contract to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "STS Request Parameters Contract deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/idp/stsRequestParametersContracts": {
			"get": {
				"tags": [
					"/idp/stsRequestParametersContracts"
				],
				"summary": "Get the list of STS Request Parameters Contracts.",
				"description": "",
				"operationId": "getStsRequestParamContracts",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/StsRequestParametersContracts"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/idp/stsRequestParametersContracts"
				],
				"summary": "Create a new STS Request Parameters Contract.",
				"description": "",
				"operationId": "createStsRequestParamContract",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Details for the STS Request Parameters Contract.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/StsRequestParametersContract"
						}
					}
				],
				"responses": {
					"201": {
						"description": "STS Request Parameters Contract created.",
						"schema": {
							"$ref": "#/definitions/StsRequestParametersContract"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/sp/tokenGenerators/{id}": {
			"get": {
				"tags": [
					"/sp/tokenGenerators"
				],
				"summary": "Find a token generator instance by ID.",
				"description": "Get the configured token generator instance with the specified ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getTokenGenerator",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the token generator instance to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/TokenGenerator"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/sp/tokenGenerators"
				],
				"summary": "Update a token generator instance.",
				"description": "Update a token generator instance. If the token generator is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "updateTokenGenerator",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the token generator instance.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for the updated token generator instance.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TokenGenerator"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Token generator updated.",
						"schema": {
							"$ref": "#/definitions/TokenGenerator"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/sp/tokenGenerators"
				],
				"summary": "Delete a token generator instance.",
				"description": "Delete a token generator instance with the specified ID. A 404 status code is returned for nonexistent IDs. Note: Only token generators not in use can be deleted. If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
				"operationId": "deleteTokenGenerator",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the token generator instance to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Token generator deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Resource is in use and cannot be deleted.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/sp/tokenGenerators": {
			"get": {
				"tags": [
					"/sp/tokenGenerators"
				],
				"summary": "Get the list of token generator instances.",
				"description": "",
				"operationId": "getTokenGenerators",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/TokenGenerators"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/sp/tokenGenerators"
				],
				"summary": "Create a new token generator instance.",
				"description": "Create a new token generator instance. If the token generator is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "createTokenGenerator",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for a token generator instance.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TokenGenerator"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Token generator created.",
						"schema": {
							"$ref": "#/definitions/TokenGenerator"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/sp/tokenGenerators/descriptors/{id}": {
			"get": {
				"tags": [
					"/sp/tokenGenerators"
				],
				"summary": "Get the description of a token generator plugin by ID.",
				"description": "Get the description of a token generator plugin by ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getTokenGeneratorDescriptorsById",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of a token generator descriptor to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/TokenGeneratorDescriptor"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/sp/tokenGenerators/descriptors": {
			"get": {
				"tags": [
					"/sp/tokenGenerators"
				],
				"summary": "Get the list of available token generators.",
				"description": "",
				"operationId": "getTokenGeneratorDescriptors",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/TokenGeneratorDescriptors"
						}
					}
				}
			}
		},
		"/idp/tokenProcessors/{id}": {
			"get": {
				"tags": [
					"/idp/tokenProcessors"
				],
				"summary": "Find a token processor instance by ID.",
				"description": "Get the configured token processor instance with the specified ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getTokenProcessor",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the token processor instance to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/TokenProcessor"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/idp/tokenProcessors"
				],
				"summary": "Update a token processor instance.",
				"description": "Update a token processor instance. If the token processor is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "updateTokenProcessor",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of token processor instance.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for updated token processor instance.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TokenProcessor"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Token Processor updated.",
						"schema": {
							"$ref": "#/definitions/TokenProcessor"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/idp/tokenProcessors"
				],
				"summary": "Delete a token processor instance.",
				"description": "Delete a token processor instance with the specified ID. A 404 status code is returned for nonexistent IDs. Note: Only token processors not in use can be deleted. If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
				"operationId": "deleteTokenProcessor",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the token processor instance to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Token processor deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Resource is in use and cannot be deleted.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/idp/tokenProcessors/descriptors/{id}": {
			"get": {
				"tags": [
					"/idp/tokenProcessors"
				],
				"summary": "Get the description of a token processor plugin by ID.",
				"description": "Get the description of a token processor plugin by ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getTokenProcessorDescriptorsById",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of a token processor descriptor to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/TokenProcessorDescriptor"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/idp/tokenProcessors": {
			"get": {
				"tags": [
					"/idp/tokenProcessors"
				],
				"summary": "Get the list of token processor instances.",
				"description": "",
				"operationId": "getTokenProcessors",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/TokenProcessors"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/idp/tokenProcessors"
				],
				"summary": "Create a new token processor instance.",
				"description": "Create a new token processor instance. If the token processor is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "createTokenProcessor",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for a token processor instance.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TokenProcessor"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Token processor created.",
						"schema": {
							"$ref": "#/definitions/TokenProcessor"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/idp/tokenProcessors/descriptors": {
			"get": {
				"tags": [
					"/idp/tokenProcessors"
				],
				"summary": "Get the list of available token processors.",
				"description": "",
				"operationId": "getTokenProcessorDescriptors",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/TokenProcessorDescriptors"
						}
					}
				}
			}
		},
		"/tokenProcessorToTokenGeneratorMappings/{id}": {
			"get": {
				"tags": [
					"/tokenProcessorToTokenGeneratorMappings"
				],
				"summary": "Get a Token Processor to Token Generator Mapping.",
				"description": "",
				"operationId": "getTokenToTokenMappingById",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of Token Processor to Token Generator Mapping to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/TokenToTokenMapping"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/tokenProcessorToTokenGeneratorMappings"
				],
				"summary": "Update a Token Processor to Token Generator Mapping.",
				"description": "",
				"operationId": "updateTokenToTokenMappingById",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of Token Processor to Token Generator Mapping to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for updated Token Processor to Token Generator Mapping.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TokenToTokenMapping"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "Token Processor to Token Generator mapping updated.",
						"schema": {
							"$ref": "#/definitions/TokenToTokenMapping"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/tokenProcessorToTokenGeneratorMappings"
				],
				"summary": "Delete a Token Processor to Token Generator Mapping.",
				"description": "",
				"operationId": "deleteTokenToTokenMappingById",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of Token Processor to Token Generator Mapping to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Token Processor to Token Generator mapping deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/tokenProcessorToTokenGeneratorMappings": {
			"get": {
				"tags": [
					"/tokenProcessorToTokenGeneratorMappings"
				],
				"summary": "Get the list of Token Processor to Token Generator Mappings.",
				"description": "",
				"operationId": "getTokenToTokenMappings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/TokenToTokenMappings"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/tokenProcessorToTokenGeneratorMappings"
				],
				"summary": "Create a new Token Processor to Token Generator Mapping.",
				"description": "",
				"operationId": "createTokenToTokenMapping",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for a new Token Processor to Token Generator Mapping.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TokenToTokenMapping"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"201": {
						"description": "Token Processor to Token Generator mapping created.",
						"schema": {
							"$ref": "#/definitions/TokenToTokenMapping"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/certificates/ca": {
			"get": {
				"tags": [
					"/certificates/ca"
				],
				"summary": "Get list of trusted certificate authorities.",
				"description": "",
				"operationId": "getTrustedCAs",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/CertViews"
						}
					}
				}
			}
		},
		"/certificates/ca/{id}": {
			"get": {
				"tags": [
					"/certificates/ca"
				],
				"summary": "Retrieve details of a trusted certificate authority.",
				"description": "",
				"operationId": "getTrustedCert",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the trusted certificate authority to retrieve.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/CertView"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/certificates/ca"
				],
				"summary": "Delete a trusted certificate authority.",
				"description": "If the request is successful, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
				"operationId": "deleteTrustedCA",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the trusted certificate authority to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Certificate Authority deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/certificates/ca/import": {
			"post": {
				"tags": [
					"/certificates/ca"
				],
				"summary": "Import a new trusted certificate authority.",
				"description": "",
				"operationId": "importTrustedCA",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "File data to import.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/X509File"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Certificate Authority imported.",
						"schema": {
							"$ref": "#/definitions/CertView"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/certificates/ca/{id}/file": {
			"get": {
				"tags": [
					"/certificates/ca"
				],
				"summary": "Download the certificate from a given trusted certificate authority.",
				"description": "For a successful request, the PEM-encoded certificate file is directly returned as text and the response content type is application/x-x509-ca-cert. If an error occurs, an ApiResult is returned in JSON format and the content type is application/json.",
				"operationId": "exportCertificateFile",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the trusted certificate authority.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"type": "string"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/version": {
			"get": {
				"tags": [
					"/version"
				],
				"summary": "Gets the server version.",
				"description": "",
				"operationId": "getVersion",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/Version"
						}
					}
				}
			}
		},
		"/virtualHostNames": {
			"get": {
				"tags": [
					"/virtualHostNames"
				],
				"summary": "Retrieve virtual host names settings.",
				"description": "",
				"operationId": "getVirtualHostNamesSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/VirtualHostNameSettings"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/virtualHostNames"
				],
				"summary": "Update virtual host names settings.",
				"description": "",
				"operationId": "updateVirtualHostNamesSettings",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Virtual host names settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/VirtualHostNameSettings"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Virtual host names settings updated.",
						"schema": {
							"$ref": "#/definitions/VirtualHostNameSettings"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/authorizationDetailTypes": {
			"get": {
				"tags": [
					"/oauth/authorizationDetailTypes"
				],
				"summary": "Get the list of authorization detail types.",
				"description": "",
				"operationId": "getAuthorizationDetailTypes",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AuthorizationDetailTypes"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/oauth/authorizationDetailTypes"
				],
				"summary": "Create a new authorization detail type.",
				"description": "Create an authorization detail type. If the authorization detail type is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "addAuthorizationDetailType",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for new authorization detail type.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AuthorizationDetailType"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Authorization Detail Type created.",
						"schema": {
							"$ref": "#/definitions/AuthorizationDetailType"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/authorizationDetailTypes/{id}": {
			"get": {
				"tags": [
					"/oauth/authorizationDetailTypes"
				],
				"summary": "Get an authorization detail type.",
				"description": "Get the configured authorization detail type with the specified ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getAuthorizationDetailTypeById",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the authorization detail type.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/AuthorizationDetailType"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/oauth/authorizationDetailTypes"
				],
				"summary": "Update an authorization detail type.",
				"description": "Update an authorization detail type with matching ID. If the type is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected. Note: A 404 status code is returned for nonexistent IDs.",
				"operationId": "updateAuthorizationDetailType",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the authorization detail type.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for updated authorization detail type.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/AuthorizationDetailType"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Authorization Detail Type updated.",
						"schema": {
							"$ref": "#/definitions/AuthorizationDetailType"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/oauth/authorizationDetailTypes"
				],
				"summary": "Delete an authorization detail type.",
				"description": "Delete an authorization detail type with the specified ID. A 404 status code is returned for nonexistent IDs. Note: If the request succeeds, the response body is empty.",
				"operationId": "deleteAuthorizationDetailType",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the authorization detail type.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Authorization Detail Type deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/issuers": {
			"get": {
				"tags": [
					"/oauth/issuers"
				],
				"summary": "Get the list of virtual issuers.",
				"description": "",
				"operationId": "getIssuers",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/Issuers"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/oauth/issuers"
				],
				"summary": "Create a new virtual issuer.",
				"description": "Create a new virtual issuer. If the virtual issuer is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "addIssuer",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for new virtual issuer.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Issuer"
						}
					}
				],
				"responses": {
					"201": {
						"description": "Issuer created.",
						"schema": {
							"$ref": "#/definitions/Issuer"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/issuers/{id}": {
			"get": {
				"tags": [
					"/oauth/issuers"
				],
				"summary": "Find a virtual issuer by ID.",
				"description": "Get a virtual issuer with the specified ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getIssuerById",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the virtual issuer to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/Issuer"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/oauth/issuers"
				],
				"summary": "Update a virtual issuer.",
				"description": "Update a virtual issuer with the matching ID. If the policy is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected. Note: A 404 status code is returned for nonexistent IDs.",
				"operationId": "updateIssuer",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the virtual issuer to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for updated virtual issuer.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Issuer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Issuer updated.",
						"schema": {
							"$ref": "#/definitions/Issuer"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/oauth/issuers"
				],
				"summary": "Delete a virtual issuer.",
				"description": "Delete a virtual issuer with the specified ID. A 404 status code is returned for nonexistent IDs. Note: If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
				"operationId": "deleteIssuer",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the virtual issuer to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Issuer deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/tokenExchange/tokenGeneratorMappings/{id}": {
			"get": {
				"tags": [
					"/oauth/tokenExchange/tokenGeneratorMappings"
				],
				"summary": "Get a Token Exchange Processor policy to Token Generator Mapping.",
				"description": "",
				"operationId": "getTokenGeneratorMappingById",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of Token Exchange Processor policy to Token Generator Mapping to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ProcessorPolicyToGeneratorMapping"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/oauth/tokenExchange/tokenGeneratorMappings"
				],
				"summary": "Update a Token Exchange Processor policy to Token Generator Mapping.",
				"description": "",
				"operationId": "updateTokenGeneratorMappingById",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of Token Exchange Processor policy to Token Generator Mapping to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for updated Token Exchange Processor policy to Token Generator Mapping.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ProcessorPolicyToGeneratorMapping"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "Token Exchange Processor policy to Token Generator mapping updated.",
						"schema": {
							"$ref": "#/definitions/ProcessorPolicyToGeneratorMapping"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/oauth/tokenExchange/tokenGeneratorMappings"
				],
				"summary": "Delete a Token Exchange Processor policy to Token Generator Mapping.",
				"description": "",
				"operationId": "deleteTokenGeneratorMappingById",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of Token Exchange Processor policy to Token Generator Mapping to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Token Exchange Processor policy to Token Generator mapping deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/tokenExchange/tokenGeneratorMappings": {
			"get": {
				"tags": [
					"/oauth/tokenExchange/tokenGeneratorMappings"
				],
				"summary": "Get the list of Token Exchange Processor policy to Token Generator Mappings.",
				"description": "",
				"operationId": "getTokenGeneratorMappings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/ProcessorPolicyToGeneratorMappings"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/oauth/tokenExchange/tokenGeneratorMappings"
				],
				"summary": "Create a new Token Exchange Processor policy to Token Generator Mapping.",
				"description": "",
				"operationId": "createTokenGeneratorMapping",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for a new Token Exchange Processor policy to Token Generator Mapping.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ProcessorPolicyToGeneratorMapping"
						}
					},
					{
						"name": "X-BypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"201": {
						"description": "Token Exchange Processor policy to Token Generator mapping created.",
						"schema": {
							"$ref": "#/definitions/ProcessorPolicyToGeneratorMapping"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/tokenExchange/generator/groups": {
			"get": {
				"tags": [
					"/oauth/tokenExchange/generator"
				],
				"summary": "Get list of OAuth 2.0 Token Exchange Generator groups.",
				"description": "",
				"operationId": "getGroups",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/TokenExchangeGeneratorGroups"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/oauth/tokenExchange/generator"
				],
				"summary": "Create a new OAuth 2.0 Token Exchange Generator group.",
				"description": "Create a new OAuth 2.0 Token Exchange Generator group. If the OAuth 2.0 Token Exchange Generator group is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "createGroup",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for new OAuth 2.0 Token Exchange Generator.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TokenExchangeGeneratorGroup"
						}
					},
					{
						"name": "bypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"201": {
						"description": "Token Exchange Processor Policy created.",
						"schema": {
							"$ref": "#/definitions/TokenExchangeGeneratorGroup"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/tokenExchange/generator/settings": {
			"get": {
				"tags": [
					"/oauth/tokenExchange/generator"
				],
				"summary": "Get general OAuth 2.0 Token Exchange Generator settings.",
				"description": "",
				"operationId": "getSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/TokenExchangeGeneratorSettings"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/oauth/tokenExchange/generator"
				],
				"summary": "Update general OAuth 2.0 Token Exchange Generator settings.",
				"description": "",
				"operationId": "updateSettings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "OAuth 2.0 Token Exchange Generator settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TokenExchangeGeneratorSettings"
						}
					},
					{
						"name": "bypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Settings updated.",
						"schema": {
							"$ref": "#/definitions/TokenExchangeGeneratorSettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/tokenExchange/generator/groups/{id}": {
			"get": {
				"tags": [
					"/oauth/tokenExchange/generator"
				],
				"summary": "Find an OAuth 2.0 Token Exchange Generator group by ID.",
				"description": "Get an OAuth 2.0 Token Exchange Generator group with the specified ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getGroup",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the OAuth 2.0 Token Exchange Generator group to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/TokenExchangeGeneratorGroup"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/oauth/tokenExchange/generator"
				],
				"summary": "Update an OAuth 2.0 Token Exchange Generator group.",
				"description": "Update an OAuth 2.0 Token Exchange Generator group with the matching ID. If the group is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected. Note: A 404 status code is returned for nonexistent IDs.",
				"operationId": "updateGroup",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the OAuth 2.0 Token Exchange Generator group to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for updated OAuth 2.0 Token Exchange Generator group.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TokenExchangeGeneratorGroup"
						}
					},
					{
						"name": "bypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Token Exchange Processor Policy updated.",
						"schema": {
							"$ref": "#/definitions/TokenExchangeGeneratorGroup"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/oauth/tokenExchange/generator"
				],
				"summary": "Delete an OAuth 2.0 Token Exchange Generator group.",
				"description": "Delete an OAuth 2.0 Token Exchange Generator group with the specified ID. A 404 status code is returned for nonexistent IDs. Note: If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
				"operationId": "deleteGroup",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of OAuth 2.0 Token Exchange Generator group to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Token Exchange Processor Policy deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/tokenExchange/processor/policies/{id}": {
			"get": {
				"tags": [
					"/oauth/tokenExchange/processor"
				],
				"summary": "Find an OAuth 2.0 Token Exchange Processor policy by ID.",
				"description": "Get an OAuth 2.0 Token Exchange Processor policy with the specified ID. A 404 status code is returned for nonexistent IDs.",
				"operationId": "getPolicy",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the OAuth 2.0 Token Exchange Processor policy to fetch.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/TokenExchangeProcessorPolicy"
						}
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/oauth/tokenExchange/processor"
				],
				"summary": "Update an OAuth 2.0 Token Exchange Processor policy.",
				"description": "Update an OAuth 2.0 Token Exchange Processor policy with the matching ID. If the policy is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected. Note: A 404 status code is returned for nonexistent IDs.",
				"operationId": "updatePolicy",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of the OAuth 2.0 Token Exchange Processor policy to update.",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for updated OAuth 2.0 Token Exchange Processor policy.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TokenExchangeProcessorPolicy"
						}
					},
					{
						"name": "bypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Token Exchange Processor Policy updated.",
						"schema": {
							"$ref": "#/definitions/TokenExchangeProcessorPolicy"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"/oauth/tokenExchange/processor"
				],
				"summary": "Delete an OAuth 2.0 Token Exchange Processor policy.",
				"description": "Delete an OAuth 2.0 Token Exchange Processor policy with the specified ID. A 404 status code is returned for nonexistent IDs. Note: If the request succeeds, the response body is empty. If the request fails, an ApiResult is returned with details of the error.",
				"operationId": "deletePolicy",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "ID of OAuth 2.0 Token Exchange Processor policy to delete.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "Token Exchange Processor Policy deleted."
					},
					"404": {
						"description": "Resource not found.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/tokenExchange/processor/policies": {
			"get": {
				"tags": [
					"/oauth/tokenExchange/processor"
				],
				"summary": "Get list of OAuth 2.0 Token Exchange Processor policies.",
				"description": "",
				"operationId": "getPolicies",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/TokenExchangeProcessorPolicies"
						}
					}
				}
			},
			"post": {
				"tags": [
					"/oauth/tokenExchange/processor"
				],
				"summary": "Create a new OAuth 2.0 Token Exchange Processor policy.",
				"description": "Create a new OAuth 2.0 Token Exchange Processor policy. If the OAuth 2.0 Token Exchange Processor policy is not properly configured, a 422 status code is returned along with a list of validation errors that must be corrected.",
				"operationId": "createPolicy",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "Configuration for new OAuth 2.0 Token Exchange Processor.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TokenExchangeProcessorPolicy"
						}
					},
					{
						"name": "bypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"201": {
						"description": "Token Exchange Processor Policy created.",
						"schema": {
							"$ref": "#/definitions/TokenExchangeProcessorPolicy"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		},
		"/oauth/tokenExchange/processor/settings": {
			"get": {
				"tags": [
					"/oauth/tokenExchange/processor"
				],
				"summary": "Get general OAuth 2.0 Token Exchange Processor settings.",
				"description": "",
				"operationId": "getSettings",
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "Success.",
						"schema": {
							"$ref": "#/definitions/TokenExchangeProcessorSettings"
						}
					}
				}
			},
			"put": {
				"tags": [
					"/oauth/tokenExchange/processor"
				],
				"summary": "Update general OAuth 2.0 Token Exchange Processor settings.",
				"description": "",
				"operationId": "updateSettings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"description": "OAuth 2.0 Token Exchange Processor settings.",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TokenExchangeProcessorSettings"
						}
					},
					{
						"name": "bypassExternalValidation",
						"in": "header",
						"description": "External validation will be bypassed when set to true. Default to false.",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Settings updated.",
						"schema": {
							"$ref": "#/definitions/TokenExchangeProcessorSettings"
						}
					},
					"400": {
						"description": "The request was improperly formatted or contained invalid fields."
					},
					"422": {
						"description": "Validation error(s) occurred.",
						"schema": {
							"$ref": "#/definitions/ApiResult"
						}
					}
				}
			}
		}
	},
	"definitions": {
		"AccessTokenAttribute": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of this attribute."
				},
				"multiValued": {
					"type": "boolean",
					"position": 20,
					"description": "Indicates whether attribute value is always returned as an array."
				}
			},
			"description": "An attribute for an Access Token's attribute contract."
		},
		"AccessTokenAttributeContract": {
			"type": "object",
			"properties": {
				"coreAttributes": {
					"type": "array",
					"position": 5,
					"description": "A list of core token attributes that are associated with the access token management plugin type. This field is read-only and is ignored on POST/PUT.",
					"items": {
						"$ref": "#/definitions/AccessTokenAttribute"
					}
				},
				"extendedAttributes": {
					"type": "array",
					"position": 10,
					"description": "A list of additional token attributes that are associated with this access token management plugin instance.",
					"items": {
						"$ref": "#/definitions/AccessTokenAttribute"
					}
				},
				"inherited": {
					"type": "boolean",
					"position": 20,
					"description": "Whether this attribute contract is inherited from its parent instance. If true, the rest of the properties in this model become read-only. The default value is false."
				},
				"defaultSubjectAttribute": {
					"type": "string",
					"position": 30,
					"description": "Default subject attribute to use for audit logging when validating the access token. Blank value means to use USER_KEY attribute value after grant lookup."
				}
			},
			"description": "A set of attributes exposed by an Access Token Manager."
		},
		"AccessTokenManager": {
			"allOf": [
				{
					"$ref": "#/definitions/PluginInstance"
				},
				{
					"type": "object",
					"properties": {
						"attributeContract": {
							"position": 1000,
							"description": "The list of attributes that will be added to an access token.",
							"$ref": "#/definitions/AccessTokenAttributeContract"
						},
						"selectionSettings": {
							"position": 1010,
							"description": "Settings which determine how this token manager can be selected for use by an OAuth request.",
							"$ref": "#/definitions/AtmSelectionSettings"
						},
						"accessControlSettings": {
							"position": 1020,
							"description": "Settings which determine which clients may access this token manager.",
							"$ref": "#/definitions/AtmAccessControlSettings"
						},
						"sessionValidationSettings": {
							"position": 1030,
							"description": "Settings which determine how the user session is associated with the access token.",
							"$ref": "#/definitions/SessionValidationSettings"
						},
						"sequenceNumber": {
							"type": "integer",
							"format": "int32",
							"position": 1040,
							"description": "Number added to an access token to identify which Access Token Manager issued the token."
						}
					},
					"description": "An OAuth access token management plugin instance."
				}
			]
		},
		"AtmAccessControlSettings": {
			"type": "object",
			"properties": {
				"inherited": {
					"type": "boolean",
					"position": 10,
					"description": "If this token manager has a parent, this flag determines whether access control settings are inherited from the parent. When set to true, the other fields in this model become read-only. The default value is false."
				},
				"restrictClients": {
					"type": "boolean",
					"position": 20,
					"description": "Determines whether access to this token manager is restricted to specific OAuth clients. If false, the 'allowedClients' field is ignored. The default value is false."
				},
				"allowedClients": {
					"type": "array",
					"position": 30,
					"description": "If 'restrictClients' is true, this field defines the list of OAuth clients that are allowed to access the token manager.",
					"items": {
						"$ref": "#/definitions/ResourceLink"
					}
				}
			},
			"description": "Access control settings for an access token management plugin instance."
		},
		"AtmSelectionSettings": {
			"type": "object",
			"properties": {
				"inherited": {
					"type": "boolean",
					"position": 10,
					"description": "If this token manager has a parent, this flag determines whether selection settings, such as resource URI's, are inherited from the parent. When set to true, the other fields in this model become read-only. The default value is false."
				},
				"resourceUris": {
					"type": "array",
					"position": 20,
					"description": "The list of base resource URI's which map to this token manager. A resource URI, specified via the 'aud' parameter, can be used to select a specific token manager for an OAuth request.",
					"items": {
						"type": "string"
					}
				}
			},
			"description": "Selection settings for an access token management plugin instance."
		},
		"AttributeFulfillmentValue": {
			"type": "object",
			"required": [
				"source",
				"value"
			],
			"properties": {
				"source": {
					"position": 20,
					"description": "The attribute value source.",
					"$ref": "#/definitions/SourceTypeIdKey"
				},
				"value": {
					"type": "string",
					"position": 30,
					"description": "The value for this attribute."
				}
			},
			"description": "Defines how an attribute in an attribute contract should be populated."
		},
		"AttributeSource": {
			"type": "object",
			"required": [
				"dataStoreRef",
				"type"
			],
			"discriminator": "type",
			"properties": {
				"type": {
					"type": "string",
					"position": 10,
					"description": "The data store type of this attribute source.",
					"enum": [
						"LDAP",
						"PING_ONE_LDAP_GATEWAY",
						"JDBC",
						"CUSTOM"
					]
				},
				"dataStoreRef": {
					"position": 20,
					"description": "Reference to the associated data store.",
					"$ref": "#/definitions/ResourceLink"
				},
				"id": {
					"type": "string",
					"position": 30,
					"description": "The ID that defines this attribute source. Only alphanumeric characters allowed.<br>Note: Required for OpenID Connect policy attribute sources, OAuth IdP adapter mappings, OAuth access token mappings and APC-to-SP Adapter Mappings. IdP Connections will ignore this property since it only allows one attribute source to be defined per mapping. IdP-to-SP Adapter Mappings can contain multiple attribute sources."
				},
				"description": {
					"type": "string",
					"position": 40,
					"description": "The description of this attribute source. The description needs to be unique amongst the attribute sources for the mapping.<br>Note: Required for APC-to-SP Adapter Mappings"
				},
				"attributeContractFulfillment": {
					"type": "object",
					"position": 50,
					"description": "A list of mappings from attribute names to their fulfillment values. This field is only valid for the SP Connection's Browser SSO mappings",
					"additionalProperties": {
						"$ref": "#/definitions/AttributeFulfillmentValue"
					}
				}
			},
			"description": "The configured settings to look up attributes from an associated data store."
		},
		"AuthenticationSelector": {
			"allOf": [
				{
					"$ref": "#/definitions/PluginInstance"
				},
				{
					"type": "object",
					"properties": {
						"attributeContract": {
							"position": 1000,
							"description": "The list of attributes that the Authentication Selector provides.",
							"$ref": "#/definitions/AuthenticationSelectorAttributeContract"
						}
					},
					"description": "An Authentication Selector instance."
				}
			]
		},
		"AuthenticationSelectorAttribute": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of this attribute."
				}
			},
			"description": "An attribute for the Authentication Selector attribute contract."
		},
		"AuthenticationSelectorAttributeContract": {
			"type": "object",
			"properties": {
				"extendedAttributes": {
					"type": "array",
					"position": 10,
					"description": "A list of additional attributes that can be returned by the Authentication Selector. The extended attributes are only used if the Authentication Selector supports them.",
					"items": {
						"$ref": "#/definitions/AuthenticationSelectorAttribute"
					}
				}
			},
			"description": "A set of attributes exposed by an Authentication Selector."
		},
		"AuthorizationDetailProcessor": {
			"allOf": [
				{
					"$ref": "#/definitions/PluginInstance"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "An authorization detail processor plugin instance."
				}
			]
		},
		"BinaryLdapAttributeSettings": {
			"type": "object",
			"properties": {
				"binaryEncoding": {
					"type": "string",
					"description": "Get the encoding type for this attribute. If not specified, the default is BASE64.",
					"enum": [
						"BASE64",
						"HEX",
						"SID"
					]
				}
			},
			"description": "Binary settings for a LDAP attribute."
		},
		"ClientRegistrationPolicy": {
			"allOf": [
				{
					"$ref": "#/definitions/PluginInstance"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "A client registration policy plugin instance."
				}
			]
		},
		"ConditionalIssuanceCriteriaEntry": {
			"type": "object",
			"required": [
				"attributeName",
				"condition",
				"source",
				"value"
			],
			"properties": {
				"source": {
					"position": 10,
					"description": "The source of the attribute.",
					"$ref": "#/definitions/SourceTypeIdKey"
				},
				"attributeName": {
					"type": "string",
					"position": 20,
					"description": "The name of the attribute to use in this issuance criterion."
				},
				"condition": {
					"type": "string",
					"position": 30,
					"description": "The condition that will be applied to the source attribute's value and the expected value.",
					"enum": [
						"EQUALS",
						"EQUALS_CASE_INSENSITIVE",
						"EQUALS_DN",
						"NOT_EQUAL",
						"NOT_EQUAL_CASE_INSENSITIVE",
						"NOT_EQUAL_DN",
						"MULTIVALUE_CONTAINS",
						"MULTIVALUE_CONTAINS_CASE_INSENSITIVE",
						"MULTIVALUE_CONTAINS_DN",
						"MULTIVALUE_DOES_NOT_CONTAIN",
						"MULTIVALUE_DOES_NOT_CONTAIN_CASE_INSENSITIVE",
						"MULTIVALUE_DOES_NOT_CONTAIN_DN"
					]
				},
				"value": {
					"type": "string",
					"position": 40,
					"description": "The expected value of this issuance criterion."
				},
				"errorResult": {
					"type": "string",
					"position": 50,
					"description": "The error result to return if this issuance criterion fails. This error result will show up in the PingFederate server logs."
				}
			},
			"description": "An issuance criterion that checks a source attribute against a particular condition and the expected value. If the condition is true then this issuance criterion passes, otherwise the criterion fails."
		},
		"ConfigField": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of the configuration field."
				},
				"value": {
					"type": "string",
					"position": 20,
					"description": "The value for the configuration field. For encrypted or hashed fields, GETs will not return this attribute. To update an encrypted or hashed field, specify the new value in this attribute."
				},
				"encryptedValue": {
					"type": "string",
					"position": 30,
					"description": "For encrypted or hashed fields, this attribute contains the encrypted representation of the field's value, if a value is defined. If you do not want to update the stored value, this attribute should be passed back unchanged."
				},
				"inherited": {
					"type": "boolean",
					"position": 40,
					"description": "Whether this field is inherited from its parent instance. If true, the value/encrypted value properties become read-only. The default value is false."
				}
			},
			"description": "A plugin configuration field value."
		},
		"ConfigRow": {
			"type": "object",
			"required": [
				"fields"
			],
			"properties": {
				"fields": {
					"type": "array",
					"position": 10,
					"description": "The configuration fields in the row.",
					"items": {
						"$ref": "#/definitions/ConfigField"
					}
				},
				"defaultRow": {
					"type": "boolean",
					"position": 20,
					"description": "Whether this row is the default."
				}
			},
			"description": "A row of configuration values for a plugin configuration table."
		},
		"ConfigTable": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of the table."
				},
				"rows": {
					"type": "array",
					"position": 20,
					"description": "List of table rows.",
					"items": {
						"$ref": "#/definitions/ConfigRow"
					}
				},
				"inherited": {
					"type": "boolean",
					"position": 30,
					"description": "Whether this table is inherited from its parent instance. If true, the rows become read-only. The default value is false."
				}
			},
			"description": "A plugin configuration table populated with values."
		},
		"CustomAttributeSource": {
			"allOf": [
				{
					"$ref": "#/definitions/AttributeSource"
				},
				{
					"type": "object",
					"properties": {
						"filterFields": {
							"type": "array",
							"position": 1000,
							"description": "The list of fields that can be used to filter a request to the custom data store.",
							"items": {
								"$ref": "#/definitions/FieldEntry"
							}
						}
					},
					"description": "The configured settings used to look up attributes from a custom data store."
				}
			]
		},
		"ExpressionIssuanceCriteriaEntry": {
			"type": "object",
			"required": [
				"expression"
			],
			"properties": {
				"expression": {
					"type": "string",
					"position": 10,
					"description": "The OGNL expression to evaluate."
				},
				"errorResult": {
					"type": "string",
					"position": 50,
					"description": "The error result to return if this issuance criterion fails. This error result will show up in the PingFederate server logs."
				}
			},
			"description": "An issuance criterion that uses a Boolean return value from an OGNL expression to determine whether or not it passes."
		},
		"FieldEntry": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"value": {
					"type": "string",
					"description": "The value of this field. Whether or not the value is required will be determined by plugin validation checks."
				},
				"name": {
					"type": "string",
					"description": "The name of this field."
				}
			},
			"xml": {
				"name": "FieldEntry"
			},
			"description": "A simple name value pair to represent a field entry."
		},
		"IdpAdapter": {
			"allOf": [
				{
					"$ref": "#/definitions/PluginInstance"
				},
				{
					"type": "object",
					"properties": {
						"authnCtxClassRef": {
							"type": "string",
							"position": 100,
							"description": "The fixed value that indicates how the user was authenticated."
						},
						"attributeMapping": {
							"position": 110,
							"description": "The attributes mapping from attribute sources to attribute targets.",
							"$ref": "#/definitions/IdpAdapterContractMapping"
						},
						"attributeContract": {
							"position": 1000,
							"description": "The list of attributes that the IdP adapter provides.",
							"$ref": "#/definitions/IdpAdapterAttributeContract"
						}
					},
					"description": "An IdP adapter instance."
				}
			]
		},
		"IdpAdapterAttribute": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of this attribute."
				},
				"pseudonym": {
					"type": "boolean",
					"position": 900,
					"description": "Specifies whether this attribute is used to construct a pseudonym for the SP. Defaults to false."
				},
				"masked": {
					"type": "boolean",
					"position": 1000,
					"description": "Specifies whether this attribute is masked in PingFederate logs. Defaults to false."
				}
			},
			"description": "An attribute for the IdP adapter attribute contract."
		},
		"IdpAdapterAttributeContract": {
			"type": "object",
			"required": [
				"coreAttributes"
			],
			"properties": {
				"coreAttributes": {
					"type": "array",
					"position": 10,
					"description": "A list of IdP adapter attributes that correspond to the attributes exposed by the IdP adapter type.",
					"items": {
						"$ref": "#/definitions/IdpAdapterAttribute"
					}
				},
				"extendedAttributes": {
					"type": "array",
					"position": 20,
					"description": "A list of additional attributes that can be returned by the IdP adapter. The extended attributes are only used if the adapter supports them.",
					"items": {
						"$ref": "#/definitions/IdpAdapterAttribute"
					}
				},
				"uniqueUserKeyAttribute": {
					"type": "string",
					"position": 30,
					"description": "The attribute to use for uniquely identify a user's authentication sessions."
				},
				"maskOgnlValues": {
					"type": "boolean",
					"position": 40,
					"description": "Whether or not all OGNL expressions used to fulfill an outgoing assertion contract should be masked in the logs. Defaults to false."
				},
				"inherited": {
					"type": "boolean",
					"position": 50,
					"description": "Whether this attribute contract is inherited from its parent instance. If true, the rest of the properties in this model become read-only. The default value is false."
				}
			},
			"description": "A set of attributes exposed by an IdP adapter."
		},
		"IdpAdapterContractMapping": {
			"type": "object",
			"required": [
				"attributeContractFulfillment"
			],
			"properties": {
				"attributeSources": {
					"type": "array",
					"position": 10,
					"description": "A list of configured data stores to look up attributes from.",
					"items": {
						"$ref": "#/definitions/AttributeSource"
					}
				},
				"attributeContractFulfillment": {
					"type": "object",
					"position": 20,
					"description": "A list of mappings from attribute names to their fulfillment values.",
					"additionalProperties": {
						"$ref": "#/definitions/AttributeFulfillmentValue"
					}
				},
				"issuanceCriteria": {
					"position": 30,
					"description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
					"$ref": "#/definitions/IssuanceCriteria"
				},
				"inherited": {
					"type": "boolean",
					"position": 40,
					"description": "Whether this attribute mapping is inherited from its parent instance. If true, the rest of the properties in this model become read-only. The default value is false."
				}
			},
			"description": "An IdP Adapter Contract Mapping."
		},
		"IssuanceCriteria": {
			"type": "object",
			"properties": {
				"conditionalCriteria": {
					"type": "array",
					"position": 10,
					"description": "A list of conditional issuance criteria where existing attributes must satisfy their conditions against expected values in order for the transaction to continue.",
					"items": {
						"$ref": "#/definitions/ConditionalIssuanceCriteriaEntry"
					}
				},
				"expressionCriteria": {
					"type": "array",
					"position": 20,
					"description": "A list of expression issuance criteria where the OGNL expressions must evaluate to true in order for the transaction to continue.",
					"items": {
						"$ref": "#/definitions/ExpressionIssuanceCriteriaEntry"
					}
				}
			},
			"description": "A list of criteria that determines whether a transaction (usually a SSO transaction) is continued. All criteria must pass in order for the transaction to continue."
		},
		"JdbcAttributeSource": {
			"allOf": [
				{
					"$ref": "#/definitions/AttributeSource"
				},
				{
					"type": "object",
					"required": [
						"filter",
						"table"
					],
					"properties": {
						"schema": {
							"type": "string",
							"position": 30,
							"description": "Lists the table structure that stores information within a database. Some databases, such as Oracle, require a schema for a JDBC query. Other databases, such as MySQL, do not require a schema."
						},
						"table": {
							"type": "string",
							"position": 40,
							"description": "The name of the database table. The name is used to construct the SQL query to retrieve data from the data store."
						},
						"columnNames": {
							"type": "array",
							"position": 50,
							"description": "A list of column names used to construct the SQL query to retrieve data from the specified table in the datastore.",
							"items": {
								"type": "string"
							}
						},
						"filter": {
							"type": "string",
							"position": 60,
							"description": "The JDBC WHERE clause used to query your data store to locate a user record."
						}
					},
					"description": "The configured settings used to look up attributes from a JDBC data store."
				}
			]
		},
		"LdapAttributeSource": {
			"allOf": [
				{
					"$ref": "#/definitions/AttributeSource"
				},
				{
					"type": "object",
					"required": [
						"searchFilter",
						"searchScope"
					],
					"properties": {
						"baseDn": {
							"type": "string",
							"position": 30,
							"description": "The base DN to search from. If not specified, the search will start at the LDAP's root."
						},
						"searchScope": {
							"type": "string",
							"position": 40,
							"description": "Determines the node depth of the query.",
							"enum": [
								"OBJECT",
								"ONE_LEVEL",
								"SUBTREE"
							]
						},
						"searchFilter": {
							"type": "string",
							"position": 50,
							"description": "The LDAP filter that will be used to lookup the objects from the directory."
						},
						"searchAttributes": {
							"type": "array",
							"position": 55,
							"description": "A list of LDAP attributes returned from search and available for mapping.",
							"items": {
								"type": "string"
							}
						},
						"binaryAttributeSettings": {
							"type": "object",
							"position": 60,
							"description": "The advanced settings for binary LDAP attributes.",
							"additionalProperties": {
								"$ref": "#/definitions/BinaryLdapAttributeSettings"
							}
						},
						"memberOfNestedGroup": {
							"type": "boolean",
							"position": 70,
							"description": "Set this to true to return transitive group memberships for the 'memberOf' attribute.  This only applies for Active Directory data sources.  All other data sources will be set to false."
						}
					},
					"description": "The configured settings used to look up attributes from a LDAP data store."
				}
			]
		},
		"NotificationPublisher": {
			"allOf": [
				{
					"$ref": "#/definitions/PluginInstance"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "A notification publisher plugin instance."
				}
			]
		},
		"OutOfBandAuthAttribute": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of this attribute."
				}
			},
			"description": "An attribute for the out of band authenticator plugin instance attribute contract."
		},
		"OutOfBandAuthAttributeContract": {
			"type": "object",
			"required": [
				"coreAttributes"
			],
			"properties": {
				"coreAttributes": {
					"type": "array",
					"position": 10,
					"description": "A list of out of band authenticator attributes.",
					"items": {
						"$ref": "#/definitions/OutOfBandAuthAttribute"
					}
				},
				"extendedAttributes": {
					"type": "array",
					"position": 20,
					"description": "A list of additional attributes that can be returned by the out of band authenticator plugin instance. The extended attributes are only used if the plugin supports them.",
					"items": {
						"$ref": "#/definitions/OutOfBandAuthAttribute"
					}
				}
			},
			"description": "A set of attributes exposed by an out of band authenticator plugin instance."
		},
		"OutOfBandAuthenticator": {
			"allOf": [
				{
					"$ref": "#/definitions/PluginInstance"
				},
				{
					"type": "object",
					"properties": {
						"attributeContract": {
							"position": 5,
							"description": "The list of attributes that the out of band authenticator plugin provides.",
							"$ref": "#/definitions/OutOfBandAuthAttributeContract"
						}
					},
					"description": "An out of band authenticator plugin instance."
				}
			]
		},
		"PasswordCredentialValidator": {
			"allOf": [
				{
					"$ref": "#/definitions/PluginInstance"
				},
				{
					"type": "object",
					"properties": {
						"attributeContract": {
							"position": 1000,
							"description": "The list of attributes that the password credential validator provides.",
							"$ref": "#/definitions/PasswordCredentialValidatorAttributeContract"
						}
					},
					"description": "The set of attributes used to configure a password credential validator"
				}
			]
		},
		"PasswordCredentialValidatorAttribute": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of this attribute."
				}
			},
			"description": "An attribute for the password credential validator attribute contract."
		},
		"PasswordCredentialValidatorAttributeContract": {
			"type": "object",
			"properties": {
				"coreAttributes": {
					"type": "array",
					"position": 10,
					"description": "A list of read-only attributes that are automatically populated by the password credential validator descriptor.",
					"items": {
						"$ref": "#/definitions/PasswordCredentialValidatorAttribute"
					}
				},
				"extendedAttributes": {
					"type": "array",
					"position": 20,
					"description": "A list of additional attributes that can be returned by the password credential validator. The extended attributes are only used if the adapter supports them.",
					"items": {
						"$ref": "#/definitions/PasswordCredentialValidatorAttribute"
					}
				},
				"inherited": {
					"type": "boolean",
					"position": 40,
					"description": "Whether this attribute contract is inherited from its parent instance. If true, the rest of the properties in this model become read-only. The default value is false."
				}
			}
		},
		"PluginConfiguration": {
			"type": "object",
			"properties": {
				"tables": {
					"type": "array",
					"position": 10,
					"description": "List of configuration tables.",
					"items": {
						"$ref": "#/definitions/ConfigTable"
					}
				},
				"fields": {
					"type": "array",
					"position": 20,
					"description": "List of configuration fields.",
					"items": {
						"$ref": "#/definitions/ConfigField"
					}
				}
			},
			"description": "Configuration settings for a plugin instance."
		},
		"PluginInstance": {
			"type": "object",
			"required": [
				"configuration",
				"id",
				"name",
				"pluginDescriptorRef"
			],
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The ID of the plugin instance. The ID cannot be modified once the instance is created.<br>Note: Ignored when specifying a connection's adapter override."
				},
				"name": {
					"type": "string",
					"position": 20,
					"description": "The plugin instance name. The name can be modified once the instance is created.<br>Note: Ignored when specifying a connection's adapter override."
				},
				"pluginDescriptorRef": {
					"position": 30,
					"description": "Reference to the plugin descriptor for this instance. The plugin descriptor cannot be modified once the instance is created.<br>Note: Ignored when specifying a connection's adapter override.",
					"$ref": "#/definitions/ResourceLink"
				},
				"parentRef": {
					"position": 40,
					"description": "The reference to this plugin's parent instance. The parent reference is only accepted if the plugin type supports parent instances.<br>Note: This parent reference is required if this plugin instance is used as an overriding plugin (e.g. connection adapter overrides)",
					"$ref": "#/definitions/ResourceLink"
				},
				"configuration": {
					"position": 50,
					"description": "Plugin instance configuration.",
					"$ref": "#/definitions/PluginConfiguration"
				}
			},
			"description": "A plugin instance."
		},
		"ResourceLink": {
			"type": "object",
			"required": [
				"id"
			],
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The ID of the resource."
				},
				"location": {
					"type": "string",
					"position": 20,
					"description": "A read-only URL that references the resource. If the resource is not currently URL-accessible, this property will be null."
				}
			},
			"description": "A reference to a resource."
		},
		"SecretManager": {
			"allOf": [
				{
					"$ref": "#/definitions/PluginInstance"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "A secret manager plugin instance."
				}
			]
		},
		"SessionValidationSettings": {
			"type": "object",
			"properties": {
				"inherited": {
					"type": "boolean",
					"position": 10,
					"description": "If this token manager has a parent, this flag determines whether session validation settings, such as checkValidAuthnSession, are inherited from the parent. When set to true, the other fields in this model become read-only. The default value is false."
				},
				"includeSessionId": {
					"type": "boolean",
					"position": 20,
					"description": "Include the session identifier in the access token. Note that if any of the session validation features is enabled, the session identifier will already be included in the access tokens."
				},
				"checkValidAuthnSession": {
					"type": "boolean",
					"position": 30,
					"description": "Check for a valid authentication session when validating the access token."
				},
				"checkSessionRevocationStatus": {
					"type": "boolean",
					"position": 40,
					"description": "Check the session revocation status when validating the access token."
				},
				"updateAuthnSessionActivity": {
					"type": "boolean",
					"position": 50,
					"description": "Update authentication session activity when validating the access token."
				}
			},
			"description": "Session validation settings for an access token management plugin instance."
		},
		"SourceTypeIdKey": {
			"type": "object",
			"required": [
				"type"
			],
			"properties": {
				"type": {
					"type": "string",
					"position": 10,
					"description": "The source type of this key.",
					"enum": [
						"TOKEN_EXCHANGE_PROCESSOR_POLICY",
						"ACCOUNT_LINK",
						"ADAPTER",
						"ASSERTION",
						"CONTEXT",
						"CUSTOM_DATA_STORE",
						"EXPRESSION",
						"JDBC_DATA_STORE",
						"LDAP_DATA_STORE",
						"PING_ONE_LDAP_GATEWAY_DATA_STORE",
						"MAPPED_ATTRIBUTES",
						"NO_MAPPING",
						"TEXT",
						"TOKEN",
						"REQUEST",
						"OAUTH_PERSISTENT_GRANT",
						"SUBJECT_TOKEN",
						"ACTOR_TOKEN",
						"PASSWORD_CREDENTIAL_VALIDATOR",
						"IDP_CONNECTION",
						"AUTHENTICATION_POLICY_CONTRACT",
						"CLAIMS",
						"LOCAL_IDENTITY_PROFILE",
						"EXTENDED_CLIENT_METADATA",
						"EXTENDED_PROPERTIES",
						"TRACKED_HTTP_PARAMS",
						"FRAGMENT",
						"INPUTS",
						"ATTRIBUTE_QUERY",
						"IDENTITY_STORE_USER",
						"IDENTITY_STORE_GROUP",
						"SCIM_USER",
						"SCIM_GROUP"
					]
				},
				"id": {
					"type": "string",
					"position": 20,
					"description": "The attribute source ID that refers to the attribute source that this key references. In some resources, the ID is optional and will be ignored. In these cases the ID should be omitted. If the source type is not an attribute source then the ID can be omitted."
				}
			},
			"description": "A key that is meant to reference a source from which an attribute can be retrieved. This model is usually paired with a value which, depending on the SourceType, can be a hardcoded value or a reference to an attribute name specific to that SourceType. Not all values are applicable - a validation error will be returned for incorrect values.<br>For each SourceType, the value should be:<br>ACCOUNT_LINK - If account linking was enabled for the browser SSO, the value must be 'Local User ID', unless it has been overridden in PingFederate's server configuration.<br>ADAPTER - The value is one of the attributes of the IdP Adapter.<br>ASSERTION - The value is one of the attributes coming from the SAML assertion.<br>AUTHENTICATION_POLICY_CONTRACT - The value is one of the attributes coming from an authentication policy contract.<br>LOCAL_IDENTITY_PROFILE - The value is one of the fields coming from a local identity profile.<br>CONTEXT - The value must be one of the following ['TargetResource' or 'OAuthScopes' or 'ClientId' or 'AuthenticationCtx' or 'ClientIp' or 'Locale' or 'StsBasicAuthUsername' or 'StsSSLClientCertSubjectDN' or 'StsSSLClientCertChain' or 'VirtualServerId' or 'AuthenticatingAuthority' or 'DefaultPersistentGrantLifetime'.]<br>CLAIMS - Attributes provided by the OIDC Provider.<br>CUSTOM_DATA_STORE - The value is one of the attributes returned by this custom data store.<br>EXPRESSION - The value is an OGNL expression.<br>EXTENDED_CLIENT_METADATA - The value is from an OAuth extended client metadata parameter. This source type is deprecated and has been replaced by EXTENDED_PROPERTIES.<br>EXTENDED_PROPERTIES - The value is from an OAuth Client's extended property.<br>IDP_CONNECTION - The value is one of the attributes passed in by the IdP connection.<br>JDBC_DATA_STORE - The value is one of the column names returned from the JDBC attribute source.<br>LDAP_DATA_STORE - The value is one of the LDAP attributes supported by your LDAP data store.<br>MAPPED_ATTRIBUTES - The value is the name of one of the mapped attributes that is defined in the associated attribute mapping.<br>OAUTH_PERSISTENT_GRANT - The value is one of the attributes from the persistent grant.<br>PASSWORD_CREDENTIAL_VALIDATOR - The value is one of the attributes of the PCV.<br>NO_MAPPING - A placeholder value to indicate that an attribute currently has no mapped source.TEXT - A hardcoded value that is used to populate the corresponding attribute.<br>TOKEN - The value is one of the token attributes.<br>REQUEST - The value is from the request context such as the CIBA identity hint contract or the request contract for Ws-Trust.<br>TRACKED_HTTP_PARAMS - The value is from the original request parameters.<br>SUBJECT_TOKEN - The value is one of the OAuth 2.0 Token exchange subject_token attributes.<br>ACTOR_TOKEN - The value is one of the OAuth 2.0 Token exchange actor_token attributes.<br>TOKEN_EXCHANGE_PROCESSOR_POLICY - The value is one of the attributes coming from a Token Exchange Processor policy.<br>FRAGMENT - The value is one of the attributes coming from an authentication policy fragment.<br>INPUTS - The value is one of the attributes coming from an attribute defined in the input authentication policy contract for an authentication policy fragment.<br>ATTRIBUTE_QUERY - The value is one of the user attributes queried from an Attribute Authority.<br>IDENTITY_STORE_USER - The value is one of the attributes from a user identity store provisioner for SCIM processing.<br>IDENTITY_STORE_GROUP - The value is one of the attributes from a group identity store provisioner for SCIM processing.<br>SCIM_USER - The value is one of the attributes passed in from the SCIM user request.<br>SCIM_GROUP - The value is one of the attributes passed in from the SCIM group request.<br>"
		},
		"SpAdapter": {
			"allOf": [
				{
					"$ref": "#/definitions/PluginInstance"
				},
				{
					"type": "object",
					"properties": {
						"attributeContract": {
							"position": 1000,
							"description": "The list of attributes that the SP adapter provides.",
							"$ref": "#/definitions/SpAdapterAttributeContract"
						},
						"targetApplicationInfo": {
							"position": 2000,
							"description": "The target application's name and icon URL",
							"$ref": "#/definitions/SpAdapterTargetApplicationInfo"
						}
					},
					"description": "An SP adapter instance."
				}
			]
		},
		"SpAdapterAttribute": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of this attribute."
				}
			},
			"description": "An attribute for the SP adapter attribute contract."
		},
		"SpAdapterAttributeContract": {
			"type": "object",
			"properties": {
				"coreAttributes": {
					"type": "array",
					"position": 10,
					"description": "A list of read-only attributes that are automatically populated by the SP adapter descriptor.",
					"items": {
						"$ref": "#/definitions/SpAdapterAttribute"
					}
				},
				"extendedAttributes": {
					"type": "array",
					"position": 20,
					"description": "A list of additional attributes that can be returned by the SP adapter. The extended attributes are only used if the adapter supports them.",
					"items": {
						"$ref": "#/definitions/SpAdapterAttribute"
					}
				},
				"inherited": {
					"type": "boolean",
					"position": 40,
					"description": "Whether this attribute contract is inherited from its parent instance. If true, the rest of the properties in this model become read-only. The default value is false."
				}
			},
			"description": "A set of attributes exposed by an SP adapter."
		},
		"SpAdapterTargetApplicationInfo": {
			"type": "object",
			"properties": {
				"applicationName": {
					"type": "string",
					"position": 10,
					"description": "The application name."
				},
				"applicationIconUrl": {
					"type": "string",
					"position": 20,
					"description": "The application icon URL."
				},
				"inherited": {
					"type": "boolean",
					"position": 99,
					"description": "Specifies Whether target application information is inherited from its parent instance. If true, the rest of the properties in this model become read-only. The default value is false."
				}
			},
			"description": "Target Application Information exposed by an SP adapter."
		},
		"TokenGenerator": {
			"allOf": [
				{
					"$ref": "#/definitions/PluginInstance"
				},
				{
					"type": "object",
					"properties": {
						"attributeContract": {
							"position": 60,
							"description": "The list of attributes that the token generator provides.",
							"$ref": "#/definitions/TokenGeneratorAttributeContract"
						}
					},
					"description": "A token generator instance."
				}
			]
		},
		"TokenGeneratorAttribute": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of this attribute."
				}
			},
			"description": "An attribute for the token generator attribute contract."
		},
		"TokenGeneratorAttributeContract": {
			"type": "object",
			"required": [
				"coreAttributes"
			],
			"properties": {
				"coreAttributes": {
					"type": "array",
					"position": 10,
					"description": "A list of token generator attributes that correspond to the attributes exposed by the token generator type.",
					"items": {
						"$ref": "#/definitions/TokenGeneratorAttribute"
					}
				},
				"extendedAttributes": {
					"type": "array",
					"position": 20,
					"description": "A list of additional attributes that can be returned by the token processor. The extended attributes are only used if the token generator supports them.",
					"items": {
						"$ref": "#/definitions/TokenGeneratorAttribute"
					}
				},
				"inherited": {
					"type": "boolean",
					"position": 30,
					"description": "Whether this attribute contract is inherited from its parent instance. If true, the rest of the properties in this model become read-only. The default value is false."
				}
			},
			"description": "A set of attributes exposed by a token generator."
		},
		"TokenProcessor": {
			"allOf": [
				{
					"$ref": "#/definitions/PluginInstance"
				},
				{
					"type": "object",
					"properties": {
						"attributeContract": {
							"position": 5,
							"description": "The list of attributes that the token processor provides.",
							"$ref": "#/definitions/TokenProcessorAttributeContract"
						}
					},
					"description": "A token processor instance."
				}
			]
		},
		"TokenProcessorAttribute": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of this attribute."
				},
				"masked": {
					"type": "boolean",
					"position": 1000,
					"description": "Specifies whether this attribute is masked in PingFederate logs. Defaults to false."
				}
			},
			"description": "An attribute for the token processor attribute contract."
		},
		"TokenProcessorAttributeContract": {
			"type": "object",
			"required": [
				"coreAttributes"
			],
			"properties": {
				"coreAttributes": {
					"type": "array",
					"position": 10,
					"description": "A list of token processor attributes that correspond to the attributes exposed by the token processor type.",
					"items": {
						"$ref": "#/definitions/TokenProcessorAttribute"
					}
				},
				"extendedAttributes": {
					"type": "array",
					"position": 20,
					"description": "A list of additional attributes that can be returned by the token processor. The extended attributes are only used if the token processor supports them.",
					"items": {
						"$ref": "#/definitions/TokenProcessorAttribute"
					}
				},
				"maskOgnlValues": {
					"type": "boolean",
					"position": 30,
					"description": "Whether or not all OGNL expressions used to fulfill an outgoing assertion contract should be masked in the logs. Defaults to false."
				},
				"inherited": {
					"type": "boolean",
					"position": 40,
					"description": "Whether this attribute contract is inherited from its parent instance. If true, the rest of the properties in this model become read-only. The default value is false."
				}
			},
			"description": "A set of attributes exposed by a token processor."
		},
		"ApiResult": {
			"type": "object",
			"properties": {
				"resultId": {
					"type": "string",
					"position": 10,
					"description": "Result identifier."
				},
				"message": {
					"type": "string",
					"position": 20,
					"description": "Success or error message."
				},
				"developerMessage": {
					"type": "string",
					"position": 30,
					"description": "Developer-oriented error message, if available."
				},
				"validationErrors": {
					"type": "array",
					"position": 40,
					"description": "List of validation errors, if any.",
					"items": {
						"$ref": "#/definitions/ValidationError"
					}
				}
			},
			"description": "Details on the result of the operation."
		},
		"ValidationError": {
			"type": "object",
			"properties": {
				"errorId": {
					"type": "string",
					"position": 10,
					"description": "Error identifier."
				},
				"message": {
					"type": "string",
					"position": 20,
					"description": "User-friendly error description."
				},
				"developerMessage": {
					"type": "string",
					"position": 30,
					"description": "Developer-oriented error message, if available."
				},
				"fieldPath": {
					"type": "string",
					"position": 40,
					"description": "The path to the model field to which the error relates, if one exists."
				}
			},
			"description": "A data input validation error."
		},
		"AccessTokenManagerDescriptor": {
			"allOf": [
				{
					"$ref": "#/definitions/PluginDescriptor"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "An OAuth access token management plugin descriptor."
				}
			]
		},
		"AccessTokenManagerDescriptors": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of OAuth access token management plugin descriptors.",
					"items": {
						"$ref": "#/definitions/AccessTokenManagerDescriptor"
					}
				}
			},
			"description": "A collection of OAuth access token management plugin descriptors."
		},
		"ActionDescriptor": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of this action"
				},
				"description": {
					"type": "string",
					"position": 20,
					"description": "The description of this action"
				},
				"download": {
					"type": "boolean",
					"position": 30,
					"description": "Whether this action will trigger a download or invoke an internal action that will return a string result."
				},
				"downloadContentType": {
					"type": "string",
					"position": 40,
					"description": "If this is a download, this is the Content-Type of the downloaded file. Otherwise, this is null."
				},
				"downloadFileName": {
					"type": "string",
					"position": 50,
					"description": "If this is a download, this is the suggested file name of the downloaded file. Otherwise, this is null."
				},
				"parameters": {
					"type": "array",
					"position": 60,
					"description": "List of parameters for this action.",
					"items": {
						"$ref": "#/definitions/FieldDescriptor"
					}
				}
			},
			"description": "Describes an arbitrary action that is available for a plugin."
		},
		"AuthenticationSelectorDescriptor": {
			"allOf": [
				{
					"$ref": "#/definitions/PluginDescriptor"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "An Authentication Selector descriptor."
				}
			]
		},
		"AuthorizationDetailProcessorDescriptor": {
			"allOf": [
				{
					"$ref": "#/definitions/PluginDescriptor"
				},
				{
					"type": "object",
					"properties": {
						"supportedAuthorizationDetailTypes": {
							"type": "array",
							"position": 70,
							"description": "The supported authorization detail types supported by this authorization detail processor plugin type. The default set is populated with 'ALL_AUTHORIZATION_DETAIL_TYPES' denoting that the plugin supports all authorization detail types.",
							"uniqueItems": true,
							"items": {
								"type": "string"
							}
						}
					},
					"description": "An authorization detail processor plugin descriptor."
				}
			]
		},
		"BaseSelectionFieldDescriptor": {
			"allOf": [
				{
					"$ref": "#/definitions/FieldDescriptor"
				},
				{
					"type": "object",
					"properties": {
						"optionValues": {
							"type": "array",
							"position": 100,
							"description": "The list of option values for this selection field.",
							"items": {
								"$ref": "#/definitions/OptionValue"
							}
						}
					},
					"description": "Holds fields that are shared by all selection-type field descriptors."
				}
			]
		},
		"CheckBoxFieldDescriptor": {
			"allOf": [
				{
					"$ref": "#/definitions/FieldDescriptor"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "A boolean field typically rendered as a checkbox in a configuration UI."
				}
			]
		},
		"ClientRegistrationPolicyDescriptor": {
			"allOf": [
				{
					"$ref": "#/definitions/PluginDescriptor"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "A client registration policy plugin descriptor."
				}
			]
		},
		"CustomDataStoreDescriptor": {
			"allOf": [
				{
					"$ref": "#/definitions/PluginDescriptor"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "A custom data store descriptor."
				}
			]
		},
		"FieldDescriptor": {
			"type": "object",
			"discriminator": "type",
			"properties": {
				"type": {
					"type": "string",
					"position": 10,
					"description": "The type of field descriptor.",
					"enum": [
						"RADIO_GROUP",
						"SELECT",
						"FILTERABLE_SELECT",
						"CHECK_BOX",
						"TEXT_AREA",
						"TEXT",
						"UPLOAD_FILE",
						"HASHED_TEXT"
					]
				},
				"name": {
					"type": "string",
					"position": 20,
					"description": "Name of the field."
				},
				"description": {
					"type": "string",
					"position": 30,
					"description": "Description of the field."
				},
				"defaultValue": {
					"type": "string",
					"position": 40,
					"description": "Default value of the field. This is the value pre-populated in the UI on new plugin instance configuration. This is also the value used to populate the field if it is missing in a POST or PUT request and no 'defaultForLegacyConfig' is defined."
				},
				"defaultForLegacyConfig": {
					"type": "string",
					"position": 45,
					"description": "Default value of the field when it is missing from the configuration (e.g. in upgrade scenarios). This is the value pre-populated in the UI for existing plugin configurations without values for the field. This is also the value used to populate the field if it is missing in a POST or PUT request. If 'defaultForLegacyConfig' is not defined, PingFederate will fall back to applying the 'defaultValue' to the field."
				},
				"advanced": {
					"type": "boolean",
					"position": 50,
					"description": "Whether this is an advanced field or not."
				},
				"required": {
					"type": "boolean",
					"position": 60,
					"description": "Whether a value is required for this field or not."
				},
				"label": {
					"type": "string",
					"position": 70,
					"description": "Label of the field to be displayed in the administrative console."
				}
			},
			"description": "Describes a plugin configuration field."
		},
		"HashedTextFieldDescriptor": {
			"allOf": [
				{
					"$ref": "#/definitions/FieldDescriptor"
				},
				{
					"type": "object",
					"properties": {
						"size": {
							"type": "integer",
							"format": "int32",
							"position": 100,
							"description": "The size of the text field."
						}
					},
					"description": "A text field that will contain a secure salted hash."
				}
			]
		},
		"IdpAdapterDescriptor": {
			"allOf": [
				{
					"$ref": "#/definitions/PluginDescriptor"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "An IdP adapter descriptor."
				}
			]
		},
		"NotificationPublisherDescriptor": {
			"allOf": [
				{
					"$ref": "#/definitions/PluginDescriptor"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "A notification publisher plugin descriptor."
				}
			]
		},
		"OptionValue": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of the option."
				},
				"value": {
					"type": "string",
					"position": 20,
					"description": "The value associated with this option."
				}
			},
			"description": "An option name and value associated with a selection field."
		},
		"OutOfBandAuthPluginDescriptor": {
			"allOf": [
				{
					"$ref": "#/definitions/PluginDescriptor"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "An out of band authenticator plugin descriptor."
				}
			]
		},
		"PasswordCredentialValidatorDescriptor": {
			"allOf": [
				{
					"$ref": "#/definitions/PluginDescriptor"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "A password credential validator descriptor."
				}
			]
		},
		"PluginConfigDescriptor": {
			"type": "object",
			"properties": {
				"description": {
					"type": "string",
					"position": 10,
					"description": "The description of this plugin."
				},
				"fields": {
					"type": "array",
					"position": 20,
					"description": "The configuration fields available for this plugin.",
					"items": {
						"$ref": "#/definitions/FieldDescriptor"
					}
				},
				"tables": {
					"type": "array",
					"position": 40,
					"description": "Configuration tables available for this plugin.",
					"items": {
						"$ref": "#/definitions/TableDescriptor"
					}
				},
				"actionDescriptors": {
					"type": "array",
					"position": 50,
					"description": "The available actions for this plugin.",
					"items": {
						"$ref": "#/definitions/ActionDescriptor"
					}
				}
			},
			"description": "Defines the configuration fields available for a plugin."
		},
		"PluginDescriptor": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "Unique ID of the plugin."
				},
				"name": {
					"type": "string",
					"position": 20,
					"description": "Friendly name for the plugin."
				},
				"className": {
					"type": "string",
					"position": 30,
					"description": "Full class name of the class that implements this plugin."
				},
				"attributeContract": {
					"type": "array",
					"position": 40,
					"description": "The attribute contract for this plugin.",
					"items": {
						"type": "string"
					}
				},
				"supportsExtendedContract": {
					"type": "boolean",
					"position": 50,
					"description": "Determines whether this plugin supports extending the attribute contract."
				},
				"configDescriptor": {
					"position": 60,
					"description": "The descriptor which defines the configuration fields available for this plugin.",
					"$ref": "#/definitions/PluginConfigDescriptor"
				}
			},
			"description": "Defines a plugin type, including available configuration parameters."
		},
		"RadioGroupFieldDescriptor": {
			"allOf": [
				{
					"$ref": "#/definitions/BaseSelectionFieldDescriptor"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "A selection-type field intended to be rendered as a group of radio buttons in a UI."
				}
			]
		},
		"SecretManagerDescriptor": {
			"allOf": [
				{
					"$ref": "#/definitions/PluginDescriptor"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "A secret manager plugin descriptor."
				}
			]
		},
		"SelectFieldDescriptor": {
			"allOf": [
				{
					"$ref": "#/definitions/BaseSelectionFieldDescriptor"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "A selection field that is intended to be rendered as a dropdown list of options."
				}
			]
		},
		"SpAdapterDescriptor": {
			"allOf": [
				{
					"$ref": "#/definitions/PluginDescriptor"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "An SP adapter descriptor."
				}
			]
		},
		"TableDescriptor": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of the table."
				},
				"description": {
					"type": "string",
					"position": 20,
					"description": "Description for the table."
				},
				"columns": {
					"type": "array",
					"position": 30,
					"description": "Get the columns in the table.",
					"items": {
						"$ref": "#/definitions/FieldDescriptor"
					}
				},
				"label": {
					"type": "string",
					"position": 40,
					"description": "Label for the table to be displayed in the administrative console."
				},
				"requireDefaultRow": {
					"type": "boolean",
					"position": 50,
					"description": "Configure whether this table requires default row to be set."
				}
			},
			"description": "Defines a plugin configuration table."
		},
		"TextAreaFieldDescriptor": {
			"allOf": [
				{
					"$ref": "#/definitions/FieldDescriptor"
				},
				{
					"type": "object",
					"properties": {
						"rows": {
							"type": "integer",
							"format": "int32",
							"position": 100,
							"description": "The number of rows for the text box."
						},
						"columns": {
							"type": "integer",
							"format": "int32",
							"position": 110,
							"description": "The number of columns for the text box."
						}
					},
					"description": "A field intended to be rendered as a text box in a UI."
				}
			]
		},
		"TextFieldDescriptor": {
			"allOf": [
				{
					"$ref": "#/definitions/FieldDescriptor"
				},
				{
					"type": "object",
					"properties": {
						"encrypted": {
							"type": "boolean",
							"position": 100,
							"description": "Determines whether the field value should be masked in the UI and encrypted on disk."
						},
						"size": {
							"type": "integer",
							"format": "int32",
							"position": 110,
							"description": "The size of the text field."
						}
					},
					"description": "A text field."
				}
			]
		},
		"TokenGeneratorDescriptor": {
			"allOf": [
				{
					"$ref": "#/definitions/PluginDescriptor"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "A token generator descriptor."
				}
			]
		},
		"TokenProcessorDescriptor": {
			"allOf": [
				{
					"$ref": "#/definitions/PluginDescriptor"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "A token processor descriptor."
				}
			]
		},
		"UploadFileFieldDescriptor": {
			"allOf": [
				{
					"$ref": "#/definitions/FieldDescriptor"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "A field which allows the user to upload a file."
				}
			]
		},
		"AccessTokenManagementSettings": {
			"type": "object",
			"properties": {
				"defaultAccessTokenManagerRef": {
					"position": 10,
					"description": "Reference to the default access token manager, if one is defined.",
					"$ref": "#/definitions/ResourceLink"
				}
			},
			"description": "General access token management settings."
		},
		"AccessTokenManagers": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of OAuth access token management plugin instances.",
					"items": {
						"$ref": "#/definitions/AccessTokenManager"
					}
				}
			},
			"description": "A collection of OAuth access token management plugin instances."
		},
		"AccessTokenMapping": {
			"type": "object",
			"required": [
				"accessTokenManagerRef",
				"attributeContractFulfillment",
				"context",
				"id"
			],
			"properties": {
				"id": {
					"type": "string",
					"position": 5,
					"description": "The id of the Access Token Mapping."
				},
				"context": {
					"position": 6,
					"description": "The context of the Access Token Mapping. This property cannot be changed after the mapping is created.",
					"$ref": "#/definitions/AccessTokenMappingContext"
				},
				"accessTokenManagerRef": {
					"position": 8,
					"description": "Reference to the access token manager this mapping is associated with. This property cannot be changed after the mapping is created.",
					"$ref": "#/definitions/ResourceLink"
				},
				"attributeSources": {
					"type": "array",
					"position": 10,
					"description": "A list of configured data stores to look up attributes from.",
					"items": {
						"$ref": "#/definitions/AttributeSource"
					}
				},
				"attributeContractFulfillment": {
					"type": "object",
					"position": 20,
					"description": "A list of mappings from attribute names to their fulfillment values.",
					"additionalProperties": {
						"$ref": "#/definitions/AttributeFulfillmentValue"
					}
				},
				"issuanceCriteria": {
					"position": 30,
					"description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
					"$ref": "#/definitions/IssuanceCriteria"
				}
			},
			"description": "The Access Token Attribute Mapping."
		},
		"AccessTokenMappingContext": {
			"type": "object",
			"required": [
				"contextRef",
				"type"
			],
			"properties": {
				"type": {
					"type": "string",
					"position": 10,
					"description": "The Access Token Mapping Context type.",
					"enum": [
						"DEFAULT",
						"PCV",
						"IDP_CONNECTION",
						"IDP_ADAPTER",
						"AUTHENTICATION_POLICY_CONTRACT",
						"CLIENT_CREDENTIALS",
						"TOKEN_EXCHANGE_PROCESSOR_POLICY"
					]
				},
				"contextRef": {
					"position": 20,
					"description": "Reference to the associated Access Token Mapping Context instance.",
					"$ref": "#/definitions/ResourceLink"
				}
			},
			"description": "The Access Token Attribute Mapping."
		},
		"AccessTokenMappings": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"description": "The actual list of Access Token Attribute mappings.",
					"items": {
						"$ref": "#/definitions/AccessTokenMapping"
					}
				}
			},
			"description": "A collection of Access Token Attribute Mapping items."
		},
		"AdministrativeAccount": {
			"type": "object",
			"required": [
				"username"
			],
			"properties": {
				"username": {
					"type": "string",
					"position": 10,
					"description": "Username for the Administrative Account."
				},
				"password": {
					"type": "string",
					"position": 20,
					"description": "Password for the Account. This field is only applicable during a POST operation."
				},
				"encryptedPassword": {
					"type": "string",
					"position": 25,
					"description": "For GET requests, this field contains the encrypted account password. For POST and PUT requests, if you wish to re-use the password from an API response to this endpoint, this field should be passed back unchanged."
				},
				"active": {
					"type": "boolean",
					"position": 30,
					"description": "Indicates whether the account is active or not."
				},
				"description": {
					"type": "string",
					"position": 40,
					"description": "Description of the account."
				},
				"auditor": {
					"type": "boolean",
					"position": 50,
					"description": "Indicates whether the account belongs to an Auditor. An Auditor has View-only permissions for all administrative functions. An Auditor cannot have any administrative roles."
				},
				"phoneNumber": {
					"type": "string",
					"position": 60,
					"description": "Phone number associated with the account."
				},
				"emailAddress": {
					"type": "string",
					"position": 70,
					"description": "Email address associated with the account."
				},
				"department": {
					"type": "string",
					"position": 80,
					"description": "The Department name of account user."
				},
				"roles": {
					"type": "array",
					"position": 90,
					"description": "Roles available for an administrator. <br>USER_ADMINISTRATOR - Can create, deactivate or delete accounts and reset passwords. Additionally, install replacement license keys. <br> CRYPTO_ADMINISTRATOR - Can manage local keys and certificates. <br> ADMINISTRATOR - Can configure partner connections and most system settings (except the management of native accounts and the handling of local keys and certificates. <br>EXPRESSION_ADMINISTRATOR - Can add and update OGNL expressions. <br>",
					"uniqueItems": true,
					"items": {
						"type": "string",
						"enum": [
							"USER_ADMINISTRATOR",
							"CRYPTO_ADMINISTRATOR",
							"ADMINISTRATOR",
							"EXPRESSION_ADMINISTRATOR"
						]
					}
				}
			},
			"description": "A PingFederate administrator account."
		},
		"AdministrativeAccounts": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "List of Administrative Accounts.",
					"items": {
						"$ref": "#/definitions/AdministrativeAccount"
					}
				}
			},
			"description": "PingFederate administrator accounts."
		},
		"UserCredentials": {
			"type": "object",
			"required": [
				"newPassword"
			],
			"properties": {
				"currentPassword": {
					"type": "string",
					"position": 10,
					"description": "Current password. Required only during Password Change and not applicable for Password Reset."
				},
				"newPassword": {
					"type": "string",
					"position": 20,
					"description": "A new password."
				}
			},
			"description": "Credentials for an administrator account."
		},
		"ApcToSpAdapterMapping": {
			"type": "object",
			"required": [
				"attributeContractFulfillment",
				"sourceId",
				"targetId"
			],
			"properties": {
				"attributeSources": {
					"type": "array",
					"position": 10,
					"description": "A list of configured data stores to look up attributes from.",
					"items": {
						"$ref": "#/definitions/AttributeSource"
					}
				},
				"attributeContractFulfillment": {
					"type": "object",
					"position": 20,
					"description": "A list of mappings from attribute names to their fulfillment values.",
					"additionalProperties": {
						"$ref": "#/definitions/AttributeFulfillmentValue"
					}
				},
				"issuanceCriteria": {
					"position": 30,
					"description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
					"$ref": "#/definitions/IssuanceCriteria"
				},
				"sourceId": {
					"type": "string",
					"position": 40,
					"description": "The id of the Authentication Policy Contract."
				},
				"targetId": {
					"type": "string",
					"position": 50,
					"description": "The id of the SP Adapter."
				},
				"id": {
					"type": "string",
					"position": 60,
					"description": "The id of the APC-to-SP Adapter mapping. This field is read-only and is ignored when passed in with the payload."
				},
				"defaultTargetResource": {
					"type": "string",
					"position": 70,
					"description": "Default target URL for this APC-to-adapter mapping configuration."
				},
				"licenseConnectionGroupAssignment": {
					"type": "string",
					"position": 80,
					"description": "The license connection group."
				}
			},
			"description": "The Authentication Policy Contract (APC) to SP Adapter Mapping."
		},
		"ApcToSpAdapterMappings": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of mappings.",
					"items": {
						"$ref": "#/definitions/ApcToSpAdapterMapping"
					}
				}
			},
			"description": "A collection of Authentication Policy Contract (APC) to SP Adapter Mappings."
		},
		"AuthnApiApplication": {
			"type": "object",
			"required": [
				"id",
				"name",
				"url"
			],
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The persistent, unique ID for the Authentication API application. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified."
				},
				"name": {
					"type": "string",
					"position": 20,
					"description": "The Authentication API Application Name. Name must be unique."
				},
				"url": {
					"type": "string",
					"position": 30,
					"description": "The Authentication API Application redirect URL."
				},
				"description": {
					"type": "string",
					"position": 40,
					"description": "The Authentication API Application description."
				},
				"additionalAllowedOrigins": {
					"type": "array",
					"position": 50,
					"description": "The domain in the redirect URL is always whitelisted. This field contains a list of additional allowed origin URL's for cross-origin resource sharing.",
					"items": {
						"type": "string"
					}
				},
				"clientForRedirectlessModeRef": {
					"position": 60,
					"description": "The client this application must use if it invokes the authentication API in redirectless mode. No client may be specified if restrictAccessToRedirectlessMode is false under /authenticationApi/settings.",
					"$ref": "#/definitions/ResourceLink"
				}
			},
			"description": "Authentication API Application."
		},
		"AuthnApiSettings": {
			"type": "object",
			"properties": {
				"apiEnabled": {
					"type": "boolean",
					"position": 10,
					"description": "Specifies whether the authentication API is enabled. The default value is false."
				},
				"defaultApplicationRef": {
					"position": 20,
					"description": "Application for non authentication policy use cases.",
					"$ref": "#/definitions/ResourceLink"
				},
				"enableApiDescriptions": {
					"type": "boolean",
					"position": 30,
					"description": "Enable the API Descriptions endpoint."
				},
				"restrictAccessToRedirectlessMode": {
					"type": "boolean",
					"position": 40,
					"description": "Determines whether access to the authentication API redirectless mode is restricted to specified applications."
				},
				"includeRequestContext": {
					"type": "boolean",
					"position": 50,
					"description": "Determines whether the request context parameters are included in response for authentication API. The default value is false."
				}
			},
			"description": "Authentication API Application Settings."
		},
		"AuthnApiApplications": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"description": "The actual list of Authentication API Applications.",
					"items": {
						"$ref": "#/definitions/AuthnApiApplication"
					}
				}
			},
			"description": "A collection of Authentication API Application items."
		},
		"ApcMappingPolicyAction": {
			"allOf": [
				{
					"$ref": "#/definitions/PolicyAction"
				},
				{
					"type": "object",
					"required": [
						"attributeMapping",
						"authenticationPolicyContractRef"
					],
					"properties": {
						"authenticationPolicyContractRef": {
							"position": 30,
							"description": "Reference to the associated authentication policy contract.",
							"$ref": "#/definitions/ResourceLink"
						},
						"attributeMapping": {
							"position": 40,
							"description": "Contract fulfillment with the authentication policy contract's default values, and additional attributes retrieved from local data stores.",
							"$ref": "#/definitions/AttributeMapping"
						}
					},
					"description": "An authentication policy contract selection action."
				}
			]
		},
		"AttributeMapping": {
			"type": "object",
			"required": [
				"attributeContractFulfillment"
			],
			"properties": {
				"attributeSources": {
					"type": "array",
					"position": 10,
					"description": "A list of configured data stores to look up attributes from.",
					"items": {
						"$ref": "#/definitions/AttributeSource"
					}
				},
				"attributeContractFulfillment": {
					"type": "object",
					"position": 20,
					"description": "A list of mappings from attribute names to their fulfillment values.",
					"additionalProperties": {
						"$ref": "#/definitions/AttributeFulfillmentValue"
					}
				},
				"issuanceCriteria": {
					"position": 30,
					"description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
					"$ref": "#/definitions/IssuanceCriteria"
				}
			},
			"description": "A list of mappings from attribute sources to attribute targets."
		},
		"AttributeRule": {
			"type": "object",
			"required": [
				"attributeName",
				"condition",
				"expectedValue",
				"result"
			],
			"properties": {
				"attributeSource": {
					"position": 5,
					"description": "The source of the attribute, if the attribute source is not provided then it is defaulted to be the previous authentication source.",
					"$ref": "#/definitions/SourceTypeIdKey"
				},
				"attributeName": {
					"type": "string",
					"position": 10,
					"description": "The name of the attribute to use in this attribute rule."
				},
				"condition": {
					"type": "string",
					"position": 20,
					"description": "The condition that will be applied to the attribute's expected value.",
					"enum": [
						"EQUALS",
						"EQUALS_CASE_INSENSITIVE",
						"EQUALS_DN",
						"NOT_EQUAL",
						"NOT_EQUAL_CASE_INSENSITIVE",
						"NOT_EQUAL_DN",
						"MULTIVALUE_CONTAINS",
						"MULTIVALUE_CONTAINS_CASE_INSENSITIVE",
						"MULTIVALUE_CONTAINS_DN",
						"MULTIVALUE_DOES_NOT_CONTAIN",
						"MULTIVALUE_DOES_NOT_CONTAIN_CASE_INSENSITIVE",
						"MULTIVALUE_DOES_NOT_CONTAIN_DN"
					]
				},
				"expectedValue": {
					"type": "string",
					"position": 30,
					"description": "The expected value of this attribute rule."
				},
				"result": {
					"type": "string",
					"position": 40,
					"description": "The result of this attribute rule."
				}
			},
			"description": "Authentication policy rules using attributes from the previous authentication source. Each rule is evaluated to determine the next action in the policy."
		},
		"AttributeRules": {
			"type": "object",
			"properties": {
				"fallbackToSuccess": {
					"type": "boolean",
					"position": 10,
					"description": "When all the rules fail, you may choose to default to the general success action or fail. Default to success."
				},
				"items": {
					"type": "array",
					"position": 20,
					"description": "The actual list of attribute rules.",
					"items": {
						"$ref": "#/definitions/AttributeRule"
					}
				}
			},
			"description": "A collection of attribute rules"
		},
		"AuthenticationPolicyFragment": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The authentication policy fragment ID. ID is unique."
				},
				"name": {
					"type": "string",
					"position": 20,
					"description": "The authentication policy fragment name. Name is unique."
				},
				"description": {
					"type": "string",
					"position": 30,
					"description": "A description for the authentication policy fragment."
				},
				"rootNode": {
					"position": 40,
					"description": "The beginning action for the authentication fragment policy.",
					"$ref": "#/definitions/AuthenticationPolicyTreeNode"
				},
				"inputs": {
					"position": 50,
					"description": "The reference to the authentication policy contract to use as the attribute inputs for this authentication policy fragment.",
					"$ref": "#/definitions/ResourceLink"
				},
				"outputs": {
					"position": 60,
					"description": "The reference to the authentication policy contract to use as the attribute outputs for this authentication policy fragment.",
					"$ref": "#/definitions/ResourceLink"
				}
			},
			"description": "An authentication policy fragment."
		},
		"AuthenticationPolicyTreeNode": {
			"type": "object",
			"required": [
				"action"
			],
			"properties": {
				"action": {
					"position": 10,
					"description": "The result action.",
					"$ref": "#/definitions/PolicyAction"
				},
				"children": {
					"type": "array",
					"position": 20,
					"description": "The nodes inside the authentication policy tree node of type AuthenticationPolicyTreeNode.",
					"items": {
						"$ref": "#/definitions/AuthenticationPolicyTreeNode"
					}
				}
			},
			"description": "An authentication policy tree node."
		},
		"AuthenticationSource": {
			"type": "object",
			"required": [
				"sourceRef",
				"type"
			],
			"properties": {
				"type": {
					"type": "string",
					"position": 10,
					"description": "The type of this authentication source.",
					"enum": [
						"IDP_ADAPTER",
						"IDP_CONNECTION"
					]
				},
				"sourceRef": {
					"position": 20,
					"description": "A reference to the authentication source.",
					"$ref": "#/definitions/ResourceLink"
				}
			},
			"description": "An authentication source (IdP adapter or IdP connection)."
		},
		"AuthnSelectorPolicyAction": {
			"allOf": [
				{
					"$ref": "#/definitions/PolicyAction"
				},
				{
					"type": "object",
					"required": [
						"authenticationSelectorRef"
					],
					"properties": {
						"authenticationSelectorRef": {
							"position": 30,
							"description": "Reference to the associated authentication selector.",
							"$ref": "#/definitions/ResourceLink"
						}
					},
					"description": "An authentication selector selection action."
				}
			]
		},
		"AuthnSourcePolicyAction": {
			"allOf": [
				{
					"$ref": "#/definitions/PolicyAction"
				},
				{
					"type": "object",
					"required": [
						"authenticationSource"
					],
					"properties": {
						"attributeRules": {
							"description": "The authentication policy rules.",
							"$ref": "#/definitions/AttributeRules"
						},
						"authenticationSource": {
							"position": 30,
							"description": "The associated authentication source.",
							"$ref": "#/definitions/AuthenticationSource"
						},
						"inputUserIdMapping": {
							"position": 40,
							"description": "The input user ID mapping.",
							"$ref": "#/definitions/AttributeFulfillmentValue"
						},
						"userIdAuthenticated": {
							"type": "boolean",
							"position": 50,
							"description": "Indicates whether the user ID obtained by the user ID mapping is authenticated."
						}
					},
					"description": "An authentication source selection action."
				}
			]
		},
		"ContinuePolicyAction": {
			"allOf": [
				{
					"$ref": "#/definitions/PolicyAction"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "The continue selection action."
				}
			]
		},
		"DonePolicyAction": {
			"allOf": [
				{
					"$ref": "#/definitions/PolicyAction"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "The done selection action."
				}
			]
		},
		"FragmentPolicyAction": {
			"allOf": [
				{
					"$ref": "#/definitions/PolicyAction"
				},
				{
					"type": "object",
					"required": [
						"fragment"
					],
					"properties": {
						"attributeRules": {
							"description": "The authentication policy rules.",
							"$ref": "#/definitions/AttributeRules"
						},
						"fragment": {
							"position": 30,
							"description": "Reference to the associated authentication fragment.",
							"$ref": "#/definitions/ResourceLink"
						},
						"fragmentMapping": {
							"position": 40,
							"description": "The fragment mapping for attributes to be passed into the authentication fragment.",
							"$ref": "#/definitions/AttributeMapping"
						}
					},
					"description": "A authentication policy fragment selection action."
				}
			]
		},
		"LocalIdentityMappingPolicyAction": {
			"allOf": [
				{
					"$ref": "#/definitions/PolicyAction"
				},
				{
					"type": "object",
					"required": [
						"localIdentityRef",
						"outboundAttributeMapping"
					],
					"properties": {
						"localIdentityRef": {
							"position": 30,
							"description": "Reference to the associated local identity profile.",
							"$ref": "#/definitions/ResourceLink"
						},
						"inboundMapping": {
							"position": 40,
							"description": "Inbound mappings into the local identity profile fields.",
							"$ref": "#/definitions/AttributeMapping"
						},
						"outboundAttributeMapping": {
							"position": 50,
							"description": "Authentication policy contract mappings associated with this local Identity profile.",
							"$ref": "#/definitions/AttributeMapping"
						}
					},
					"description": "A local identity profile selection action."
				}
			]
		},
		"PolicyAction": {
			"type": "object",
			"required": [
				"type"
			],
			"discriminator": "type",
			"properties": {
				"type": {
					"type": "string",
					"position": 20,
					"description": "The authentication selection type.",
					"enum": [
						"APC_MAPPING",
						"LOCAL_IDENTITY_MAPPING",
						"AUTHN_SELECTOR",
						"AUTHN_SOURCE",
						"DONE",
						"CONTINUE",
						"RESTART",
						"FRAGMENT"
					]
				},
				"context": {
					"type": "string",
					"position": 30,
					"description": "The result context."
				}
			},
			"description": "An authentication policy selection action."
		},
		"RestartPolicyAction": {
			"allOf": [
				{
					"$ref": "#/definitions/PolicyAction"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "The restart selection action."
				}
			]
		},
		"AuthenticationPolicyTree": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The authentication policy ID. ID is unique."
				},
				"name": {
					"type": "string",
					"position": 20,
					"description": "The authentication policy name. Name is unique."
				},
				"description": {
					"type": "string",
					"position": 30,
					"description": "A description for the authentication policy."
				},
				"authenticationApiApplicationRef": {
					"position": 31,
					"description": "Authentication API Application Id to be used in this policy branch. If the value is not specified, no Authentication API Application will be used.",
					"$ref": "#/definitions/ResourceLink"
				},
				"enabled": {
					"type": "boolean",
					"position": 40,
					"description": "Whether or not this authentication policy tree is enabled. Default is true."
				},
				"rootNode": {
					"position": 50,
					"description": "A node inside the authentication policy tree.",
					"$ref": "#/definitions/AuthenticationPolicyTreeNode"
				},
				"handleFailuresLocally": {
					"type": "boolean",
					"position": 60,
					"description": "If a policy ends in failure keep the user local."
				}
			},
			"description": "An authentication policy tree."
		},
		"AuthenticationPolicyFragments": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of Authentication Policy Fragments.",
					"items": {
						"$ref": "#/definitions/AuthenticationPolicyFragment"
					}
				}
			},
			"description": "A collection of Authentication Policy Fragments"
		},
		"AuthenticationPoliciesSettings": {
			"type": "object",
			"properties": {
				"enableIdpAuthnSelection": {
					"type": "boolean",
					"position": 10,
					"description": "Enable IdP authentication policies."
				},
				"enableSpAuthnSelection": {
					"type": "boolean",
					"position": 20,
					"description": "Enable SP authentication policies."
				}
			},
			"description": "The settings for the authentication policies."
		},
		"AuthenticationPolicy": {
			"type": "object",
			"properties": {
				"failIfNoSelection": {
					"type": "boolean",
					"position": 30,
					"description": "Fail if policy finds no authentication source."
				},
				"authnSelectionTrees": {
					"type": "array",
					"position": 40,
					"description": "The list of authentication policy trees.",
					"items": {
						"$ref": "#/definitions/AuthenticationPolicyTree"
					}
				},
				"defaultAuthenticationSources": {
					"type": "array",
					"position": 50,
					"description": "The default authentication sources.",
					"items": {
						"$ref": "#/definitions/AuthenticationSource"
					}
				},
				"trackedHttpParameters": {
					"type": "array",
					"position": 70,
					"description": "The HTTP request parameters to track and make available to authentication sources, selectors, and contract mappings throughout the authentication policy.",
					"items": {
						"type": "string"
					}
				}
			},
			"description": "An authentication policy."
		},
		"MoveItemRequest": {
			"type": "object",
			"required": [
				"location"
			],
			"properties": {
				"location": {
					"type": "string",
					"position": 10,
					"description": "Enumeration for where to move the item.",
					"enum": [
						"START",
						"END",
						"BEFORE",
						"AFTER"
					]
				},
				"moveToId": {
					"type": "string",
					"position": 20,
					"description": "When moving an item relative to another, this value indicates the target move-to ID."
				}
			},
			"description": "Metadata from a request about where to move a resource"
		},
		"AuthenticationPolicyContract": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The persistent, unique ID for the authentication policy contract. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified."
				},
				"name": {
					"type": "string",
					"position": 20,
					"description": "The Authentication Policy Contract Name. Name is unique."
				},
				"coreAttributes": {
					"type": "array",
					"position": 30,
					"description": "A list of read-only assertion attributes (for example, subject) that are automatically populated by PingFederate.",
					"items": {
						"$ref": "#/definitions/AuthenticationPolicyContractAttribute"
					}
				},
				"extendedAttributes": {
					"type": "array",
					"position": 40,
					"description": "A list of additional attributes as needed.",
					"items": {
						"$ref": "#/definitions/AuthenticationPolicyContractAttribute"
					}
				}
			},
			"description": "Authentication Policy Contracts carry user attributes from the identity provider to the service provider."
		},
		"AuthenticationPolicyContractAttribute": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of this attribute."
				}
			},
			"description": "An attribute for the Authentication Policy Contract."
		},
		"AuthenticationPolicyContracts": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of Authentication Policy Contracts.",
					"items": {
						"$ref": "#/definitions/AuthenticationPolicyContract"
					}
				}
			},
			"description": "A collection of Authentication Policy Contracts"
		},
		"AuthenticationSelectors": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of Authentication Selectors.",
					"items": {
						"$ref": "#/definitions/AuthenticationSelector"
					}
				}
			},
			"description": "A collection of Authentication Selector instances."
		},
		"AuthenticationSelectorDescriptors": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of Authentication Selector descriptors.",
					"items": {
						"$ref": "#/definitions/AuthenticationSelectorDescriptor"
					}
				}
			},
			"description": "A collection of Authentication Selector descriptors."
		},
		"GlobalAuthenticationSessionPolicy": {
			"type": "object",
			"required": [
				"enableSessions"
			],
			"properties": {
				"enableSessions": {
					"type": "boolean",
					"position": 10,
					"description": "Determines whether authentication sessions are enabled globally."
				},
				"persistentSessions": {
					"type": "boolean",
					"position": 12,
					"description": "Determines whether authentication sessions are persistent by default. Persistent sessions are linked to a persistent cookie and stored in a data store. This field is ignored if enableSessions is false."
				},
				"hashUniqueUserKeyAttribute": {
					"type": "boolean",
					"position": 14,
					"description": "Determines whether to hash the value of the unique user key attribute."
				},
				"idleTimeoutMins": {
					"type": "integer",
					"format": "int32",
					"position": 20,
					"description": "The idle timeout period, in minutes. If set to -1, the idle timeout will be set to the maximum timeout. The default is 60."
				},
				"idleTimeoutDisplayUnit": {
					"type": "string",
					"position": 25,
					"description": "The display unit for the idle timeout period in the PingFederate administrative console. When the display unit is HOURS or DAYS, the timeout value in minutes must correspond to a whole number value for the specified unit.",
					"enum": [
						"MINUTES",
						"HOURS",
						"DAYS"
					]
				},
				"maxTimeoutMins": {
					"type": "integer",
					"format": "int32",
					"position": 30,
					"description": "The maximum timeout period, in minutes. If set to -1, sessions do not expire. The default is 480."
				},
				"maxTimeoutDisplayUnit": {
					"type": "string",
					"position": 35,
					"description": "The display unit for the maximum timeout period in the PingFederate administrative console. When the display unit is HOURS or DAYS, the timeout value in minutes must correspond to a whole number value for the specified unit.",
					"enum": [
						"MINUTES",
						"HOURS",
						"DAYS"
					]
				}
			},
			"description": "The global policy for authentication sessions."
		},
		"ApplicationSessionPolicy": {
			"type": "object",
			"properties": {
				"idleTimeoutMins": {
					"type": "integer",
					"format": "int32",
					"position": 20,
					"description": "The idle timeout period, in minutes. If set to -1, the idle timeout will be set to the maximum timeout. The default is 60."
				},
				"maxTimeoutMins": {
					"type": "integer",
					"format": "int32",
					"position": 30,
					"description": "The maximum timeout period, in minutes. If set to -1, sessions do not expire. The default is 480."
				}
			},
			"description": "Session controls for user facing PingFederate application endpoints, such as the profile management endpoint."
		},
		"AuthenticationSessionPolicies": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of policies.",
					"items": {
						"$ref": "#/definitions/AuthenticationSessionPolicy"
					}
				}
			},
			"description": "A collection of authentication session policies."
		},
		"AuthenticationSessionPolicy": {
			"type": "object",
			"required": [
				"authenticationSource",
				"enableSessions"
			],
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The persistent, unique ID for the session policy. It can be any combination of [a-z0-9._-]. This property is system-assigned if not specified."
				},
				"authenticationSource": {
					"position": 20,
					"description": "The authentication source this session policy applies to. This property cannot be changed after the policy is created.",
					"$ref": "#/definitions/AuthenticationSource"
				},
				"enableSessions": {
					"type": "boolean",
					"position": 30,
					"description": "Determines whether sessions are enabled for the authentication source. This value overrides the enableSessions value from the global authentication session policy."
				},
				"persistent": {
					"type": "boolean",
					"position": 35,
					"description": "Determines whether sessions for the authentication source are persistent. This value overrides the persistentSessions value from the global authentication session policy. This field is ignored if enableSessions is false."
				},
				"idleTimeoutMins": {
					"type": "integer",
					"format": "int32",
					"position": 40,
					"description": "The idle timeout period, in minutes. If omitted, the value from the global authentication session policy will be used. If set to -1, the idle timeout will be set to the maximum timeout. If a value is provided for this property, a value must also be provided for maxTimeoutMins."
				},
				"maxTimeoutMins": {
					"type": "integer",
					"format": "int32",
					"position": 50,
					"description": "The maximum timeout period, in minutes. If omitted, the value from the global authentication session policy will be used. If set to -1, sessions do not expire. If a value is provided for this property, a value must also be provided for idleTimeoutMins."
				},
				"timeoutDisplayUnit": {
					"type": "string",
					"position": 55,
					"description": "The display unit for session timeout periods in the PingFederate administrative console. When the display unit is HOURS or DAYS, the timeout values in minutes must correspond to a whole number value for the specified unit.",
					"enum": [
						"MINUTES",
						"HOURS",
						"DAYS"
					]
				},
				"authnContextSensitive": {
					"type": "boolean",
					"position": 60,
					"description": "Determines whether the requested authentication context is considered when deciding whether an existing session is valid for a given request. The default is false."
				}
			},
			"description": "The session policy for a specified authentication source."
		},
		"SessionSettings": {
			"type": "object",
			"properties": {
				"trackAdapterSessionsForLogout": {
					"type": "boolean",
					"position": 10,
					"description": "Determines whether adapter sessions are tracked for cleanup during single logout. The default is false."
				},
				"revokeUserSessionOnLogout": {
					"type": "boolean",
					"position": 20,
					"description": "Determines whether the user's session is revoked on logout. If this property is not provided on a PUT, the setting is left unchanged."
				},
				"sessionRevocationLifetime": {
					"type": "integer",
					"format": "int32",
					"position": 30,
					"description": "How long a session revocation is tracked and stored, in minutes. If this property is not provided on a PUT, the setting is left unchanged."
				}
			},
			"description": "General settings related to session management."
		},
		"AuthorizationDetailProcessors": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of authorization detail processor plugin instances.",
					"items": {
						"$ref": "#/definitions/AuthorizationDetailProcessor"
					}
				}
			},
			"description": "A collection of authorization detail processor plugin instances."
		},
		"AuthorizationDetailProcessorDescriptors": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of authorization detail processor plugin descriptors.",
					"items": {
						"$ref": "#/definitions/AuthorizationDetailProcessorDescriptor"
					}
				}
			},
			"description": "A collection of authorization detail processor plugin descriptors."
		},
		"AuthorizationServerSettings": {
			"type": "object",
			"required": [
				"authorizationCodeEntropy",
				"authorizationCodeTimeout",
				"bypassActivationCodeConfirmation",
				"defaultScopeDescription",
				"devicePollingInterval",
				"pendingAuthorizationTimeout",
				"refreshRollingInterval",
				"refreshTokenLength",
				"registeredAuthorizationPath"
			],
			"properties": {
				"defaultScopeDescription": {
					"type": "string",
					"position": 10,
					"description": "The default scope description."
				},
				"scopes": {
					"type": "array",
					"position": 20,
					"description": "The list of common scopes.",
					"items": {
						"$ref": "#/definitions/ScopeEntry"
					}
				},
				"scopeGroups": {
					"type": "array",
					"position": 30,
					"description": "The list of common scope groups.",
					"items": {
						"$ref": "#/definitions/ScopeGroupEntry"
					}
				},
				"exclusiveScopes": {
					"type": "array",
					"position": 40,
					"description": "The list of exclusive scopes.",
					"items": {
						"$ref": "#/definitions/ScopeEntry"
					}
				},
				"exclusiveScopeGroups": {
					"type": "array",
					"position": 50,
					"description": "The list of exclusive scope groups.",
					"items": {
						"$ref": "#/definitions/ScopeGroupEntry"
					}
				},
				"authorizationCodeTimeout": {
					"type": "integer",
					"format": "int32",
					"position": 60,
					"description": "The authorization code timeout, in seconds."
				},
				"authorizationCodeEntropy": {
					"type": "integer",
					"format": "int32",
					"position": 70,
					"description": "The authorization code entropy, in bytes."
				},
				"disallowPlainPKCE": {
					"type": "boolean",
					"position": 80,
					"description": "Determines whether PKCE's 'plain' code challenge method will be disallowed. The default value is false."
				},
				"includeIssuerInAuthorizationResponse": {
					"type": "boolean",
					"position": 90,
					"description": "Determines whether the authorization server's issuer value is added to the authorization response or not. The default value is false."
				},
				"trackUserSessionsForLogout": {
					"type": "boolean",
					"position": 100,
					"description": "Determines whether user sessions are tracked for logout. If this property is not provided on a PUT, the setting is left unchanged."
				},
				"tokenEndpointBaseUrl": {
					"type": "string",
					"position": 110,
					"description": "The token endpoint base URL used to validate the 'aud' claim during Private Key JWT Client Authentication."
				},
				"persistentGrantLifetime": {
					"type": "integer",
					"format": "int64",
					"position": 120,
					"description": "The persistent grant lifetime. The default value is indefinite. -1 indicates an indefinite amount of time."
				},
				"persistentGrantLifetimeUnit": {
					"type": "string",
					"position": 130,
					"description": "The persistent grant lifetime unit.",
					"enum": [
						"MINUTES",
						"DAYS",
						"HOURS"
					]
				},
				"persistentGrantIdleTimeout": {
					"type": "integer",
					"format": "int64",
					"position": 140,
					"description": "The persistent grant idle timeout. The default value is 30 (days). -1 indicates an indefinite amount of time."
				},
				"persistentGrantIdleTimeoutTimeUnit": {
					"type": "string",
					"position": 150,
					"description": "The persistent grant idle timeout time unit.",
					"enum": [
						"MINUTES",
						"DAYS",
						"HOURS"
					]
				},
				"refreshTokenLength": {
					"type": "integer",
					"format": "int32",
					"position": 160,
					"description": "The refresh token length in number of characters."
				},
				"rollRefreshTokenValues": {
					"type": "boolean",
					"position": 170,
					"description": "The roll refresh token values default policy. The default value is true."
				},
				"refreshTokenRollingGracePeriod": {
					"type": "integer",
					"format": "int32",
					"position": 179,
					"description": "The grace period that a rolled refresh token remains valid in seconds. The default value is 0."
				},
				"refreshRollingInterval": {
					"type": "integer",
					"format": "int64",
					"position": 180,
					"description": "The minimum interval to roll refresh tokens, in hours."
				},
				"persistentGrantReuseGrantTypes": {
					"type": "array",
					"position": 190,
					"description": "The grant types that the OAuth AS can reuse rather than creating a new grant for each request. Only 'IMPLICIT' or 'AUTHORIZATION_CODE' or 'RESOURCE_OWNER_CREDENTIALS' are valid grant types.",
					"items": {
						"type": "string",
						"enum": [
							"IMPLICIT",
							"AUTHORIZATION_CODE",
							"RESOURCE_OWNER_CREDENTIALS",
							"CLIENT_CREDENTIALS",
							"REFRESH_TOKEN",
							"EXTENSION",
							"DEVICE_CODE",
							"ACCESS_TOKEN_VALIDATION",
							"CIBA",
							"TOKEN_EXCHANGE"
						]
					}
				},
				"persistentGrantContract": {
					"position": 200,
					"description": "The persistent grant contract defines attributes that are associated with OAuth persistent grants.",
					"$ref": "#/definitions/PersistentGrantContract"
				},
				"bypassAuthorizationForApprovedGrants": {
					"type": "boolean",
					"position": 210,
					"description": "Bypass authorization for previously approved persistent grants. The default value is false."
				},
				"allowUnidentifiedClientROCreds": {
					"type": "boolean",
					"position": 220,
					"description": "Allow unidentified clients to request resource owner password credentials grants. The default value is false."
				},
				"allowUnidentifiedClientExtensionGrants": {
					"type": "boolean",
					"position": 230,
					"description": "Allow unidentified clients to request extension grants. The default value is false."
				},
				"adminWebServicePcvRef": {
					"position": 240,
					"description": "The password credential validator reference that is used for authenticating access to the OAuth Administrative Web Service.",
					"$ref": "#/definitions/ResourceLink"
				},
				"atmIdForOAuthGrantManagement": {
					"type": "string",
					"position": 250,
					"description": "The ID of the Access Token Manager used for OAuth enabled grant management."
				},
				"scopeForOAuthGrantManagement": {
					"type": "string",
					"position": 260,
					"description": "The OAuth scope to validate when accessing grant management service."
				},
				"allowedOrigins": {
					"type": "array",
					"position": 270,
					"description": "The list of allowed origins.",
					"items": {
						"type": "string"
					}
				},
				"userAuthorizationUrl": {
					"type": "string",
					"position": 280,
					"description": "The URL used to generate 'verification_url' and 'verification_url_complete' values in a Device Authorization request"
				},
				"registeredAuthorizationPath": {
					"type": "string",
					"position": 290,
					"description": "The Registered Authorization Path is concatenated to PingFederate base URL to generate 'verification_url' and 'verification_url_complete' values in a Device Authorization request. PingFederate listens to this path if specified"
				},
				"pendingAuthorizationTimeout": {
					"type": "integer",
					"format": "int32",
					"position": 300,
					"description": "The 'device_code' and 'user_code' timeout, in seconds."
				},
				"devicePollingInterval": {
					"type": "integer",
					"format": "int32",
					"position": 310,
					"description": "The amount of time client should wait between polling requests, in seconds."
				},
				"activationCodeCheckMode": {
					"type": "string",
					"position": 315,
					"description": "Determines whether the user is prompted to enter or confirm the activation code after authenticating or before. The default is AFTER_AUTHENTICATION.",
					"enum": [
						"AFTER_AUTHENTICATION",
						"BEFORE_AUTHENTICATION"
					]
				},
				"bypassActivationCodeConfirmation": {
					"type": "boolean",
					"position": 320,
					"description": "Indicates if the Activation Code Confirmation page should be bypassed if 'verification_url_complete' is used by the end user to authorize a device."
				},
				"userAuthorizationConsentPageSetting": {
					"type": "string",
					"position": 330,
					"description": "User Authorization Consent Page setting to use PingFederate's internal consent page or an external system",
					"enum": [
						"INTERNAL",
						"ADAPTER"
					]
				},
				"userAuthorizationConsentAdapter": {
					"type": "string",
					"position": 340,
					"description": "Adapter ID of the external consent adapter to be used for the consent page user interface."
				},
				"approvedScopesAttribute": {
					"type": "string",
					"position": 350,
					"description": "Attribute from the external consent adapter's contract, intended for storing approved scopes returned by the external consent page."
				},
				"approvedAuthorizationDetailAttribute": {
					"type": "string",
					"position": 355,
					"description": "Attribute from the external consent adapter's contract, intended for storing approved authorization details returned by the external consent page."
				},
				"parReferenceTimeout": {
					"type": "integer",
					"format": "int32",
					"position": 360,
					"description": "The timeout, in seconds, of the pushed authorization request reference. The default value is 60."
				},
				"parReferenceLength": {
					"type": "integer",
					"format": "int32",
					"position": 370,
					"description": "The entropy of pushed authorization request references, in bytes. The default value is 24."
				},
				"parStatus": {
					"type": "string",
					"position": 380,
					"description": "The status of pushed authorization request support. The default value is ENABLED.",
					"enum": [
						"DISABLED",
						"ENABLED",
						"REQUIRED"
					]
				},
				"clientSecretRetentionPeriod": {
					"type": "integer",
					"format": "int32",
					"position": 390,
					"description": "The length of time in minutes that client secrets will be retained as secondary secrets after secret change. The default value is 0, which will disable secondary client secret retention."
				},
				"jwtSecuredAuthorizationResponseModeLifetime": {
					"type": "integer",
					"format": "int32",
					"position": 400,
					"description": "The lifetime, in seconds, of the JWT Secured authorization response. The default value is 600."
				}
			},
			"description": "Authorization Server Settings attributes."
		},
		"PersistentGrantAttribute": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of this attribute."
				}
			},
			"description": "A persistent grant contract attribute."
		},
		"PersistentGrantContract": {
			"type": "object",
			"required": [
				"coreAttributes"
			],
			"properties": {
				"coreAttributes": {
					"type": "array",
					"position": 10,
					"description": "This is a read-only list of persistent grant attributes and includes USER_KEY and USER_NAME. Changes to this field will be ignored.",
					"items": {
						"$ref": "#/definitions/PersistentGrantAttribute"
					}
				},
				"extendedAttributes": {
					"type": "array",
					"position": 20,
					"description": "A list of additional attributes for the persistent grant contract.",
					"items": {
						"$ref": "#/definitions/PersistentGrantAttribute"
					}
				}
			}
		},
		"ScopeEntry": {
			"type": "object",
			"required": [
				"description",
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of the scope."
				},
				"description": {
					"type": "string",
					"position": 20,
					"description": "The description of the scope that appears when the user is prompted for authorization."
				},
				"dynamic": {
					"type": "boolean",
					"position": 30,
					"description": "True if the scope is dynamic. (Defaults to false)"
				}
			},
			"description": "A scope name and its description."
		},
		"ScopeGroupEntry": {
			"type": "object",
			"required": [
				"description",
				"name",
				"scopes"
			],
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of the scope group."
				},
				"description": {
					"type": "string",
					"position": 20,
					"description": "The description of the scope group."
				},
				"scopes": {
					"type": "array",
					"position": 30,
					"description": "The set of scopes for this scope group.",
					"uniqueItems": true,
					"items": {
						"type": "string"
					}
				}
			},
			"description": "A scope group name and its description."
		},
		"BulkConfig": {
			"type": "object",
			"required": [
				"metadata",
				"operations"
			],
			"properties": {
				"metadata": {
					"position": 10,
					"description": "The metadata detailing how this config was generated.",
					"$ref": "#/definitions/BulkConfigMetadata"
				},
				"operations": {
					"type": "array",
					"position": 20,
					"description": "A list of configuration operations.",
					"items": {
						"$ref": "#/definitions/ConfigOperation"
					}
				}
			},
			"description": "Model describing a series of configuration operations."
		},
		"BulkConfigMetadata": {
			"type": "object",
			"required": [
				"pfVersion"
			],
			"properties": {
				"pfVersion": {
					"type": "string",
					"position": 10,
					"description": "The version of PingFederate this config was generated from."
				}
			},
			"description": "Model describing how bulk configuration data was generated."
		},
		"ConfigOperation": {
			"type": "object",
			"required": [
				"operationType",
				"resourceType"
			],
			"properties": {
				"resourceType": {
					"type": "string",
					"position": 10,
					"description": "The identifier for the resource type the operation applies to."
				},
				"subResource": {
					"type": "string",
					"position": 15,
					"description": "The subresource for the operation."
				},
				"operationType": {
					"type": "string",
					"position": 20,
					"description": "The type of operation to be performed.",
					"enum": [
						"SAVE",
						"DELETE"
					]
				},
				"items": {
					"type": "array",
					"position": 30,
					"description": "The configuration items for the operation. This field only applies to the SAVE operation type.",
					"items": {
						"type": "object"
					}
				},
				"itemIds": {
					"type": "array",
					"position": 40,
					"description": "The item ID's for the operation. This field only applies to the DELETE operation type.",
					"items": {
						"type": "string"
					}
				}
			},
			"description": "Model describing a list of configuration operations for a given resource type."
		},
		"CaptchaProvidersSettings": {
			"type": "object",
			"properties": {
				"defaultCaptchaProviderRef": {
					"position": 10,
					"description": "Reference to the default CAPTCHA provider, if one is defined.",
					"$ref": "#/definitions/ResourceLink"
				}
			},
			"description": "General CAPTCHA provider settings."
		},
		"A CAPTCHA provider plugin descriptor.": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "Unique ID of the plugin."
				},
				"name": {
					"type": "string",
					"position": 20,
					"description": "Friendly name for the plugin."
				},
				"className": {
					"type": "string",
					"position": 30,
					"description": "Full class name of the class that implements this plugin."
				},
				"attributeContract": {
					"type": "array",
					"position": 40,
					"description": "The attribute contract for this plugin.",
					"items": {
						"type": "string"
					}
				},
				"supportsExtendedContract": {
					"type": "boolean",
					"position": 50,
					"description": "Determines whether this plugin supports extending the attribute contract."
				},
				"configDescriptor": {
					"position": 60,
					"description": "The descriptor which defines the configuration fields available for this plugin.",
					"$ref": "#/definitions/PluginConfigDescriptor"
				}
			}
		},
		"CaptchaProvider": {
			"type": "object",
			"required": [
				"configuration",
				"id",
				"name",
				"pluginDescriptorRef"
			],
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The ID of the plugin instance. The ID cannot be modified once the instance is created.<br>Note: Ignored when specifying a connection's adapter override."
				},
				"name": {
					"type": "string",
					"position": 20,
					"description": "The plugin instance name. The name can be modified once the instance is created.<br>Note: Ignored when specifying a connection's adapter override."
				},
				"pluginDescriptorRef": {
					"position": 30,
					"description": "Reference to the plugin descriptor for this instance. The plugin descriptor cannot be modified once the instance is created.<br>Note: Ignored when specifying a connection's adapter override.",
					"$ref": "#/definitions/ResourceLink"
				},
				"parentRef": {
					"position": 40,
					"description": "The reference to this plugin's parent instance. The parent reference is only accepted if the plugin type supports parent instances.<br>Note: This parent reference is required if this plugin instance is used as an overriding plugin (e.g. connection adapter overrides)",
					"$ref": "#/definitions/ResourceLink"
				},
				"configuration": {
					"position": 50,
					"description": "Plugin instance configuration.",
					"$ref": "#/definitions/PluginConfiguration"
				}
			},
			"description": "A CAPTCHA provider plugin instance."
		},
		"CaptchaProviders": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of CAPTCHA provider plugin instances.",
					"items": {
						"$ref": "#/definitions/CaptchaProvider"
					}
				}
			},
			"description": "A collection of CAPTCHA provider plugin instances."
		},
		"A collection of CAPTCHA provider plugin descriptors.": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of CAPTCHA provider plugin descriptors.",
					"items": {
						"$ref": "#/definitions/A CAPTCHA provider plugin descriptor."
					}
				}
			}
		},
		"CertView": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"position": 5,
					"description": "The persistent, unique ID for the certificate."
				},
				"serialNumber": {
					"type": "string",
					"position": 10,
					"description": "The serial number assigned by the CA."
				},
				"subjectDN": {
					"type": "string",
					"position": 20,
					"description": "The subject's distinguished name."
				},
				"subjectAlternativeNames": {
					"type": "array",
					"position": 25,
					"description": "The subject alternative names (SAN).",
					"items": {
						"type": "string"
					}
				},
				"issuerDN": {
					"type": "string",
					"position": 30,
					"description": "The issuer's distinguished name."
				},
				"validFrom": {
					"type": "string",
					"format": "date-time",
					"position": 40,
					"description": "The start date from which the item is valid, in ISO 8601 format (UTC)."
				},
				"expires": {
					"type": "string",
					"format": "date-time",
					"position": 50,
					"description": "The end date up until which the item is valid, in ISO 8601 format (UTC)."
				},
				"keyAlgorithm": {
					"type": "string",
					"position": 60,
					"description": "The public key algorithm."
				},
				"keySize": {
					"type": "integer",
					"format": "int32",
					"position": 70,
					"description": "The public key size."
				},
				"signatureAlgorithm": {
					"type": "string",
					"position": 80,
					"description": "The signature algorithm."
				},
				"version": {
					"type": "integer",
					"format": "int32",
					"position": 90,
					"description": "The X.509 version to which the item conforms."
				},
				"sha1Fingerprint": {
					"type": "string",
					"position": 100,
					"description": "SHA-1 fingerprint in Hex encoding."
				},
				"sha256Fingerprint": {
					"type": "string",
					"position": 102,
					"description": "SHA-256 fingerprint in Hex encoding."
				},
				"status": {
					"type": "string",
					"position": 110,
					"description": "Status of the item.",
					"enum": [
						"VALID",
						"EXPIRED",
						"NOT_YET_VALID",
						"REVOKED"
					]
				},
				"cryptoProvider": {
					"type": "string",
					"position": 120,
					"description": "Cryptographic Provider. This is only applicable if Hybrid HSM mode is true.",
					"enum": [
						"LOCAL",
						"HSM"
					]
				}
			},
			"description": "Certificate details."
		},
		"CertViews": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"description": "The actual list of certificate instances.",
					"items": {
						"$ref": "#/definitions/CertView"
					}
				}
			},
			"description": "A collection of Certificate items."
		},
		"X509File": {
			"type": "object",
			"required": [
				"fileData"
			],
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The persistent, unique ID for the certificate. It can be any combination of [a-z0-9._-]. This property is system-assigned if not specified."
				},
				"fileData": {
					"type": "string",
					"position": 20,
					"description": "The certificate data in PEM format. New line characters should be omitted or encoded in this value."
				},
				"cryptoProvider": {
					"type": "string",
					"position": 30,
					"description": "Cryptographic Provider. This is only applicable if Hybrid HSM mode is true.",
					"enum": [
						"LOCAL",
						"HSM"
					]
				}
			},
			"description": "Encoded certificate data."
		},
		"CertificateRevocationSettings": {
			"type": "object",
			"properties": {
				"ocspSettings": {
					"position": 10,
					"description": "Certificate revocation OCSP settings. If this attribute is omitted, OCSP checks are disabled.",
					"$ref": "#/definitions/OcspSettings"
				},
				"crlSettings": {
					"position": 20,
					"description": "Certificate revocation CRL settings. If this attribute is omitted, CRL checks are disabled.",
					"$ref": "#/definitions/CrlSettings"
				},
				"proxySettings": {
					"position": 30,
					"description": "If OCSP messaging is routed through a proxy server, specify the server's host (DNS name or IP address) and the port number. The same proxy information applies to CRL checking, when CRL is enabled for failover.",
					"$ref": "#/definitions/ProxySettings"
				}
			},
			"description": "Certificate revocation settings."
		},
		"CrlSettings": {
			"type": "object",
			"properties": {
				"treatNonRetrievableCrlAsRevoked": {
					"type": "boolean",
					"position": 20,
					"description": "Treat non retrievable CRL as revoked. This setting defaults to disabled."
				},
				"verifyCrlSignature": {
					"type": "boolean",
					"position": 30,
					"description": "Verify CRL signature. This setting defaults to enabled."
				},
				"nextRetryMinsWhenResolveFailed": {
					"type": "integer",
					"format": "int32",
					"position": 40,
					"description": "Next retry on resolution failure in minutes. This value defaults to \"1440\"."
				},
				"nextRetryMinsWhenNextUpdateInPast": {
					"type": "integer",
					"format": "int32",
					"position": 50,
					"description": "Next retry on next update expiration in minutes. This value defaults to \"60\"."
				}
			},
			"description": "CRL settings."
		},
		"OcspSettings": {
			"type": "object",
			"properties": {
				"requesterAddNonce": {
					"type": "boolean",
					"position": 20,
					"description": "Do not allow responder to use cached responses. This setting defaults to disabled."
				},
				"responderUrl": {
					"type": "string",
					"position": 30,
					"description": "Default responder URL. This URL is used if the certificate being checked does not specify an OCSP responder URL."
				},
				"responderCertReference": {
					"position": 40,
					"description": "Resource link to OCSP responder signature verification certificate. A previously selected certificate will be deselected if this attribute is not defined.",
					"$ref": "#/definitions/ResourceLink"
				},
				"currentUpdateGracePeriod": {
					"type": "integer",
					"format": "int32",
					"position": 50,
					"description": "Current update grace period in minutes. This value defaults to \"5\"."
				},
				"nextUpdateGracePeriod": {
					"type": "integer",
					"format": "int32",
					"position": 60,
					"description": "Next update grace period in minutes. This value defaults to \"5\"."
				},
				"responseCachePeriod": {
					"type": "integer",
					"format": "int32",
					"position": 70,
					"description": "Response cache period in hours. This value defaults to \"48\"."
				},
				"responderTimeout": {
					"type": "integer",
					"format": "int32",
					"position": 80,
					"description": "Responder connection timeout in seconds. This value defaults to \"5\"."
				},
				"actionOnResponderUnavailable": {
					"type": "string",
					"position": 90,
					"description": "Action on responder unavailable. This value defaults to  \"CONTINUE\"."
				},
				"actionOnStatusUnknown": {
					"type": "string",
					"position": 100,
					"description": "Action on status unknown. This value defaults to  \"FAIL\"."
				},
				"actionOnUnsuccessfulResponse": {
					"type": "string",
					"position": 110,
					"description": "Action on unsuccessful response. This value defaults to  \"FAIL\"."
				}
			},
			"description": "OCSP settings."
		},
		"ProxySettings": {
			"type": "object",
			"properties": {
				"host": {
					"type": "string",
					"position": 10,
					"description": "Host name."
				},
				"port": {
					"type": "integer",
					"format": "int32",
					"position": 20,
					"description": "Port number."
				}
			},
			"description": "Proxy settings."
		},
		"ClusterNode": {
			"type": "object",
			"properties": {
				"address": {
					"type": "string",
					"position": 10,
					"description": "The IP address and port this node is running on."
				},
				"index": {
					"type": "integer",
					"format": "int32",
					"position": 20,
					"description": "Index of the node within the cluster, or -1 if an index is not assigned."
				},
				"mode": {
					"type": "string",
					"position": 30,
					"description": "The deployment mode of this node, from a clustering standpoint. CLUSTERED_DUAL is not supported.",
					"enum": [
						"CLUSTERED_ENGINE",
						"CLUSTERED_CONSOLE",
						"CLUSTERED_DUAL",
						"STANDALONE"
					]
				},
				"nodeGroup": {
					"type": "string",
					"position": 40,
					"description": "The node group for this node. This field is only populated if adaptive clustering is enabled."
				},
				"version": {
					"type": "string",
					"position": 50,
					"description": "The PingFederate version this node is running on."
				},
				"nodeTags": {
					"type": "string",
					"position": 60,
					"description": "The node tags for this node. This field is only populated for engine nodes."
				},
				"configurationTimestamp": {
					"type": "string",
					"format": "date-time",
					"position": 70,
					"description": "The time stamp of the configuration data retrieved by this node."
				},
				"replicationStatus": {
					"type": "string",
					"position": 80,
					"description": "The replication status of the node.",
					"enum": [
						"RETRIEVING",
						"APPLYING",
						"FAILED",
						"SUCCEEDED",
						"OUT_OF_DATE"
					]
				}
			},
			"description": "Describes a node in a clustered deployment of PingFederate."
		},
		"ClusterStatus": {
			"type": "object",
			"properties": {
				"nodes": {
					"type": "array",
					"position": 10,
					"description": "List of nodes in the cluster.",
					"items": {
						"$ref": "#/definitions/ClusterNode"
					}
				},
				"lastConfigUpdateTime": {
					"type": "string",
					"format": "date-time",
					"position": 20,
					"description": "Time when the configuration of this node was last updated."
				},
				"lastReplicationTime": {
					"type": "string",
					"format": "date-time",
					"position": 30,
					"description": "Time when configuration changes were last replicated."
				},
				"replicationRequired": {
					"type": "boolean",
					"position": 40,
					"description": "Indicates whether a replication is required to propagate config updates."
				},
				"mixedMode": {
					"type": "boolean",
					"position": 50,
					"description": "Indicates whether there is more than one version of PingFederate in the cluster."
				}
			},
			"description": "Information on cluster nodes and replication status."
		},
		"ConfigStoreBundle": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "List of configuration settings.",
					"items": {
						"$ref": "#/definitions/ConfigStoreSetting"
					}
				}
			},
			"description": "List of all configuration settings in a bundle."
		},
		"ConfigStoreSetting": {
			"type": "object",
			"required": [
				"id",
				"type"
			],
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The id of the configuration setting."
				},
				"stringValue": {
					"type": "string",
					"position": 20,
					"description": "The value of the configuration setting. This is used when the setting has a single string value."
				},
				"listValue": {
					"type": "array",
					"position": 30,
					"description": "The list of values for the configuration setting. This is used when the setting has a list of string values.",
					"items": {
						"type": "string"
					}
				},
				"mapValue": {
					"type": "object",
					"position": 40,
					"description": "The map of key/value pairs for the configuration setting. This is used when the setting has a map of string keys and values.",
					"additionalProperties": {
						"type": "string"
					}
				},
				"type": {
					"type": "string",
					"position": 50,
					"description": "The type of configuration setting. This could be a single string, list of strings, or map of string keys and values.",
					"enum": [
						"STRING",
						"LIST",
						"MAP"
					]
				}
			},
			"description": "Single configuration setting."
		},
		"ConfigurationEncryptionKey": {
			"type": "object",
			"properties": {
				"keyId": {
					"type": "string",
					"position": 10,
					"description": "The id of the key."
				},
				"creationDate": {
					"type": "string",
					"format": "date-time",
					"position": 20,
					"description": "The creation date of the key."
				}
			},
			"description": "Configuration Encryption Key."
		},
		"ConfigurationEncryptionKeys": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of Configuration Encryption Keys.",
					"items": {
						"$ref": "#/definitions/ConfigurationEncryptionKey"
					}
				}
			},
			"description": "Configuration Encryption Keys."
		},
		"AccessTokenManagerMapping": {
			"type": "object",
			"required": [
				"attributeContractFulfillment"
			],
			"properties": {
				"accessTokenManagerRef": {
					"position": 5,
					"description": "The access token manager used in OAuth attribute mapping.",
					"$ref": "#/definitions/ResourceLink"
				},
				"attributeSources": {
					"type": "array",
					"position": 10,
					"description": "A list of configured data stores to look up attributes from.",
					"items": {
						"$ref": "#/definitions/AttributeSource"
					}
				},
				"attributeContractFulfillment": {
					"type": "object",
					"position": 20,
					"description": "A list of mappings from attribute names to their fulfillment values.",
					"additionalProperties": {
						"$ref": "#/definitions/AttributeFulfillmentValue"
					}
				},
				"issuanceCriteria": {
					"position": 30,
					"description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
					"$ref": "#/definitions/IssuanceCriteria"
				}
			},
			"description": "A mapping in a connection that defines how access tokens are created."
		},
		"AccountManagementSettings": {
			"type": "object",
			"required": [
				"accountStatusAlgorithm",
				"accountStatusAttributeName"
			],
			"properties": {
				"accountStatusAttributeName": {
					"type": "string",
					"position": 10,
					"description": "The account status attribute name."
				},
				"accountStatusAlgorithm": {
					"type": "string",
					"position": 20,
					"description": "The account status algorithm name. \nACCOUNT_STATUS_ALGORITHM_AD -  Algorithm name for Active Directory, which uses a bitmap for each user entry. \nACCOUNT_STATUS_ALGORITHM_FLAG - Algorithm name for Oracle Directory Server and other LDAP directories that use a separate attribute to store the user's status. When this option is selected, the Flag Comparison Value and Flag Comparison Status fields should be used.",
					"enum": [
						"ACCOUNT_STATUS_ALGORITHM_AD",
						"ACCOUNT_STATUS_ALGORITHM_FLAG"
					]
				},
				"flagComparisonValue": {
					"type": "string",
					"position": 30,
					"description": "The flag that represents comparison value."
				},
				"flagComparisonStatus": {
					"type": "boolean",
					"position": 40,
					"description": "The flag that represents comparison status."
				},
				"defaultStatus": {
					"type": "boolean",
					"position": 50,
					"description": "The default status of the account."
				}
			},
			"description": "Account management settings."
		},
		"AdditionalAllowedEntitiesConfiguration": {
			"type": "object",
			"properties": {
				"allowAdditionalEntities": {
					"type": "boolean",
					"position": 100,
					"description": "Set to true to configure additional entities or issuers to be accepted during entity or issuer validation."
				},
				"allowAllEntities": {
					"type": "boolean",
					"position": 200,
					"description": "Set to true to accept any entity or issuer during entity or issuer validation. (Not Recommended)"
				},
				"additionalAllowedEntities": {
					"type": "array",
					"position": 300,
					"description": "An array of additional allowed entities or issuers to be accepted during entity or issuer validation.",
					"items": {
						"$ref": "#/definitions/Entity"
					}
				}
			},
			"description": "Additional allowed entities or issuers configuration. Currently only used in OIDC IdP (RP) connection."
		},
		"ArtifactResolverLocation": {
			"type": "object",
			"required": [
				"index",
				"url"
			],
			"properties": {
				"index": {
					"type": "integer",
					"format": "int32",
					"position": 10,
					"description": "The priority of the endpoint."
				},
				"url": {
					"type": "string",
					"position": 20,
					"description": "Remote party URLs that you will use to resolve/translate the artifact and get the actual protocol message"
				}
			},
			"description": "The remote party URLs to resolve the artifact."
		},
		"ArtifactSettings": {
			"type": "object",
			"required": [
				"lifetime",
				"resolverLocations"
			],
			"properties": {
				"lifetime": {
					"type": "integer",
					"format": "int32",
					"position": 10,
					"description": "The lifetime of the artifact in seconds."
				},
				"resolverLocations": {
					"type": "array",
					"position": 20,
					"description": "Remote party URLs that you will use to resolve/translate the artifact and get the actual protocol message",
					"items": {
						"$ref": "#/definitions/ArtifactResolverLocation"
					}
				},
				"sourceId": {
					"type": "string",
					"position": 30,
					"description": "Source ID for SAML1.x connections"
				}
			},
			"description": "The settings for an Artifact binding."
		},
		"AssertionLifetime": {
			"type": "object",
			"required": [
				"minutesAfter",
				"minutesBefore"
			],
			"properties": {
				"minutesBefore": {
					"type": "integer",
					"format": "int32",
					"position": 10,
					"description": "Assertion validity in minutes before the assertion issuance."
				},
				"minutesAfter": {
					"type": "integer",
					"format": "int32",
					"position": 20,
					"description": "Assertion validity in minutes after the assertion issuance."
				}
			},
			"description": "The timeframe of validity before and after the issuance of the assertion."
		},
		"Attribute": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of this attribute."
				}
			},
			"description": "The definition of an attribute in an attribute contract."
		},
		"AttributeQueryNameMapping": {
			"type": "object",
			"required": [
				"localName",
				"remoteName"
			],
			"properties": {
				"localName": {
					"type": "string",
					"position": 10,
					"description": "The local attribute name."
				},
				"remoteName": {
					"type": "string",
					"position": 20,
					"description": "The remote attribute name as defined by the attribute authority."
				}
			},
			"description": "The attribute query name mappings between the SP and the IdP."
		},
		"AuthenticationPolicyContractAssertionMapping": {
			"type": "object",
			"required": [
				"attributeContractFulfillment",
				"authenticationPolicyContractRef"
			],
			"properties": {
				"authenticationPolicyContractRef": {
					"position": 5,
					"description": "Reference to the associated Authentication Policy Contract.",
					"$ref": "#/definitions/ResourceLink"
				},
				"restrictVirtualEntityIds": {
					"type": "boolean",
					"position": 6,
					"description": "Restricts this mapping to specific virtual entity IDs."
				},
				"restrictedVirtualEntityIds": {
					"type": "array",
					"position": 7,
					"description": "The list of virtual server IDs that this mapping is restricted to.",
					"items": {
						"type": "string"
					}
				},
				"abortSsoTransactionAsFailSafe": {
					"type": "boolean",
					"position": 8,
					"description": "If set to true, SSO transaction will be aborted as a fail-safe when the data-store's attribute mappings fail to complete the attribute contract. Otherwise, the attribute contract with default values is used. By default, this value is false."
				},
				"attributeSources": {
					"type": "array",
					"position": 10,
					"description": "A list of configured data stores to look up attributes from.",
					"items": {
						"$ref": "#/definitions/AttributeSource"
					}
				},
				"attributeContractFulfillment": {
					"type": "object",
					"position": 20,
					"description": "A list of mappings from attribute names to their fulfillment values.",
					"additionalProperties": {
						"$ref": "#/definitions/AttributeFulfillmentValue"
					}
				},
				"issuanceCriteria": {
					"position": 30,
					"description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
					"$ref": "#/definitions/IssuanceCriteria"
				}
			},
			"description": "The Authentication Policy Contract Assertion Mapping."
		},
		"AuthenticationPolicyContractMapping": {
			"type": "object",
			"required": [
				"attributeContractFulfillment",
				"authenticationPolicyContractRef"
			],
			"properties": {
				"authenticationPolicyContractRef": {
					"position": 5,
					"description": "Reference to the associated Authentication Policy Contract.",
					"$ref": "#/definitions/ResourceLink"
				},
				"restrictVirtualServerIds": {
					"type": "boolean",
					"position": 6,
					"description": "Restricts this mapping to specific virtual entity IDs."
				},
				"restrictedVirtualServerIds": {
					"type": "array",
					"position": 7,
					"description": "The list of virtual server IDs that this mapping is restricted to.",
					"items": {
						"type": "string"
					}
				},
				"attributeSources": {
					"type": "array",
					"position": 10,
					"description": "A list of configured data stores to look up attributes from.",
					"items": {
						"$ref": "#/definitions/AttributeSource"
					}
				},
				"attributeContractFulfillment": {
					"type": "object",
					"position": 20,
					"description": "A list of mappings from attribute names to their fulfillment values.",
					"additionalProperties": {
						"$ref": "#/definitions/AttributeFulfillmentValue"
					}
				},
				"issuanceCriteria": {
					"position": 30,
					"description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
					"$ref": "#/definitions/IssuanceCriteria"
				}
			},
			"description": "An Authentication Policy Contract mapping into IdP Connection."
		},
		"AuthnContextMapping": {
			"type": "object",
			"properties": {
				"local": {
					"type": "string",
					"position": 5,
					"description": "The local authentication context value."
				},
				"remote": {
					"type": "string",
					"position": 10,
					"description": "The remote authentication context value."
				}
			},
			"description": "The authentication context mapping between local and remote values."
		},
		"BackChannelAuth": {
			"type": "object",
			"required": [
				"type"
			],
			"discriminator": "type",
			"properties": {
				"type": {
					"type": "string",
					"position": 10,
					"description": "The back channel authentication type.",
					"enum": [
						"INBOUND",
						"OUTBOUND"
					]
				},
				"httpBasicCredentials": {
					"position": 20,
					"description": "The credentials to use when you authenticate with the SOAP endpoint.",
					"$ref": "#/definitions/UsernamePasswordCredentials"
				},
				"digitalSignature": {
					"type": "boolean",
					"position": 30,
					"description": "If incoming or outgoing messages must be signed."
				}
			},
			"description": "The SOAP authentication methods when sending or receiving a message using SOAP back channel."
		},
		"ChangeDetectionSettings": {
			"type": "object",
			"required": [
				"changedUsersAlgorithm",
				"groupObjectClass",
				"timeStampAttributeName",
				"userObjectClass"
			],
			"properties": {
				"userObjectClass": {
					"type": "string",
					"position": 10,
					"description": "The user object class."
				},
				"groupObjectClass": {
					"type": "string",
					"position": 20,
					"description": "The group object class."
				},
				"changedUsersAlgorithm": {
					"type": "string",
					"position": 30,
					"description": "The changed user algorithm. \nACTIVE_DIRECTORY_USN - For Active Directory only, this algorithm queries for update sequence numbers on user records that are larger than the last time records were checked. \nTIMESTAMP - Queries for timestamps on user records that are not older than the last time records were checked. This check is more efficient from the point of view of the PingFederate provisioner but can be more time consuming on the LDAP side, particularly with the Oracle Directory Server. \nTIMESTAMP_NO_NEGATION - Queries for timestamps on user records that are newer than the last time records were checked. This algorithm is recommended for the Oracle Directory Server.",
					"enum": [
						"ACTIVE_DIRECTORY_USN",
						"TIMESTAMP",
						"TIMESTAMP_NO_NEGATION"
					]
				},
				"usnAttributeName": {
					"type": "string",
					"position": 40,
					"description": "The USN attribute name."
				},
				"timeStampAttributeName": {
					"type": "string",
					"position": 50,
					"description": "The timestamp attribute name."
				}
			},
			"description": "Setting to detect changes to a user or a group."
		},
		"Channel": {
			"type": "object",
			"required": [
				"active",
				"attributeMapping",
				"channelSource",
				"maxThreads",
				"name",
				"timeout"
			],
			"properties": {
				"active": {
					"type": "boolean",
					"position": 10,
					"description": "Indicates whether the channel is the active channel for this connection."
				},
				"channelSource": {
					"position": 20,
					"description": "The LDAP settings that apply to the source user-data store.",
					"$ref": "#/definitions/ChannelSource"
				},
				"attributeMapping": {
					"type": "array",
					"position": 30,
					"description": "The mapping of attributes from the local data store into Fields specified by the service provider.",
					"items": {
						"$ref": "#/definitions/SaasAttributeMapping"
					}
				},
				"name": {
					"type": "string",
					"position": 40,
					"description": "The name of the channel."
				},
				"maxThreads": {
					"type": "integer",
					"format": "int32",
					"position": 50,
					"description": "The number of processing threads. The default value is 1."
				},
				"timeout": {
					"type": "integer",
					"format": "int32",
					"position": 60,
					"description": "Timeout, in seconds, for individual user and group provisioning operations on the target service provider. The default value is 60."
				}
			},
			"description": "A channel is a combination of a source data store and a provisioning target. It include settings of a source data store, managing provisioning threads and mapping of attributes."
		},
		"ChannelSource": {
			"type": "object",
			"required": [
				"accountManagementSettings",
				"baseDn",
				"changeDetectionSettings",
				"dataSource",
				"groupMembershipDetection",
				"guidAttributeName",
				"guidBinary",
				"userSourceLocation"
			],
			"properties": {
				"dataSource": {
					"position": 10,
					"description": "Reference to an LDAP datastore.",
					"$ref": "#/definitions/ResourceLink"
				},
				"guidAttributeName": {
					"type": "string",
					"position": 20,
					"description": "the GUID attribute name."
				},
				"guidBinary": {
					"type": "boolean",
					"position": 30,
					"description": "Indicates whether the GUID is stored in binary format."
				},
				"changeDetectionSettings": {
					"position": 40,
					"description": "Settings to detect a during provisioning.",
					"$ref": "#/definitions/ChangeDetectionSettings"
				},
				"groupMembershipDetection": {
					"position": 50,
					"description": "Settings to detect group memberships.",
					"$ref": "#/definitions/GroupMembershipDetection"
				},
				"accountManagementSettings": {
					"position": 60,
					"description": "Account management settings that includes the status and algorithms.",
					"$ref": "#/definitions/AccountManagementSettings"
				},
				"baseDn": {
					"type": "string",
					"position": 70,
					"description": "The base DN where the user records are located."
				},
				"userSourceLocation": {
					"position": 80,
					"description": "The user provisioning source location settings.",
					"$ref": "#/definitions/ChannelSourceLocation"
				},
				"groupSourceLocation": {
					"position": 90,
					"description": "The group provisioning source location settings.",
					"$ref": "#/definitions/ChannelSourceLocation"
				}
			},
			"description": "The source data source and LDAP settings."
		},
		"ChannelSourceLocation": {
			"type": "object",
			"properties": {
				"groupDN": {
					"type": "string",
					"position": 10,
					"description": "The group DN for users or groups."
				},
				"filter": {
					"type": "string",
					"position": 20,
					"description": "An LDAP filter."
				},
				"nestedSearch": {
					"type": "boolean",
					"position": 30,
					"description": "Indicates whether the search is nested."
				}
			},
			"description": "The location settings that includes a DN and a LDAP filter."
		},
		"Connection": {
			"type": "object",
			"required": [
				"entityId",
				"name"
			],
			"discriminator": "type",
			"properties": {
				"type": {
					"type": "string",
					"position": 5,
					"description": "The type of this connection. Default is 'IDP'.",
					"enum": [
						"IDP",
						"SP"
					]
				},
				"id": {
					"type": "string",
					"position": 10,
					"description": "The persistent, unique ID for the connection. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified."
				},
				"entityId": {
					"type": "string",
					"position": 20,
					"description": "The partner's entity ID (connection ID) or issuer value (for OIDC Connections)."
				},
				"name": {
					"type": "string",
					"position": 30,
					"description": "The connection name."
				},
				"modificationDate": {
					"type": "string",
					"format": "date-time",
					"position": 35,
					"description": "The time at which the connection was last changed. This property is read only and is ignored on PUT and POST requests."
				},
				"creationDate": {
					"type": "string",
					"format": "date-time",
					"position": 36,
					"description": "The time at which the connection was created. This property is read only and is ignored on PUT and POST requests."
				},
				"active": {
					"type": "boolean",
					"position": 40,
					"description": "Specifies whether the connection is active and ready to process incoming requests. The default value is false."
				},
				"baseUrl": {
					"type": "string",
					"position": 50,
					"description": "The fully-qualified hostname and port on which your partner's federation deployment runs."
				},
				"defaultVirtualEntityId": {
					"type": "string",
					"position": 60,
					"description": "The default alternate entity ID that identifies the local server to this partner. It is required when virtualEntityIds is not empty and must be included in that list."
				},
				"virtualEntityIds": {
					"type": "array",
					"position": 70,
					"description": "List of alternate entity IDs that identifies the local server to this partner.",
					"items": {
						"type": "string"
					}
				},
				"metadataReloadSettings": {
					"position": 75,
					"description": "Connection metadata automatic reload settings.",
					"$ref": "#/definitions/ConnectionMetadataUrl"
				},
				"credentials": {
					"position": 80,
					"description": "The certificates and settings for encryption, signing, and signature verification. It is required for  SAMLx.x and WS-Fed Connections.",
					"$ref": "#/definitions/ConnectionCredentials"
				},
				"contactInfo": {
					"position": 90,
					"description": "The contact information for this partner.",
					"$ref": "#/definitions/ContactInfo"
				},
				"licenseConnectionGroup": {
					"type": "string",
					"position": 100,
					"description": "The license connection group. If your PingFederate license is based on connection groups, each connection must be assigned to a group before it can be used."
				},
				"loggingMode": {
					"type": "string",
					"position": 110,
					"description": "The level of transaction logging applicable for this connection. Default is STANDARD.",
					"enum": [
						"NONE",
						"STANDARD",
						"ENHANCED",
						"FULL"
					]
				},
				"additionalAllowedEntitiesConfiguration": {
					"position": 120,
					"description": "Additional allowed entities or issuers configuration. Currently only used in OIDC IdP (RP) connection.",
					"$ref": "#/definitions/AdditionalAllowedEntitiesConfiguration"
				},
				"extendedProperties": {
					"type": "object",
					"position": 130,
					"description": "Extended Properties allows to store additional information for IdP/SP Connections. The names of these extended properties should be defined in /extendedProperties.",
					"additionalProperties": {
						"$ref": "#/definitions/ParameterValues"
					}
				}
			},
			"description": "Settings shared by SP-side and IdP-side connections."
		},
		"ConnectionCert": {
			"type": "object",
			"required": [
				"x509File"
			],
			"properties": {
				"certView": {
					"position": 10,
					"description": "Certificate details. This property is read-only and is always ignored on a POST or PUT.",
					"$ref": "#/definitions/CertView"
				},
				"x509File": {
					"position": 20,
					"description": "The certificate data. This property must always be supplied on a POST or PUT.",
					"$ref": "#/definitions/X509File"
				},
				"activeVerificationCert": {
					"type": "boolean",
					"position": 25,
					"description": "Indicates whether this is an active signature verification certificate."
				},
				"primaryVerificationCert": {
					"type": "boolean",
					"position": 30,
					"description": "Indicates whether this is the primary signature verification certificate. Only one certificate in the collection can have this flag set."
				},
				"secondaryVerificationCert": {
					"type": "boolean",
					"position": 40,
					"description": "Indicates whether this is the secondary signature verification certificate. Only one certificate in the collection can have this flag set."
				},
				"encryptionCert": {
					"type": "boolean",
					"position": 50,
					"description": "Indicates whether to use this cert to encrypt outgoing assertions. Only one certificate in the collection can have this flag set."
				}
			},
			"description": "A certificate used for signature verification or XML encryption."
		},
		"ConnectionCredentials": {
			"type": "object",
			"properties": {
				"verificationSubjectDN": {
					"type": "string",
					"position": 10,
					"description": "If this property is set, the verification trust model is Anchored. The verification certificate must be signed by a trusted CA and included in the incoming message, and the subject DN of the expected certificate is specified in this property. If this property is not set, then a primary verification certificate must be specified in the certs array."
				},
				"verificationIssuerDN": {
					"type": "string",
					"position": 15,
					"description": "If a verification Subject DN is provided, you can optionally restrict the issuer to a specific trusted CA by specifying its DN in this field."
				},
				"certs": {
					"type": "array",
					"position": 20,
					"description": "The certificates used for signature verification and XML encryption.",
					"items": {
						"$ref": "#/definitions/ConnectionCert"
					}
				},
				"blockEncryptionAlgorithm": {
					"type": "string",
					"position": 21,
					"description": "The algorithm used to encrypt assertions sent to this partner. AES_128, AES_256, AES_128_GCM, AES_192_GCM, AES_256_GCM and Triple_DES are supported."
				},
				"keyTransportAlgorithm": {
					"type": "string",
					"position": 22,
					"description": "The algorithm used to transport keys to this partner. RSA_OAEP, RSA_OAEP_256 and RSA_v15 are supported."
				},
				"signingSettings": {
					"position": 30,
					"description": "Settings related to the manner in which messages sent to the partner are digitally signed. Required for SP Connections.",
					"$ref": "#/definitions/SigningSettings"
				},
				"decryptionKeyPairRef": {
					"position": 40,
					"description": "The ID of the primary key pair used to decrypt message content received from this partner. The ID of the key pair is also known as the alias and can be found by viewing the corresponding certificate under 'Signing & Decryption Keys & Certificates' in the PingFederate Administrative Console.",
					"$ref": "#/definitions/ResourceLink"
				},
				"secondaryDecryptionKeyPairRef": {
					"position": 41,
					"description": "The ID of the secondary key pair used to decrypt message content received from this partner. ",
					"$ref": "#/definitions/ResourceLink"
				},
				"outboundBackChannelAuth": {
					"position": 50,
					"description": "The SOAP authentication method(s) to use when you send a message using SOAP back channel.",
					"$ref": "#/definitions/OutboundBackChannelAuth"
				},
				"inboundBackChannelAuth": {
					"position": 60,
					"description": "The SOAP authentication method(s) to use when you receive a message using SOAP back channel.",
					"$ref": "#/definitions/InboundBackChannelAuth"
				}
			},
			"description": "The certificates and settings for encryption, signing, and signature verification."
		},
		"ConnectionMetadataUrl": {
			"type": "object",
			"required": [
				"metadataUrlRef"
			],
			"properties": {
				"metadataUrlRef": {
					"position": 10,
					"description": "ID of the saved Metadata URL.",
					"$ref": "#/definitions/ResourceLink"
				},
				"enableAutoMetadataUpdate": {
					"type": "boolean",
					"position": 20,
					"description": "Specifies whether the metadata of the connection will be automatically reloaded. The default value is true."
				}
			},
			"description": "Configuration settings to enable automatic reload of partner's metadata."
		},
		"ContactInfo": {
			"type": "object",
			"properties": {
				"company": {
					"type": "string",
					"position": 10,
					"description": "Company name."
				},
				"email": {
					"type": "string",
					"position": 20,
					"description": "Contact email address."
				},
				"firstName": {
					"type": "string",
					"position": 30,
					"description": "Contact first name."
				},
				"lastName": {
					"type": "string",
					"position": 40,
					"description": "Contact last name."
				},
				"phone": {
					"type": "string",
					"position": 50,
					"description": "Contact phone number."
				}
			},
			"description": "Contact information."
		},
		"ConvertMetadataResponse": {
			"type": "object",
			"properties": {
				"signatureStatus": {
					"type": "string",
					"position": 10,
					"description": "The metadata's digital signature status.",
					"enum": [
						"SIGNED",
						"UNSIGNED"
					]
				},
				"certTrustStatus": {
					"type": "string",
					"position": 20,
					"description": "The metadata certificate's trust status, i.e. If the partner's certificate can be trusted or not.",
					"enum": [
						"TRUSTED",
						"NOT_TRUSTED"
					]
				},
				"certSubjectDn": {
					"type": "string",
					"position": 30,
					"description": "The metadata certificate's subject DN."
				},
				"certSerialNumber": {
					"type": "string",
					"position": 40,
					"description": "The metadata certificate's serial number."
				},
				"certExpiration": {
					"type": "string",
					"format": "date-time",
					"position": 50,
					"description": "The metadata certificate's expiry date."
				},
				"connection": {
					"position": 60,
					"description": "The converted API connection.",
					"$ref": "#/definitions/Connection"
				}
			},
			"description": "A response from converting SAML connection metadata into a JSON connection. It includes the converted connection and the authenticity information of the metadata."
		},
		"DataStoreRepository": {
			"type": "object",
			"required": [
				"dataStoreRef",
				"jitRepositoryAttributeMapping",
				"type"
			],
			"discriminator": "type",
			"properties": {
				"type": {
					"type": "string",
					"position": 10,
					"description": "The data store repository type.",
					"enum": [
						"LDAP",
						"JDBC"
					]
				},
				"dataStoreRef": {
					"position": 20,
					"description": "Reference to the associated data store.",
					"$ref": "#/definitions/ResourceLink"
				},
				"jitRepositoryAttributeMapping": {
					"type": "object",
					"position": 30,
					"description": "The user repository attribute mapping.",
					"additionalProperties": {
						"$ref": "#/definitions/AttributeFulfillmentValue"
					}
				}
			},
			"description": "Jit Provisioning user repository data store."
		},
		"DecryptionPolicy": {
			"type": "object",
			"properties": {
				"assertionEncrypted": {
					"type": "boolean",
					"position": 10,
					"description": "Specify whether the incoming SAML assertion is encrypted for an IdP connection."
				},
				"attributesEncrypted": {
					"type": "boolean",
					"position": 20,
					"description": "Specify whether one or more incoming SAML attributes are encrypted for an IdP connection."
				},
				"subjectNameIdEncrypted": {
					"type": "boolean",
					"position": 30,
					"description": "Specify whether the incoming Subject Name ID is encrypted for an IdP connection."
				},
				"sloEncryptSubjectNameID": {
					"type": "boolean",
					"position": 40,
					"description": "Encrypt the Subject Name ID in SLO messages to the IdP."
				},
				"sloSubjectNameIDEncrypted": {
					"type": "boolean",
					"position": 50,
					"description": "Allow encrypted Subject Name ID in SLO messages from the IdP."
				}
			},
			"description": "Defines what to decrypt in the browser-based SSO profile."
		},
		"EncryptionPolicy": {
			"type": "object",
			"properties": {
				"encryptAssertion": {
					"type": "boolean",
					"position": 10,
					"description": "Whether the outgoing SAML assertion will be encrypted."
				},
				"encryptedAttributes": {
					"type": "array",
					"position": 20,
					"description": "The list of outgoing SAML assertion attributes that will be encrypted. The 'encryptAssertion' property takes precedence over this.",
					"items": {
						"type": "string"
					}
				},
				"encryptSloSubjectNameId": {
					"type": "boolean",
					"position": 30,
					"description": "Encrypt the name-identifier attribute in outbound SLO messages.  This can be set if the name id is encrypted."
				},
				"sloSubjectNameIDEncrypted": {
					"type": "boolean",
					"position": 40,
					"description": "Allow the encryption of the name-identifier attribute for inbound SLO messages. This can be set if SP initiated SLO is enabled."
				}
			},
			"description": "Defines what to encrypt in the browser-based SSO profile."
		},
		"Entity": {
			"type": "object",
			"properties": {
				"entityId": {
					"type": "string",
					"position": 50,
					"description": "Unique entity identifier."
				},
				"entityDescription": {
					"type": "string",
					"position": 100,
					"description": "Entity description."
				}
			}
		},
		"GroupMembershipDetection": {
			"type": "object",
			"required": [
				"groupMemberAttributeName"
			],
			"properties": {
				"memberOfGroupAttributeName": {
					"type": "string",
					"position": 10,
					"description": "The name of the attribute that indicates the entity is a member of a group, also known as member of attribute."
				},
				"groupMemberAttributeName": {
					"type": "string",
					"position": 20,
					"description": "The name of the attribute that represents group members in a group, also known as group member attribute."
				}
			},
			"description": "Settings to detect group memberships."
		},
		"Groups": {
			"type": "object",
			"required": [
				"readGroups",
				"writeGroups"
			],
			"properties": {
				"writeGroups": {
					"position": 10,
					"description": "Configuration to create a group within the user repository.",
					"$ref": "#/definitions/WriteGroups"
				},
				"readGroups": {
					"position": 20,
					"description": "Configuration to lookup group info within the user repository and respond to incoming SCIM requests.",
					"$ref": "#/definitions/ReadGroups"
				}
			},
			"description": "Group creation and read configuration."
		},
		"IdentityStoreInboundProvisioningUserRepository": {
			"allOf": [
				{
					"$ref": "#/definitions/InboundProvisioningUserRepository"
				},
				{
					"type": "object",
					"required": [
						"identityStoreProvisionerRef"
					],
					"properties": {
						"identityStoreProvisionerRef": {
							"position": 20,
							"description": "Reference to the associated data store.",
							"$ref": "#/definitions/ResourceLink"
						}
					},
					"description": "Identity Store Provisioner data store user repository."
				}
			]
		},
		"IdpAdapterAssertionMapping": {
			"type": "object",
			"required": [
				"attributeContractFulfillment",
				"idpAdapterRef"
			],
			"properties": {
				"idpAdapterRef": {
					"position": 5,
					"description": "Reference to the associated IdP adapter.<br>Note: This is ignored if adapter overrides for this mapping exists. In this case, the override's parent adapter reference is used.",
					"$ref": "#/definitions/ResourceLink"
				},
				"restrictVirtualEntityIds": {
					"type": "boolean",
					"position": 6,
					"description": "Restricts this mapping to specific virtual entity IDs."
				},
				"restrictedVirtualEntityIds": {
					"type": "array",
					"position": 7,
					"description": "The list of virtual server IDs that this mapping is restricted to.",
					"items": {
						"type": "string"
					}
				},
				"adapterOverrideSettings": {
					"position": 8,
					"description": "Connection specific configuration overrides for the mapped adapter instance.",
					"$ref": "#/definitions/IdpAdapter"
				},
				"abortSsoTransactionAsFailSafe": {
					"type": "boolean",
					"position": 9,
					"description": "If set to true, SSO transaction will be aborted as a fail-safe when the data-store's attribute mappings fail to complete the attribute contract. Otherwise, the attribute contract with default values is used. By default, this value is false."
				},
				"attributeSources": {
					"type": "array",
					"position": 10,
					"description": "A list of configured data stores to look up attributes from.",
					"items": {
						"$ref": "#/definitions/AttributeSource"
					}
				},
				"attributeContractFulfillment": {
					"type": "object",
					"position": 20,
					"description": "A list of mappings from attribute names to their fulfillment values.",
					"additionalProperties": {
						"$ref": "#/definitions/AttributeFulfillmentValue"
					}
				},
				"issuanceCriteria": {
					"position": 30,
					"description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
					"$ref": "#/definitions/IssuanceCriteria"
				}
			},
			"description": "The IdP Adapter Assertion Mapping."
		},
		"IdpAttributeQuery": {
			"type": "object",
			"required": [
				"url"
			],
			"properties": {
				"url": {
					"type": "string",
					"position": 10,
					"description": "The URL at your IdP partner's site where attribute queries are to be sent."
				},
				"nameMappings": {
					"type": "array",
					"position": 20,
					"description": "The attribute name mappings between the SP and the IdP.",
					"items": {
						"$ref": "#/definitions/AttributeQueryNameMapping"
					}
				},
				"policy": {
					"position": 30,
					"description": "The attribute query profile's security policy.",
					"$ref": "#/definitions/IdpAttributeQueryPolicy"
				}
			},
			"description": "The attribute query profile supports local applications in requesting user attributes from an attribute authority."
		},
		"IdpAttributeQueryPolicy": {
			"type": "object",
			"properties": {
				"requireSignedResponse": {
					"type": "boolean",
					"position": 10,
					"description": "Require signed response."
				},
				"requireSignedAssertion": {
					"type": "boolean",
					"position": 20,
					"description": "Require signed assertion."
				},
				"requireEncryptedAssertion": {
					"type": "boolean",
					"position": 30,
					"description": "Require encrypted assertion."
				},
				"signAttributeQuery": {
					"type": "boolean",
					"position": 40,
					"description": "Sign the attribute query."
				},
				"encryptNameId": {
					"type": "boolean",
					"position": 50,
					"description": "Encrypt the name identifier."
				},
				"maskAttributeValues": {
					"type": "boolean",
					"position": 60,
					"description": "Mask attributes in log files."
				}
			},
			"description": "The attribute query profile's security policy."
		},
		"IdpBrowserSso": {
			"type": "object",
			"required": [
				"idpIdentityMapping",
				"protocol"
			],
			"properties": {
				"protocol": {
					"type": "string",
					"position": 10,
					"description": "The browser-based SSO protocol to use.",
					"enum": [
						"SAML20",
						"WSFED",
						"SAML11",
						"SAML10",
						"OIDC"
					]
				},
				"oidcProviderSettings": {
					"position": 15,
					"description": "The OpenID Provider configuration settings. Required for an OIDC connection.",
					"$ref": "#/definitions/OIDCProviderSettings"
				},
				"enabledProfiles": {
					"type": "array",
					"position": 20,
					"description": "The profiles that are enabled for browser-based SSO. SAML 2.0 supports all profiles whereas SAML 1.x IdP connections support both IdP and SP (non-standard) initiated SSO. This is required for SAMLx.x Connections. ",
					"uniqueItems": true,
					"items": {
						"type": "string",
						"enum": [
							"IDP_INITIATED_SSO",
							"SP_INITIATED_SSO",
							"IDP_INITIATED_SLO",
							"SP_INITIATED_SLO"
						]
					}
				},
				"incomingBindings": {
					"type": "array",
					"position": 30,
					"description": "The SAML bindings that are enabled for browser-based SSO. This is required for SAML 2.0 connections when the enabled profiles contain the SP-initiated SSO profile or either SLO profile. For SAML 1.x based connections, it is not used for SP Connections and it is optional for IdP Connections.",
					"uniqueItems": true,
					"items": {
						"type": "string",
						"enum": [
							"ARTIFACT",
							"POST",
							"REDIRECT",
							"SOAP"
						]
					}
				},
				"messageCustomizations": {
					"type": "array",
					"position": 40,
					"description": "The message customizations for browser-based SSO. Depending on server settings, connection type, and protocol this may or may not be supported.",
					"items": {
						"$ref": "#/definitions/ProtocolMessageCustomization"
					}
				},
				"urlWhitelistEntries": {
					"type": "array",
					"position": 50,
					"description": "For WS-Federation connections, a whitelist of additional allowed domains and paths used to validate wreply for SLO, if enabled.",
					"items": {
						"$ref": "#/definitions/UrlWhitelistEntry"
					}
				},
				"artifact": {
					"position": 60,
					"description": "The settings for an artifact binding.",
					"$ref": "#/definitions/ArtifactSettings"
				},
				"sloServiceEndpoints": {
					"type": "array",
					"position": 70,
					"description": "A list of possible endpoints to send SLO requests and responses.",
					"items": {
						"$ref": "#/definitions/SloServiceEndpoint"
					}
				},
				"alwaysSignArtifactResponse": {
					"type": "boolean",
					"position": 90,
					"description": "Specify to always sign the SAML ArtifactResponse."
				},
				"ssoServiceEndpoints": {
					"type": "array",
					"position": 1000,
					"description": "The IdP SSO endpoints that define where to send your authentication requests. Only required for SP initiated SSO. This is required for SAML x.x and WS-FED Connections.",
					"items": {
						"$ref": "#/definitions/IdpSsoServiceEndpoint"
					}
				},
				"defaultTargetUrl": {
					"type": "string",
					"position": 1010,
					"description": "The default target URL for this connection. If defined, this overrides the default URL."
				},
				"authnContextMappings": {
					"type": "array",
					"position": 1015,
					"description": "A list of authentication context mappings between local and remote values. Applicable for SAML 2.0 and OIDC protocol connections.",
					"items": {
						"$ref": "#/definitions/AuthnContextMapping"
					}
				},
				"assertionsSigned": {
					"type": "boolean",
					"position": 1020,
					"description": "Specify whether the incoming SAML assertions are signed rather than the entire SAML response being signed."
				},
				"signAuthnRequests": {
					"type": "boolean",
					"position": 1030,
					"description": "Determines whether SAML authentication requests should be signed."
				},
				"decryptionPolicy": {
					"position": 1040,
					"description": "The SAML 2.0 decryption policy for browser-based SSO.",
					"$ref": "#/definitions/DecryptionPolicy"
				},
				"idpIdentityMapping": {
					"type": "string",
					"position": 1050,
					"description": "Defines the process in which users authenticated by the IdP are associated with user accounts local to the SP.",
					"enum": [
						"ACCOUNT_MAPPING",
						"ACCOUNT_LINKING",
						"NONE"
					]
				},
				"attributeContract": {
					"position": 1060,
					"description": "The list of attributes that the IdP sends in the assertion.",
					"$ref": "#/definitions/IdpBrowserSsoAttributeContract"
				},
				"adapterMappings": {
					"type": "array",
					"position": 1070,
					"description": "A list of adapters that map to incoming assertions.",
					"items": {
						"$ref": "#/definitions/SpAdapterMapping"
					}
				},
				"authenticationPolicyContractMappings": {
					"type": "array",
					"position": 1080,
					"description": "A list of Authentication Policy Contracts that map to incoming assertions.",
					"items": {
						"$ref": "#/definitions/AuthenticationPolicyContractMapping"
					}
				},
				"ssoOAuthMapping": {
					"position": 1090,
					"description": "Direct mapping from the IdP connection to the OAuth persistent grant.",
					"$ref": "#/definitions/SsoOAuthMapping"
				},
				"oauthAuthenticationPolicyContractRef": {
					"position": 1100,
					"description": "The Authentication policy contract to map into for OAuth. The policy contract can subsequently be mapped into the OAuth persistent grant.",
					"$ref": "#/definitions/ResourceLink"
				},
				"jitProvisioning": {
					"position": 1110,
					"description": "JIT Provisioning of user accounts.",
					"$ref": "#/definitions/JitProvisioning"
				}
			},
			"description": "The settings used to enable secure browser-based SSO to resources at your site."
		},
		"IdpBrowserSsoAttribute": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of this attribute."
				},
				"masked": {
					"type": "boolean",
					"position": 1000,
					"description": "Specifies whether this attribute is masked in PingFederate logs. Defaults to false."
				}
			},
			"description": "An attribute for the IdP Browser SSO attribute contract."
		},
		"IdpBrowserSsoAttributeContract": {
			"type": "object",
			"properties": {
				"coreAttributes": {
					"type": "array",
					"position": 10,
					"description": "A list of read-only assertion attributes that are automatically populated by PingFederate.",
					"items": {
						"$ref": "#/definitions/IdpBrowserSsoAttribute"
					}
				},
				"extendedAttributes": {
					"type": "array",
					"position": 20,
					"description": "A list of additional attributes that are present in the incoming assertion.",
					"items": {
						"$ref": "#/definitions/IdpBrowserSsoAttribute"
					}
				}
			},
			"description": "A set of user attributes that the IdP sends in the SAML assertion."
		},
		"IdpConnection": {
			"allOf": [
				{
					"$ref": "#/definitions/Connection"
				},
				{
					"type": "object",
					"properties": {
						"oidcClientCredentials": {
							"position": 63,
							"description": "The OIDC client credentials. This is required for an OIDC connection.",
							"$ref": "#/definitions/OIDCClientCredentials"
						},
						"idpBrowserSso": {
							"position": 65,
							"description": "The browser-based SSO settings used to communicate with your IdP.",
							"$ref": "#/definitions/IdpBrowserSso"
						},
						"attributeQuery": {
							"position": 66,
							"description": "The attribute query settings for requesting user attributes from an attribute authority.",
							"$ref": "#/definitions/IdpAttributeQuery"
						},
						"idpOAuthGrantAttributeMapping": {
							"position": 67,
							"description": "The OAuth Assertion Grant settings used to map from your IdP.",
							"$ref": "#/definitions/IdpOAuthGrantAttributeMapping"
						},
						"wsTrust": {
							"position": 70,
							"description": "The Ws-Trust settings.",
							"$ref": "#/definitions/IdpWsTrust"
						},
						"inboundProvisioning": {
							"position": 80,
							"description": "The Inbound Provisioning settings used to provision user accounts and groups.",
							"$ref": "#/definitions/IdpInboundProvisioning"
						},
						"errorPageMsgId": {
							"type": "string",
							"position": 1000,
							"description": "Identifier that specifies the message displayed on a user-facing error page."
						}
					},
					"description": "The set of attributes used to configure an IdP connection."
				}
			]
		},
		"IdpInboundProvisioning": {
			"type": "object",
			"required": [
				"customSchema",
				"groupSupport",
				"groups",
				"userRepository",
				"users"
			],
			"properties": {
				"groupSupport": {
					"type": "boolean",
					"position": 10,
					"description": "Specify support for provisioning of groups."
				},
				"userRepository": {
					"position": 20,
					"description": "The local repository for user accounts and groups requiring provisioning.",
					"$ref": "#/definitions/InboundProvisioningUserRepository"
				},
				"customSchema": {
					"position": 30,
					"description": "The Custom SCIM Attributes configuration.",
					"$ref": "#/definitions/Schema"
				},
				"users": {
					"position": 40,
					"description": "User creation and read configuration.",
					"$ref": "#/definitions/Users"
				},
				"groups": {
					"position": 50,
					"description": "Group creation and read configuration.",
					"$ref": "#/definitions/Groups"
				},
				"actionOnDelete": {
					"type": "string",
					"position": 60,
					"description": "Specify behavior of how SCIM DELETE requests are handled.",
					"enum": [
						"DISABLE_USER",
						"PERMANENTLY_DELETE_USER"
					]
				}
			},
			"description": "SCIM Inbound Provisioning specifies how and when to provision user accounts and groups."
		},
		"IdpInboundProvisioningAttribute": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of this attribute."
				},
				"masked": {
					"type": "boolean",
					"position": 1000,
					"description": "Specifies whether this attribute is masked in PingFederate logs. Defaults to false."
				}
			},
			"description": "An attribute for the IdP Inbound Provisioning attribute contract."
		},
		"IdpInboundProvisioningAttributeContract": {
			"type": "object",
			"properties": {
				"coreAttributes": {
					"type": "array",
					"position": 10,
					"description": "A list of read-only assertion attributes that are automatically populated by PingFederate.",
					"items": {
						"$ref": "#/definitions/IdpInboundProvisioningAttribute"
					}
				},
				"extendedAttributes": {
					"type": "array",
					"position": 20,
					"description": "A list of additional attributes that are added to the SCIM response.",
					"items": {
						"$ref": "#/definitions/IdpInboundProvisioningAttribute"
					}
				}
			},
			"description": "A set of user attributes that the IdP sends in the SCIM response."
		},
		"IdpOAuthAttributeContract": {
			"type": "object",
			"properties": {
				"coreAttributes": {
					"type": "array",
					"position": 10,
					"description": "A list of read-only assertion attributes that are automatically populated by PingFederate.",
					"items": {
						"$ref": "#/definitions/IdpBrowserSsoAttribute"
					}
				},
				"extendedAttributes": {
					"type": "array",
					"position": 20,
					"description": "A list of additional attributes that are present in the incoming assertion.",
					"items": {
						"$ref": "#/definitions/IdpBrowserSsoAttribute"
					}
				}
			},
			"description": "A set of user attributes that the IdP sends in the OAuth Assertion Grant."
		},
		"IdpOAuthGrantAttributeMapping": {
			"type": "object",
			"properties": {
				"accessTokenManagerMappings": {
					"type": "array",
					"position": 10,
					"description": "A mapping in a connection that defines how access tokens are created.",
					"items": {
						"$ref": "#/definitions/AccessTokenManagerMapping"
					}
				},
				"idpOAuthAttributeContract": {
					"position": 20,
					"description": "A set of user attributes that the IdP sends in the OAuth Assertion Grant.",
					"$ref": "#/definitions/IdpOAuthAttributeContract"
				}
			},
			"description": "The OAuth Assertion Grant settings used to map from your IdP."
		},
		"IdpSsoServiceEndpoint": {
			"type": "object",
			"required": [
				"binding",
				"url"
			],
			"properties": {
				"binding": {
					"type": "string",
					"position": 10,
					"description": "The binding of this endpoint, if applicable - usually only required for SAML 2.0 endpoints.",
					"enum": [
						"ARTIFACT",
						"POST",
						"REDIRECT",
						"SOAP"
					]
				},
				"url": {
					"type": "string",
					"position": 20,
					"description": "The absolute or relative URL of the endpoint. A relative URL can be specified if a base URL for the connection has been defined."
				}
			},
			"description": "The settings that define an endpoint to an IdP SSO service."
		},
		"IdpTokenProcessorMapping": {
			"type": "object",
			"required": [
				"attributeContractFulfillment",
				"idpTokenProcessorRef"
			],
			"properties": {
				"idpTokenProcessorRef": {
					"position": 5,
					"description": "Reference to the associated token processor.",
					"$ref": "#/definitions/ResourceLink"
				},
				"restrictedVirtualEntityIds": {
					"type": "array",
					"position": 6,
					"description": "The list of virtual server IDs that this mapping is restricted to.",
					"items": {
						"type": "string"
					}
				},
				"attributeSources": {
					"type": "array",
					"position": 10,
					"description": "A list of configured data stores to look up attributes from.",
					"items": {
						"$ref": "#/definitions/AttributeSource"
					}
				},
				"attributeContractFulfillment": {
					"type": "object",
					"position": 20,
					"description": "A list of mappings from attribute names to their fulfillment values.",
					"additionalProperties": {
						"$ref": "#/definitions/AttributeFulfillmentValue"
					}
				},
				"issuanceCriteria": {
					"position": 30,
					"description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
					"$ref": "#/definitions/IssuanceCriteria"
				}
			},
			"description": "The IdP Token Processor Mapping."
		},
		"IdpWsTrust": {
			"type": "object",
			"required": [
				"attributeContract",
				"generateLocalToken"
			],
			"properties": {
				"attributeContract": {
					"position": 10,
					"description": "A set of user attributes that the SP receives in the incoming token.",
					"$ref": "#/definitions/IdpWsTrustAttributeContract"
				},
				"generateLocalToken": {
					"type": "boolean",
					"position": 20,
					"description": "Indicates whether a local token needs to be generated. The default value is false."
				},
				"tokenGeneratorMappings": {
					"type": "array",
					"position": 30,
					"description": "A list of token generators to generate local tokens. Required if a local token needs to be generated.",
					"items": {
						"$ref": "#/definitions/SpTokenGeneratorMapping"
					}
				}
			},
			"description": "Ws-Trust STS provides validation of incoming tokens which enable SSO access to Web Services. It also allows generation of local tokens for Web Services."
		},
		"IdpWsTrustAttribute": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of this attribute."
				},
				"masked": {
					"type": "boolean",
					"position": 1000,
					"description": "Specifies whether this attribute is masked in PingFederate logs. Defaults to false."
				}
			},
			"description": "An attribute for the Ws-Trust attribute contract."
		},
		"IdpWsTrustAttributeContract": {
			"type": "object",
			"properties": {
				"coreAttributes": {
					"type": "array",
					"position": 10,
					"description": "A list of read-only assertion attributes that are automatically populated by PingFederate.",
					"items": {
						"$ref": "#/definitions/IdpWsTrustAttribute"
					}
				},
				"extendedAttributes": {
					"type": "array",
					"position": 20,
					"description": "A list of additional attributes that are receive in the incoming assertion.",
					"items": {
						"$ref": "#/definitions/IdpWsTrustAttribute"
					}
				}
			},
			"description": "A set of user attributes that this server will receive in the token."
		},
		"InboundBackChannelAuth": {
			"allOf": [
				{
					"$ref": "#/definitions/BackChannelAuth"
				},
				{
					"type": "object",
					"properties": {
						"verificationSubjectDN": {
							"type": "string",
							"position": 40,
							"description": "If this property is set, the verification trust model is Anchored. The verification certificate must be signed by a trusted CA and included in the incoming message, and the subject DN of the expected certificate is specified in this property. If this property is not set, then a primary verification certificate must be specified in the certs array."
						},
						"verificationIssuerDN": {
							"type": "string",
							"position": 50,
							"description": "If a verification Subject DN is provided, you can optionally restrict the issuer to a specific trusted CA by specifying its DN in this field."
						},
						"certs": {
							"type": "array",
							"position": 60,
							"description": "The certificate used for signature verification and XML encryption.",
							"items": {
								"$ref": "#/definitions/ConnectionCert"
							}
						},
						"requireSsl": {
							"type": "boolean",
							"position": 70,
							"description": "Incoming HTTP transmissions must use a secure channel."
						}
					}
				}
			]
		},
		"InboundProvisioningUserRepository": {
			"type": "object",
			"required": [
				"type"
			],
			"discriminator": "type",
			"properties": {
				"type": {
					"type": "string",
					"position": 10,
					"description": "The user repository type.",
					"enum": [
						"LDAP",
						"IDENTITY_STORE"
					]
				}
			},
			"description": "SCIM Inbound Provisioning user repository."
		},
		"JdbcDataStoreRepository": {
			"allOf": [
				{
					"$ref": "#/definitions/DataStoreRepository"
				},
				{
					"type": "object",
					"required": [
						"jitRepositoryAttributeMapping",
						"sqlMethod"
					],
					"properties": {
						"sqlMethod": {
							"position": 30,
							"description": "The method to map attributes from the assertion directly to database table columns or to stored-procedure parameters.",
							"$ref": "#/definitions/SqlMethod"
						},
						"jitRepositoryAttributeMapping": {
							"type": "object",
							"position": 40,
							"description": "A list of user repository mappings from attribute names to their fulfillment values.",
							"additionalProperties": {
								"$ref": "#/definitions/AttributeFulfillmentValue"
							}
						}
					},
					"description": "JDBC data store user repository."
				}
			]
		},
		"JitProvisioning": {
			"type": "object",
			"required": [
				"userAttributes",
				"userRepository"
			],
			"properties": {
				"userAttributes": {
					"position": 10,
					"description": "Attributes from the SAML Assertion.",
					"$ref": "#/definitions/JitProvisioningUserAttributes"
				},
				"userRepository": {
					"position": 20,
					"description": "The data store used as the local repository for user provisioning.",
					"$ref": "#/definitions/DataStoreRepository"
				},
				"eventTrigger": {
					"type": "string",
					"position": 30,
					"description": "Specify when provisioning occurs during assertion processing. The default is 'NEW_USER_ONLY'.",
					"enum": [
						"NEW_USER_ONLY",
						"ALL_SAML_ASSERTIONS"
					]
				},
				"errorHandling": {
					"type": "string",
					"position": 40,
					"description": "Specify behavior when provisioning request fails. The default is 'CONTINUE_SSO'.",
					"enum": [
						"CONTINUE_SSO",
						"ABORT_SSO"
					]
				}
			},
			"description": "The settings used to specify how and when to provision user accounts."
		},
		"JitProvisioningUserAttributes": {
			"type": "object",
			"properties": {
				"attributeContract": {
					"type": "array",
					"position": 10,
					"description": "A list of user attributes that the IdP sends in the SAML assertion.",
					"items": {
						"$ref": "#/definitions/IdpBrowserSsoAttribute"
					}
				},
				"doAttributeQuery": {
					"type": "boolean",
					"position": 20,
					"description": "Specify whether to use only attributes from the SAML Assertion or retrieve additional attributes from the IdP. The default is false."
				}
			}
		},
		"LdapDataStoreRepository": {
			"allOf": [
				{
					"$ref": "#/definitions/DataStoreRepository"
				},
				{
					"type": "object",
					"required": [
						"jitRepositoryAttributeMapping",
						"uniqueUserIdFilter"
					],
					"properties": {
						"baseDn": {
							"type": "string",
							"position": 30,
							"description": "The base DN to search from. If not specified, the search will start at the LDAP's root."
						},
						"uniqueUserIdFilter": {
							"type": "string",
							"position": 40,
							"description": "The expression that results in a unique user identifier, when combined with the Base DN."
						},
						"jitRepositoryAttributeMapping": {
							"type": "object",
							"position": 50,
							"description": "A list of user repository mappings from attribute names to their fulfillment values.",
							"additionalProperties": {
								"$ref": "#/definitions/AttributeFulfillmentValue"
							}
						}
					},
					"description": "LDAP data store user repository."
				}
			]
		},
		"LdapInboundProvisioningUserRepository": {
			"allOf": [
				{
					"$ref": "#/definitions/InboundProvisioningUserRepository"
				},
				{
					"type": "object",
					"required": [
						"dataStoreRef",
						"uniqueGroupIdFilter",
						"uniqueUserIdFilter"
					],
					"properties": {
						"dataStoreRef": {
							"position": 20,
							"description": "Reference to the associated data store.",
							"$ref": "#/definitions/ResourceLink"
						},
						"baseDn": {
							"type": "string",
							"position": 30,
							"description": "The base DN to search from. If not specified, the search will start at the LDAP's root."
						},
						"uniqueUserIdFilter": {
							"type": "string",
							"position": 40,
							"description": "The expression that results in a unique user identifier, when combined with the Base DN."
						},
						"uniqueGroupIdFilter": {
							"type": "string",
							"position": 50,
							"description": "The expression that results in a unique group identifier, when combined with the Base DN."
						}
					},
					"description": "LDAP Active Directory data store user repository"
				}
			]
		},
		"OIDCClientCredentials": {
			"type": "object",
			"required": [
				"clientId"
			],
			"properties": {
				"clientId": {
					"type": "string",
					"position": 10,
					"description": "The OpenID Connect client identitification."
				},
				"clientSecret": {
					"type": "string",
					"position": 20,
					"description": "The OpenID Connect client secret. To update the client secret, specify the plaintext value in this field.  This field will not be populated for GET requests."
				},
				"encryptedSecret": {
					"type": "string",
					"position": 30,
					"description": "For GET requests, this field contains the encrypted client secret, if one exists.  For POST and PUT requests, if you wish to reuse the existing secret, this field should be passed back unchanged."
				}
			},
			"description": "The OpenID Connect Client Credentials settings. This is required for an OIDC Connection."
		},
		"OIDCProviderSettings": {
			"type": "object",
			"required": [
				"authorizationEndpoint",
				"jwksURL",
				"loginType",
				"scopes"
			],
			"properties": {
				"scopes": {
					"type": "string",
					"position": 100,
					"description": "Space separated scope values that the OpenID Provider supports."
				},
				"authorizationEndpoint": {
					"type": "string",
					"position": 110,
					"description": "URL of the OpenID Provider's OAuth 2.0 Authorization Endpoint."
				},
				"loginType": {
					"type": "string",
					"position": 120,
					"description": "The OpenID Connect login type. These values maps to: <br>  CODE: Authentication using Code Flow <br> POST: Authentication using Form Post <br> POST_AT: Authentication using Form Post with Access Token",
					"enum": [
						"CODE",
						"POST",
						"POST_AT"
					]
				},
				"authenticationScheme": {
					"type": "string",
					"position": 130,
					"description": "The OpenID Connect Authentication Scheme. This is required for Authentication using Code Flow. ",
					"enum": [
						"BASIC",
						"POST",
						"PRIVATE_KEY_JWT"
					]
				},
				"authenticationSigningAlgorithm": {
					"type": "string",
					"position": 140,
					"description": "The authentication signing algorithm for token endpoint PRIVATE_KEY_JWT authentication. Only asymmetric algorithms are allowed. For RSASSA-PSS signing algorithm, PingFederate must be integrated with a hardware security module (HSM) or Java 11.",
					"enum": [
						"NONE",
						"HS256",
						"HS384",
						"HS512",
						"RS256",
						"RS384",
						"RS512",
						"ES256",
						"ES384",
						"ES512",
						"PS256",
						"PS384",
						"PS512"
					]
				},
				"requestSigningAlgorithm": {
					"type": "string",
					"position": 150,
					"description": "The request signing algorithm. Required only if you wish to use signed requests. Only asymmetric algorithms are allowed. For RSASSA-PSS signing algorithm, PingFederate must be integrated with a hardware security module (HSM) or Java 11.",
					"enum": [
						"NONE",
						"HS256",
						"HS384",
						"HS512",
						"RS256",
						"RS384",
						"RS512",
						"ES256",
						"ES384",
						"ES512",
						"PS256",
						"PS384",
						"PS512"
					]
				},
				"enablePKCE": {
					"type": "boolean",
					"position": 155,
					"description": "Enable Proof Key for Code Exchange (PKCE). When enabled, the client sends an SHA-256 code challenge and corresponding code verifier to the OpenID Provider during the authorization code flow."
				},
				"tokenEndpoint": {
					"type": "string",
					"position": 160,
					"description": "URL of the OpenID Provider's OAuth 2.0 Token Endpoint."
				},
				"userInfoEndpoint": {
					"type": "string",
					"position": 170,
					"description": "URL of the OpenID Provider's UserInfo Endpoint."
				},
				"jwksURL": {
					"type": "string",
					"position": 180,
					"description": "URL of the OpenID Provider's JSON Web Key Set [JWK] document."
				},
				"requestParameters": {
					"type": "array",
					"position": 190,
					"description": "A list of request parameters. Request parameters with same name but different attribute values are treated as a multi-valued request parameter.",
					"items": {
						"$ref": "#/definitions/OIDCRequestParameter"
					}
				}
			},
			"description": "The OpenID Provider settings."
		},
		"OIDCRequestParameter": {
			"type": "object",
			"required": [
				"applicationEndpointOverride",
				"attributeValue",
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "Request parameter name."
				},
				"attributeValue": {
					"position": 20,
					"description": "A request parameter attribute value with source type.",
					"$ref": "#/definitions/AttributeFulfillmentValue"
				},
				"value": {
					"type": "string",
					"position": 30,
					"description": "A request parameter value. A parameter can have either a value or a attribute value but not both. Value set here will be converted to an attribute value of source type TEXT. An empty value will be converted to attribute value of source type NO_MAPPING."
				},
				"applicationEndpointOverride": {
					"type": "boolean",
					"position": 40,
					"description": "Indicates whether the parameter value can be overridden by an Application Endpoint parameter"
				}
			},
			"description": "An OIDC custom request parameter."
		},
		"OutboundBackChannelAuth": {
			"allOf": [
				{
					"$ref": "#/definitions/BackChannelAuth"
				},
				{
					"type": "object",
					"properties": {
						"sslAuthKeyPairRef": {
							"position": 40,
							"description": "The ID of the key pair used to authenticate with your partner's SOAP endpoint. The ID of the key pair is also known as the alias and can be found by viewing the corresponding certificate under 'SSL Server Certificates' in the PingFederate Administrative Console.",
							"$ref": "#/definitions/ResourceLink"
						},
						"validatePartnerCert": {
							"type": "boolean",
							"position": 50,
							"description": "Validate the partner server certificate. Default is true."
						}
					}
				}
			]
		},
		"OutboundProvision": {
			"type": "object",
			"required": [
				"channels",
				"targetSettings",
				"type"
			],
			"properties": {
				"type": {
					"type": "string",
					"position": 20,
					"description": "The SaaS plugin type."
				},
				"targetSettings": {
					"type": "array",
					"position": 30,
					"description": "Configuration fields that includes credentials to target SaaS application.",
					"items": {
						"$ref": "#/definitions/ConfigField"
					}
				},
				"customSchema": {
					"position": 40,
					"description": "Custom SCIM attribute configuration.",
					"$ref": "#/definitions/Schema"
				},
				"channels": {
					"type": "array",
					"position": 50,
					"description": "Includes settings of a source data store, managing provisioning threads and mapping of attributes.",
					"items": {
						"$ref": "#/definitions/Channel"
					}
				}
			},
			"description": "Outbound Provisioning allows an IdP to create and maintain user accounts at standards-based partner sites using SCIM as well as select-proprietary provisioning partner sites that are protocol-enabled."
		},
		"ParameterValues": {
			"type": "object",
			"properties": {
				"values": {
					"type": "array",
					"position": 10,
					"description": "A List of values",
					"items": {
						"type": "string"
					}
				}
			},
			"description": "Parameter Values."
		},
		"ProtocolMessageCustomization": {
			"type": "object",
			"properties": {
				"contextName": {
					"type": "string",
					"position": 10,
					"description": "The context in which the customization will be applied. Depending on the connection type and protocol, this can either be 'assertion', 'authn-response' or 'authn-request'."
				},
				"messageExpression": {
					"type": "string",
					"position": 20,
					"description": "The OGNL expression that will be executed. Refer to the Admin Manual for a list of variables provided by PingFederate."
				}
			},
			"description": "The message customization that will be executed on outgoing PingFederate messages."
		},
		"ReadGroups": {
			"type": "object",
			"required": [
				"attributeContract",
				"attributeFulfillment",
				"attributes"
			],
			"properties": {
				"attributeContract": {
					"position": 10,
					"description": "A list of attributes that the IdP sends in the SCIM response.",
					"$ref": "#/definitions/IdpInboundProvisioningAttributeContract"
				},
				"attributes": {
					"type": "array",
					"position": 20,
					"description": "A list of LDAP data store attributes to populate a response to a user-provisioning request.",
					"items": {
						"$ref": "#/definitions/Attribute"
					}
				},
				"attributeFulfillment": {
					"type": "object",
					"position": 30,
					"description": "A list of user repository mappings from attribute names to their fulfillment values.",
					"additionalProperties": {
						"$ref": "#/definitions/AttributeFulfillmentValue"
					}
				}
			},
			"description": "Group info lookup and respond to incoming SCIM requests configuration."
		},
		"ReadUsers": {
			"type": "object",
			"required": [
				"attributeContract",
				"attributeFulfillment",
				"attributes"
			],
			"properties": {
				"attributeContract": {
					"position": 10,
					"description": "A list of attributes that the IdP sends in the SCIM response.",
					"$ref": "#/definitions/IdpInboundProvisioningAttributeContract"
				},
				"attributes": {
					"type": "array",
					"position": 20,
					"description": "A list of LDAP data store attributes to populate a response to a user-provisioning request.",
					"items": {
						"$ref": "#/definitions/Attribute"
					}
				},
				"attributeFulfillment": {
					"type": "object",
					"position": 30,
					"description": "A list of user repository mappings from attribute names to their fulfillment values.",
					"additionalProperties": {
						"$ref": "#/definitions/AttributeFulfillmentValue"
					}
				}
			},
			"description": "User info lookup and respond to incoming SCIM requests configuration."
		},
		"SaasAttributeMapping": {
			"type": "object",
			"required": [
				"fieldName",
				"saasFieldInfo"
			],
			"properties": {
				"fieldName": {
					"type": "string",
					"position": 10,
					"description": "The name of target field."
				},
				"saasFieldInfo": {
					"position": 20,
					"description": "The settings that represent how attribute values from source data store will be mapped into Fields specified by the service provider.",
					"$ref": "#/definitions/SaasFieldConfiguration"
				}
			},
			"description": "Settings to map the source record attributes to target attributes."
		},
		"SaasFieldConfiguration": {
			"type": "object",
			"properties": {
				"attributeNames": {
					"type": "array",
					"position": 10,
					"description": "The list of source attribute names used to generate or map to a target field",
					"uniqueItems": true,
					"items": {
						"type": "string"
					}
				},
				"defaultValue": {
					"type": "string",
					"position": 20,
					"description": "The default value for the target field"
				},
				"expression": {
					"type": "string",
					"position": 30,
					"description": "An OGNL expression to obtain a value."
				},
				"createOnly": {
					"type": "boolean",
					"position": 40,
					"description": "Indicates whether this field is a create only field and cannot be updated."
				},
				"trim": {
					"type": "boolean",
					"position": 50,
					"description": "Indicates whether field should be trimmed before provisioning."
				},
				"characterCase": {
					"type": "string",
					"position": 60,
					"description": "The character case of the field value.",
					"enum": [
						"LOWER",
						"UPPER",
						"NONE"
					]
				},
				"parser": {
					"type": "string",
					"position": 110,
					"description": "Indicates how the field shall be parsed.",
					"enum": [
						"EXTRACT_CN_FROM_DN",
						"EXTRACT_USERNAME_FROM_EMAIL",
						"NONE"
					]
				},
				"masked": {
					"type": "boolean",
					"position": 120,
					"description": "Indicates whether the attribute should be masked in server logs."
				}
			},
			"description": "The settings that represent how attribute values from source data store will be mapped into Fields specified by the service provider."
		},
		"Schema": {
			"type": "object",
			"properties": {
				"namespace": {
					"type": "string"
				},
				"attributes": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/SchemaAttribute"
					}
				}
			},
			"description": "Custom SCIM Attributes configuration."
		},
		"SchemaAttribute": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"description": "Name of the attribute."
				},
				"multiValued": {
					"type": "boolean",
					"description": "Indicates whether the attribute is multi-valued."
				},
				"types": {
					"type": "array",
					"description": "Represents the name of each attribute type in case of multi-valued attribute.",
					"items": {
						"type": "string"
					}
				},
				"subAttributes": {
					"type": "array",
					"description": "List of sub-attributes for an attribute.",
					"items": {
						"type": "string"
					}
				}
			},
			"description": "A custom SCIM attribute."
		},
		"SigningSettings": {
			"type": "object",
			"required": [
				"signingKeyPairRef"
			],
			"properties": {
				"signingKeyPairRef": {
					"position": 10,
					"description": "The ID of the key pair used to sign messages sent to this partner. The ID of the key pair is also known as the alias and can be found by viewing the corresponding certificate under 'Signing & Decryption Keys & Certificates' in the PingFederate admin console.",
					"$ref": "#/definitions/ResourceLink"
				},
				"alternativeSigningKeyPairRefs": {
					"type": "array",
					"position": 20,
					"description": "The list of IDs of alternative key pairs used to sign messages sent to this partner. The ID of the key pair is also known as the alias and can be found by viewing the corresponding certificate under 'Signing & Decryption Keys & Certificates' in the PingFederate admin console.",
					"items": {
						"$ref": "#/definitions/ResourceLink"
					}
				},
				"algorithm": {
					"type": "string",
					"position": 30,
					"description": "The algorithm used to sign messages sent to this partner. The default is SHA1withDSA for DSA certs, SHA256withRSA for RSA certs, and SHA256withECDSA for EC certs. For RSA certs, SHA1withRSA, SHA384withRSA, and SHA512withRSA are also supported. For EC certs, SHA384withECDSA and SHA512withECDSA are also supported. If the connection is WS-Federation with JWT token type, then the possible values are RSA SHA256, RSA SHA384, RSA SHA512, ECDSA SHA256, ECDSA SHA384, ECDSA SHA512"
				},
				"includeCertInSignature": {
					"type": "boolean",
					"position": 40,
					"description": "Determines whether the signing certificate is included in the signature <KeyInfo> element."
				},
				"includeRawKeyInSignature": {
					"type": "boolean",
					"position": 50,
					"description": "Determines whether the <KeyValue> element with the raw public key is included in the signature <KeyInfo> element."
				}
			},
			"description": "Settings related to signing messages sent to this partner."
		},
		"SloServiceEndpoint": {
			"type": "object",
			"required": [
				"binding",
				"url"
			],
			"properties": {
				"binding": {
					"type": "string",
					"position": 10,
					"description": "The binding of this endpoint, if applicable - usually only required for SAML 2.0 endpoints.",
					"enum": [
						"ARTIFACT",
						"POST",
						"REDIRECT",
						"SOAP"
					]
				},
				"url": {
					"type": "string",
					"position": 20,
					"description": "The absolute or relative URL of the endpoint. A relative URL can be specified if a base URL for the connection has been defined."
				},
				"responseUrl": {
					"type": "string",
					"position": 30,
					"description": "The absolute or relative URL to which logout responses are sent. A relative URL can be specified if a base URL for the connection has been defined."
				}
			},
			"description": "Where SLO logout messages are sent. Only applicable for SAML 2.0."
		},
		"SpAdapterMapping": {
			"type": "object",
			"required": [
				"attributeContractFulfillment",
				"spAdapterRef"
			],
			"properties": {
				"spAdapterRef": {
					"position": 5,
					"description": "Reference to the associated SP adapter.<br>Note: This is ignored if adapter overrides for this mapping exists. In this case, the override's parent adapter reference is used.",
					"$ref": "#/definitions/ResourceLink"
				},
				"restrictVirtualEntityIds": {
					"type": "boolean",
					"position": 6,
					"description": "Restricts this mapping to specific virtual entity IDs."
				},
				"restrictedVirtualEntityIds": {
					"type": "array",
					"position": 7,
					"description": "The list of virtual server IDs that this mapping is restricted to.",
					"items": {
						"type": "string"
					}
				},
				"adapterOverrideSettings": {
					"position": 8,
					"description": "Connection specific overridden adapter instance for mapping.",
					"$ref": "#/definitions/SpAdapter"
				},
				"attributeSources": {
					"type": "array",
					"position": 10,
					"description": "A list of configured data stores to look up attributes from.",
					"items": {
						"$ref": "#/definitions/AttributeSource"
					}
				},
				"attributeContractFulfillment": {
					"type": "object",
					"position": 20,
					"description": "A list of mappings from attribute names to their fulfillment values.",
					"additionalProperties": {
						"$ref": "#/definitions/AttributeFulfillmentValue"
					}
				},
				"issuanceCriteria": {
					"position": 30,
					"description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
					"$ref": "#/definitions/IssuanceCriteria"
				}
			},
			"description": "A mapping to a SP adapter."
		},
		"SpAttributeQuery": {
			"type": "object",
			"required": [
				"attributeContractFulfillment",
				"attributeSources",
				"attributes"
			],
			"properties": {
				"attributes": {
					"type": "array",
					"position": 1,
					"description": "The list of attributes that may be returned to the SP in the response to an attribute request.",
					"uniqueItems": true,
					"items": {
						"type": "string"
					}
				},
				"attributeContractFulfillment": {
					"type": "object",
					"position": 20,
					"description": "A list of mappings from attribute names to their fulfillment values.",
					"additionalProperties": {
						"$ref": "#/definitions/AttributeFulfillmentValue"
					}
				},
				"issuanceCriteria": {
					"position": 30,
					"description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
					"$ref": "#/definitions/IssuanceCriteria"
				},
				"policy": {
					"position": 40,
					"description": "The attribute query profile's security policy.",
					"$ref": "#/definitions/SpAttributeQueryPolicy"
				},
				"attributeSources": {
					"type": "array",
					"position": 50,
					"description": "A list of configured data stores to look up attributes from.",
					"items": {
						"$ref": "#/definitions/AttributeSource"
					}
				}
			},
			"description": "The attribute query profile supports SPs in requesting user attributes."
		},
		"SpAttributeQueryPolicy": {
			"type": "object",
			"properties": {
				"signResponse": {
					"type": "boolean",
					"position": 10,
					"description": "Sign the response."
				},
				"signAssertion": {
					"type": "boolean",
					"position": 20,
					"description": "Sign the assertion."
				},
				"encryptAssertion": {
					"type": "boolean",
					"position": 30,
					"description": "Encrypt the assertion."
				},
				"requireSignedAttributeQuery": {
					"type": "boolean",
					"position": 40,
					"description": "Require signed attribute query."
				},
				"requireEncryptedNameId": {
					"type": "boolean",
					"position": 50,
					"description": "Require an encrypted name identifier."
				}
			},
			"description": "The attribute query profile's security policy."
		},
		"SpBrowserSso": {
			"type": "object",
			"required": [
				"adapterMappings",
				"assertionLifetime",
				"attributeContract",
				"encryptionPolicy",
				"protocol",
				"ssoServiceEndpoints"
			],
			"properties": {
				"protocol": {
					"type": "string",
					"position": 10,
					"description": "The browser-based SSO protocol to use.",
					"enum": [
						"SAML20",
						"WSFED",
						"SAML11",
						"SAML10",
						"OIDC"
					]
				},
				"wsFedTokenType": {
					"type": "string",
					"position": 15,
					"description": "The WS-Federation Token Type to use.",
					"enum": [
						"SAML11",
						"SAML20",
						"JWT"
					]
				},
				"wsTrustVersion": {
					"type": "string",
					"position": 16,
					"description": "The WS-Trust version for a WS-Federation connection. The default version is WSTRUST12.",
					"enum": [
						"WSTRUST12",
						"WSTRUST13"
					]
				},
				"enabledProfiles": {
					"type": "array",
					"position": 20,
					"description": "The profiles that are enabled for browser-based SSO. SAML 2.0 supports all profiles whereas SAML 1.x IdP connections support both IdP and SP (non-standard) initiated SSO. This is required for SAMLx.x Connections. ",
					"uniqueItems": true,
					"items": {
						"type": "string",
						"enum": [
							"IDP_INITIATED_SSO",
							"SP_INITIATED_SSO",
							"IDP_INITIATED_SLO",
							"SP_INITIATED_SLO"
						]
					}
				},
				"incomingBindings": {
					"type": "array",
					"position": 30,
					"description": "The SAML bindings that are enabled for browser-based SSO. This is required for SAML 2.0 connections when the enabled profiles contain the SP-initiated SSO profile or either SLO profile. For SAML 1.x based connections, it is not used for SP Connections and it is optional for IdP Connections.",
					"uniqueItems": true,
					"items": {
						"type": "string",
						"enum": [
							"ARTIFACT",
							"POST",
							"REDIRECT",
							"SOAP"
						]
					}
				},
				"messageCustomizations": {
					"type": "array",
					"position": 40,
					"description": "The message customizations for browser-based SSO. Depending on server settings, connection type, and protocol this may or may not be supported.",
					"items": {
						"$ref": "#/definitions/ProtocolMessageCustomization"
					}
				},
				"urlWhitelistEntries": {
					"type": "array",
					"position": 50,
					"description": "For WS-Federation connections, a whitelist of additional allowed domains and paths used to validate wreply for SLO, if enabled.",
					"items": {
						"$ref": "#/definitions/UrlWhitelistEntry"
					}
				},
				"artifact": {
					"position": 60,
					"description": "The settings for an artifact binding.",
					"$ref": "#/definitions/ArtifactSettings"
				},
				"sloServiceEndpoints": {
					"type": "array",
					"position": 70,
					"description": "A list of possible endpoints to send SLO requests and responses.",
					"items": {
						"$ref": "#/definitions/SloServiceEndpoint"
					}
				},
				"defaultTargetUrl": {
					"type": "string",
					"position": 80,
					"description": "Default Target URL for SAML1.x connections. For SP connections, this default URL represents the destination on the SP where the user will be directed. For IdP connections, entering a URL in the Default Target URL field overrides the SP Default URL SSO setting."
				},
				"alwaysSignArtifactResponse": {
					"type": "boolean",
					"position": 90,
					"description": "Specify to always sign the SAML ArtifactResponse."
				},
				"ssoServiceEndpoints": {
					"type": "array",
					"position": 1000,
					"description": "A list of possible endpoints to send assertions to.",
					"items": {
						"$ref": "#/definitions/SpSsoServiceEndpoint"
					}
				},
				"spSamlIdentityMapping": {
					"type": "string",
					"position": 1010,
					"description": "Process in which users authenticated by the IdP are associated with user accounts local to the SP.",
					"enum": [
						"PSEUDONYM",
						"STANDARD",
						"TRANSIENT"
					]
				},
				"spWsFedIdentityMapping": {
					"type": "string",
					"position": 1011,
					"description": "Process in which users authenticated by the IdP are associated with user accounts local to the SP for WS-Federation connection types.",
					"enum": [
						"EMAIL_ADDRESS",
						"USER_PRINCIPLE_NAME",
						"COMMON_NAME"
					]
				},
				"signResponseAsRequired": {
					"type": "boolean",
					"position": 1015,
					"description": "Sign SAML Response as required by the associated binding and encryption policy. Applicable to SAML2.0 only and is defaulted to true. It can be set to false only on SAML2.0 connections when signAssertions is set to true."
				},
				"signAssertions": {
					"type": "boolean",
					"position": 1020,
					"description": "Always sign the SAML Assertion."
				},
				"requireSignedAuthnRequests": {
					"type": "boolean",
					"position": 1030,
					"description": "Require AuthN requests to be signed when received via the POST or Redirect bindings."
				},
				"encryptionPolicy": {
					"position": 1040,
					"description": "The SAML 2.0 encryption policy for browser-based SSO. Required for SAML 2.0 connections.",
					"$ref": "#/definitions/EncryptionPolicy"
				},
				"attributeContract": {
					"position": 1060,
					"description": "A set of user attributes that the IdP sends in the SAML assertion.",
					"$ref": "#/definitions/SpBrowserSsoAttributeContract"
				},
				"adapterMappings": {
					"type": "array",
					"position": 1070,
					"description": "A list of adapters that map to outgoing assertions.",
					"items": {
						"$ref": "#/definitions/IdpAdapterAssertionMapping"
					}
				},
				"authenticationPolicyContractAssertionMappings": {
					"type": "array",
					"position": 1080,
					"description": "A list of authentication policy contracts that map to outgoing assertions.",
					"items": {
						"$ref": "#/definitions/AuthenticationPolicyContractAssertionMapping"
					}
				},
				"assertionLifetime": {
					"position": 1090,
					"description": "The timeframe of validity before and after the issuance of the assertion.",
					"$ref": "#/definitions/AssertionLifetime"
				}
			},
			"description": "The SAML settings used to enable secure browser-based SSO to resources at your partner's site."
		},
		"SpBrowserSsoAttribute": {
			"type": "object",
			"required": [
				"name",
				"nameFormat"
			],
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of this attribute."
				},
				"nameFormat": {
					"type": "string",
					"position": 100,
					"description": "The SAML Name Format for the attribute."
				}
			},
			"description": "An attribute for the SP Browser SSO attribute contract."
		},
		"SpBrowserSsoAttributeContract": {
			"type": "object",
			"properties": {
				"coreAttributes": {
					"type": "array",
					"position": 10,
					"description": "A list of read-only assertion attributes (for example, SAML_SUBJECT) that are automatically populated by PingFederate.",
					"items": {
						"$ref": "#/definitions/SpBrowserSsoAttribute"
					}
				},
				"extendedAttributes": {
					"type": "array",
					"position": 20,
					"description": "A list of additional attributes that are added to the outgoing assertion.",
					"items": {
						"$ref": "#/definitions/SpBrowserSsoAttribute"
					}
				}
			},
			"description": "A set of user attributes that the IdP sends in the SAML assertion."
		},
		"SpConnection": {
			"allOf": [
				{
					"$ref": "#/definitions/Connection"
				},
				{
					"type": "object",
					"properties": {
						"spBrowserSso": {
							"position": 65,
							"description": "The browser-based SSO settings used to communicate with your SP.",
							"$ref": "#/definitions/SpBrowserSso"
						},
						"attributeQuery": {
							"position": 66,
							"description": "The attribute query settings for supporting SPs in requesting user attributes.",
							"$ref": "#/definitions/SpAttributeQuery"
						},
						"wsTrust": {
							"position": 67,
							"description": "The Ws-Trust settings.",
							"$ref": "#/definitions/SpWsTrust"
						},
						"applicationName": {
							"type": "string",
							"position": 101,
							"description": "The application name."
						},
						"applicationIconUrl": {
							"type": "string",
							"position": 102,
							"description": "The application icon url."
						},
						"outboundProvision": {
							"position": 150,
							"description": "The Outbound Provision settings.",
							"$ref": "#/definitions/OutboundProvision"
						},
						"connectionTargetType": {
							"type": "string",
							"position": 160,
							"description": "The connection target type. This field is intended for bulk import/export usage. Changing its value may result in unexpected behavior.",
							"enum": [
								"STANDARD",
								"SALESFORCE",
								"SALESFORCE_CP",
								"SALESFORCE_PP",
								"PINGONE_SCIM11"
							]
						}
					},
					"description": "The set of attributes used to configure an SP connection."
				}
			]
		},
		"SpSsoServiceEndpoint": {
			"type": "object",
			"required": [
				"binding",
				"index",
				"url"
			],
			"properties": {
				"binding": {
					"type": "string",
					"position": 10,
					"description": "The binding of this endpoint, if applicable - usually only required for SAML 2.0 endpoints.  Supported bindings are Artifact and POST.",
					"enum": [
						"ARTIFACT",
						"POST",
						"REDIRECT",
						"SOAP"
					]
				},
				"url": {
					"type": "string",
					"position": 20,
					"description": "The absolute or relative URL of the endpoint. A relative URL can be specified if a base URL for the connection has been defined."
				},
				"isDefault": {
					"type": "boolean",
					"position": 30,
					"description": "Whether or not this endpoint is the default endpoint. Defaults to false."
				},
				"index": {
					"type": "integer",
					"format": "int32",
					"position": 40,
					"description": "The priority of the endpoint."
				}
			},
			"description": "The settings that define a service endpoint to a SP SSO service."
		},
		"SpTokenGeneratorMapping": {
			"type": "object",
			"required": [
				"attributeContractFulfillment",
				"spTokenGeneratorRef"
			],
			"properties": {
				"spTokenGeneratorRef": {
					"position": 5,
					"description": "Reference to the associated token generator.",
					"$ref": "#/definitions/ResourceLink"
				},
				"restrictedVirtualEntityIds": {
					"type": "array",
					"position": 6,
					"description": "The list of virtual server IDs that this mapping is restricted to.",
					"items": {
						"type": "string"
					}
				},
				"defaultMapping": {
					"type": "boolean",
					"position": 7,
					"description": "Indicates whether the token generator mapping is the default mapping. The default value is false."
				},
				"attributeSources": {
					"type": "array",
					"position": 10,
					"description": "A list of configured data stores to look up attributes from.",
					"items": {
						"$ref": "#/definitions/AttributeSource"
					}
				},
				"attributeContractFulfillment": {
					"type": "object",
					"position": 20,
					"description": "A list of mappings from attribute names to their fulfillment values.",
					"additionalProperties": {
						"$ref": "#/definitions/AttributeFulfillmentValue"
					}
				},
				"issuanceCriteria": {
					"position": 30,
					"description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
					"$ref": "#/definitions/IssuanceCriteria"
				}
			},
			"description": "The SP Token Generator Mapping."
		},
		"SpWsTrust": {
			"type": "object",
			"required": [
				"attributeContract",
				"partnerServiceIds",
				"tokenProcessorMappings"
			],
			"properties": {
				"partnerServiceIds": {
					"type": "array",
					"position": 10,
					"description": "The partner service identifiers.",
					"items": {
						"type": "string"
					}
				},
				"oAuthAssertionProfiles": {
					"type": "boolean",
					"position": 20,
					"description": "When selected, four additional token-type requests become available."
				},
				"defaultTokenType": {
					"type": "string",
					"position": 30,
					"description": "The default token type when a web service client (WSC) does not specify in the token request which token type the STS should issue. Defaults to SAML 2.0.",
					"enum": [
						"SAML20",
						"SAML11",
						"SAML11_O365"
					]
				},
				"generateKey": {
					"type": "boolean",
					"position": 40,
					"description": "When selected, the STS generates a symmetric key to be used in conjunction with the \"Holder of Key\" (HoK) designation for the assertion's Subject Confirmation Method.  This option does not apply to OAuth assertion profiles."
				},
				"encryptSaml2Assertion": {
					"type": "boolean",
					"position": 50,
					"description": "When selected, the STS encrypts the SAML 2.0 assertion. Applicable only to SAML 2.0 security token.  This option does not apply to OAuth assertion profiles."
				},
				"minutesBefore": {
					"type": "integer",
					"format": "int32",
					"position": 60,
					"description": "The amount of time before the SAML token was issued during which it is to be considered valid. The default value is 5."
				},
				"minutesAfter": {
					"type": "integer",
					"format": "int32",
					"position": 70,
					"description": "The amount of time after the SAML token was issued during which it is to be considered valid. The default value is 30."
				},
				"attributeContract": {
					"position": 80,
					"description": "A set of user attributes that the IdP sends in the token.",
					"$ref": "#/definitions/SpWsTrustAttributeContract"
				},
				"tokenProcessorMappings": {
					"type": "array",
					"position": 90,
					"description": "A list of token processors to validate incoming tokens.",
					"items": {
						"$ref": "#/definitions/IdpTokenProcessorMapping"
					}
				},
				"abortIfNotFulfilledFromRequest": {
					"type": "boolean",
					"position": 100,
					"description": "If the attribute contract cannot be fulfilled using data from the Request, abort the transaction."
				},
				"requestContractRef": {
					"position": 110,
					"description": "Request Contract to be used to map attribute values into the security token.",
					"$ref": "#/definitions/ResourceLink"
				},
				"messageCustomizations": {
					"type": "array",
					"position": 120,
					"description": "The message customizations for WS-Trust. Depending on server settings, connection type, and protocol this may or may not be supported.",
					"items": {
						"$ref": "#/definitions/ProtocolMessageCustomization"
					}
				}
			},
			"description": "Ws-Trust STS provides security-token validation and creation to extend SSO access to identity-enabled Web Services"
		},
		"SpWsTrustAttribute": {
			"type": "object",
			"required": [
				"name",
				"namespace"
			],
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of this attribute."
				},
				"namespace": {
					"type": "string",
					"position": 100,
					"description": "The attribute namespace.  This is required when the Default Token Type is SAML2.0 or SAML1.1 or SAML1.1 for Office 365."
				}
			},
			"description": "An attribute for the Ws-Trust attribute contract."
		},
		"SpWsTrustAttributeContract": {
			"type": "object",
			"properties": {
				"coreAttributes": {
					"type": "array",
					"position": 10,
					"description": "A list of read-only assertion attributes that are automatically populated by PingFederate.",
					"items": {
						"$ref": "#/definitions/SpWsTrustAttribute"
					}
				},
				"extendedAttributes": {
					"type": "array",
					"position": 20,
					"description": "A list of additional attributes that are added to the outgoing assertion.",
					"items": {
						"$ref": "#/definitions/SpWsTrustAttribute"
					}
				}
			},
			"description": "A set of user attributes that this server will send in the token."
		},
		"SqlMethod": {
			"type": "object",
			"properties": {
				"table": {
					"position": 10,
					"description": "The Table SQL method.",
					"$ref": "#/definitions/Table"
				},
				"storedProcedure": {
					"position": 20,
					"description": "The Stored Procedure SQL method. The procedure is always called for all SSO tokens and \"eventTrigger\" will always be 'ALL_SAML_ASSERTIONS'.",
					"$ref": "#/definitions/StoredProcedure"
				}
			},
			"description": "SQL Method."
		},
		"SsoOAuthMapping": {
			"type": "object",
			"required": [
				"attributeContractFulfillment"
			],
			"properties": {
				"attributeSources": {
					"type": "array",
					"position": 10,
					"description": "A list of configured data stores to look up attributes from.",
					"items": {
						"$ref": "#/definitions/AttributeSource"
					}
				},
				"attributeContractFulfillment": {
					"type": "object",
					"position": 20,
					"description": "A list of mappings from attribute names to their fulfillment values.",
					"additionalProperties": {
						"$ref": "#/definitions/AttributeFulfillmentValue"
					}
				},
				"issuanceCriteria": {
					"position": 30,
					"description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
					"$ref": "#/definitions/IssuanceCriteria"
				}
			},
			"description": "IdP Browser SSO OAuth Attribute Mapping"
		},
		"StoredProcedure": {
			"type": "object",
			"required": [
				"schema",
				"storedProcedure"
			],
			"properties": {
				"schema": {
					"type": "string",
					"position": 10,
					"description": "Lists the table structure that stores information within a database."
				},
				"storedProcedure": {
					"type": "string",
					"position": 20,
					"description": "The name of the database stored procedure."
				}
			},
			"description": "SQL Method Stored Procedure."
		},
		"Table": {
			"type": "object",
			"required": [
				"schema",
				"tableName",
				"uniqueIdColumn"
			],
			"properties": {
				"schema": {
					"type": "string",
					"position": 10,
					"description": "Lists the table structure that stores information within a database."
				},
				"tableName": {
					"type": "string",
					"position": 20,
					"description": "The name of the database table."
				},
				"uniqueIdColumn": {
					"type": "string",
					"position": 30,
					"description": "The database column that uniquely identifies the provisioned user on the SP side."
				}
			},
			"description": "SQL Method Table."
		},
		"UrlWhitelistEntry": {
			"type": "object",
			"properties": {
				"validDomain": {
					"type": "string",
					"position": 10,
					"description": "Valid Domain Name (leading wildcard '*.' allowed)"
				},
				"validPath": {
					"type": "string",
					"position": 20,
					"description": "Valid Path (leave blank to allow any path)"
				},
				"allowQueryAndFragment": {
					"type": "boolean",
					"position": 30,
					"description": "Allow Any Query/Fragment"
				},
				"requireHttps": {
					"type": "boolean",
					"position": 40,
					"description": "Require HTTPS"
				}
			},
			"description": "Url domain and path to be used as whitelist in WS-Federation connection"
		},
		"UsernamePasswordCredentials": {
			"type": "object",
			"properties": {
				"username": {
					"type": "string",
					"position": 20,
					"description": "The username."
				},
				"password": {
					"type": "string",
					"position": 30,
					"description": "User password.  To update the password, specify the plaintext value in this field.  This field will not be populated for GET requests."
				},
				"encryptedPassword": {
					"type": "string",
					"position": 40,
					"description": "For GET requests, this field contains the encrypted password, if one exists.  For POST and PUT requests, if you wish to reuse the existing password, this field should be passed back unchanged."
				}
			},
			"description": "Username and password credentials."
		},
		"Users": {
			"type": "object",
			"required": [
				"readUsers",
				"writeUsers"
			],
			"properties": {
				"writeUsers": {
					"position": 10,
					"description": "Configuration to create a user within the user repository.",
					"$ref": "#/definitions/WriteUsers"
				},
				"readUsers": {
					"position": 20,
					"description": "Configuration to lookup user info within the user repository and respond to incoming SCIM requests.",
					"$ref": "#/definitions/ReadUsers"
				}
			},
			"description": "User creation and read configuration."
		},
		"WriteGroups": {
			"type": "object",
			"required": [
				"attributeFulfillment"
			],
			"properties": {
				"attributeFulfillment": {
					"type": "object",
					"position": 10,
					"description": "A list of user repository mappings from attribute names to their fulfillment values.",
					"additionalProperties": {
						"$ref": "#/definitions/AttributeFulfillmentValue"
					}
				}
			},
			"description": "Group creation configuration."
		},
		"WriteUsers": {
			"type": "object",
			"required": [
				"attributeFulfillment"
			],
			"properties": {
				"attributeFulfillment": {
					"type": "object",
					"position": 10,
					"description": "A list of user repository mappings from attribute names to their fulfillment values.",
					"additionalProperties": {
						"$ref": "#/definitions/AttributeFulfillmentValue"
					}
				}
			},
			"description": "User creation configuration."
		},
		"ConvertMetadataRequest": {
			"type": "object",
			"required": [
				"connectionType",
				"expectedProtocol",
				"samlMetadata"
			],
			"properties": {
				"connectionType": {
					"type": "string",
					"position": 10,
					"description": "The expected connection type to convert.",
					"enum": [
						"IDP",
						"SP"
					]
				},
				"expectedProtocol": {
					"type": "string",
					"position": 20,
					"description": "The expected browser-based SSO protocol to convert. In this case the protocol is restricted to SAML.",
					"enum": [
						"SAML20",
						"SAML11",
						"SAML10"
					]
				},
				"expectedEntityId": {
					"type": "string",
					"position": 25,
					"description": "The entity ID of the connection to be obtained from the input SAML Metadata. Required if the SAML Metadata has more than one connection defined."
				},
				"samlMetadata": {
					"type": "string",
					"position": 30,
					"description": "The base-64 encoded XML SAML metadata."
				},
				"verificationCertificate": {
					"type": "string",
					"position": 40,
					"description": "The certificate to validate the metadata signature against. The certificate can be in PEM format or base-64 encoded DER format."
				},
				"templateConnection": {
					"position": 50,
					"description": "The template connection to overlay the metadata on.",
					"$ref": "#/definitions/Connection"
				}
			},
			"description": "A request for converting SAML connection metadata into a JSON connection."
		},
		"BaseSigningSettings": {
			"type": "object",
			"required": [
				"signingKeyPairRef"
			],
			"properties": {
				"signingKeyPairRef": {
					"position": 10,
					"description": "The ID of the key pair used to sign messages sent to this partner. The ID of the key pair is also known as the alias and can be found by viewing the corresponding certificate under 'Signing & Decryption Keys & Certificates' in the PingFederate admin console.",
					"$ref": "#/definitions/ResourceLink"
				},
				"algorithm": {
					"type": "string",
					"position": 30,
					"description": "The algorithm used to sign messages sent to this partner. The default is SHA1withDSA for DSA certs, SHA256withRSA for RSA certs, and SHA256withECDSA for EC certs. For RSA certs, SHA1withRSA, SHA384withRSA, and SHA512withRSA are also supported. For EC certs, SHA384withECDSA and SHA512withECDSA are also supported. If the connection is WS-Federation with JWT token type, then the possible values are RSA SHA256, RSA SHA384, RSA SHA512, ECDSA SHA256, ECDSA SHA384, ECDSA SHA512"
				},
				"includeCertInSignature": {
					"type": "boolean",
					"position": 40,
					"description": "Determines whether the signing certificate is included in the signature <KeyInfo> element."
				},
				"includeRawKeyInSignature": {
					"type": "boolean",
					"position": 50,
					"description": "Determines whether the <KeyValue> element with the raw public key is included in the signature <KeyInfo> element."
				}
			},
			"description": "Settings related to signing messages."
		},
		"ExportMetadataRequest": {
			"type": "object",
			"required": [
				"connectionId",
				"connectionType"
			],
			"properties": {
				"connectionType": {
					"type": "string",
					"position": 10,
					"description": "The type of connection to export.",
					"enum": [
						"IDP",
						"SP"
					]
				},
				"connectionId": {
					"type": "string",
					"position": 20,
					"description": "The ID of the connection to export."
				},
				"virtualServerId": {
					"type": "string",
					"position": 30,
					"description": "The virtual server ID to export the metadata with. If null, the connection's default will be used."
				},
				"signingSettings": {
					"position": 40,
					"description": "The signing settings to sign the metadata with. If null, the metadata will not be signed",
					"$ref": "#/definitions/BaseSigningSettings"
				},
				"useSecondaryPortForSoap": {
					"type": "boolean",
					"position": 50,
					"description": "If PingFederate's secondary SSL port is configured and you want to use it for the SOAP channel, set to true. If client-certificate authentication is configured for the SOAP channel, the secondary port is required and this must be set to true."
				},
				"virtualHostName": {
					"type": "string",
					"position": 60,
					"description": "The virtual host name to be used as the base url."
				}
			},
			"description": "The request for exporting a SAML connection's metadata file for a partner."
		},
		"SaasPluginDescriptor": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The SaaS plugin type."
				},
				"description": {
					"type": "string",
					"position": 20,
					"description": "The SaaS plugin description."
				},
				"configDescriptor": {
					"position": 30,
					"description": "The plugin configuration that includes information to access the target service provider.",
					"$ref": "#/definitions/PluginConfigDescriptor"
				},
				"saasPluginFieldInfoDescriptors": {
					"type": "array",
					"position": 40,
					"description": "The SaaS plugin attribute list for mapping from the local data store into Fields specified by the service provide.",
					"items": {
						"$ref": "#/definitions/SaasPluginFieldInfoDescriptor"
					}
				}
			},
			"description": "A SaaS Plugin."
		},
		"SaasPluginDescriptors": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of SaaS plugins.",
					"items": {
						"$ref": "#/definitions/SaasPluginDescriptor"
					}
				}
			},
			"description": "A collection of SaaS plugins."
		},
		"SaasPluginFieldInfoDescriptor": {
			"type": "object",
			"required": [
				"code",
				"label"
			],
			"properties": {
				"code": {
					"type": "string",
					"position": 10,
					"description": "The name or code that represents a field."
				},
				"label": {
					"type": "string",
					"position": 20,
					"description": "The label for a field."
				},
				"required": {
					"type": "boolean",
					"position": 30,
					"description": "Indicates whether a value is required for this field."
				},
				"unique": {
					"type": "boolean",
					"position": 40,
					"description": "indicates whether the value of this field is unique."
				},
				"multiValue": {
					"type": "boolean",
					"position": 50,
					"description": "Whether the field can have multiple values."
				},
				"options": {
					"type": "array",
					"position": 60,
					"description": "List of Option values available for this field.",
					"items": {
						"$ref": "#/definitions/SaasPluginFieldOption"
					}
				},
				"minLength": {
					"type": "integer",
					"format": "int32",
					"position": 80,
					"description": "Minimum character length for a value."
				},
				"maxLength": {
					"type": "integer",
					"format": "int32",
					"position": 90,
					"description": "Maximum character length for a value."
				},
				"pattern": {
					"type": "string",
					"position": 100,
					"description": "Pattern used to validate values of this field."
				},
				"notes": {
					"type": "array",
					"position": 120,
					"description": "Description or notes for the field.",
					"items": {
						"type": "string"
					}
				},
				"defaultValue": {
					"type": "string",
					"position": 130,
					"description": "Default value for the field."
				},
				"dsLdapMap": {
					"type": "boolean",
					"position": 140,
					"description": "Indicates whether the field can be mapped raw to an LDAP attribute."
				},
				"persistForMembership": {
					"type": "boolean",
					"position": 150,
					"description": "The code that represents the field."
				},
				"attributeGroup": {
					"type": "boolean",
					"position": 160,
					"description": "Indicates whether this field belongs to group of attribute such as multivalued or sub-type custom attributes."
				}
			},
			"description": "A Saas Plugin Field configuration."
		},
		"SaasPluginFieldOption": {
			"type": "object",
			"required": [
				"code",
				"label"
			],
			"properties": {
				"code": {
					"type": "string",
					"position": 10,
					"description": "The code that represents the field."
				},
				"label": {
					"type": "string",
					"position": 20,
					"description": "The label for the field."
				}
			},
			"description": "A plugin configuration field value."
		},
		"Action": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The ID of this action."
				},
				"name": {
					"type": "string",
					"position": 20,
					"description": "The name of this action."
				},
				"description": {
					"type": "string",
					"position": 30,
					"description": "The description of this action."
				},
				"download": {
					"type": "boolean",
					"position": 40,
					"description": "Whether this action will trigger a download or invoke an internal action that will return a string result."
				},
				"invocationRef": {
					"position": 50,
					"description": "Whether this action will trigger a download or invoke an internal action that will return a string result.",
					"$ref": "#/definitions/ResourceLink"
				},
				"parameters": {
					"type": "array",
					"position": 60,
					"description": "List of parameters for this action.",
					"items": {
						"$ref": "#/definitions/FieldDescriptor"
					}
				}
			},
			"description": "A read-only plugin action that either represents a file download or an arbitrary invocation performed by the plugin."
		},
		"Actions": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of available actions.",
					"items": {
						"$ref": "#/definitions/Action"
					}
				}
			},
			"description": "A read-only list of available actions for this plugin instance."
		},
		"CustomDataStoreDescriptors": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of custom data store descriptors.",
					"items": {
						"$ref": "#/definitions/CustomDataStoreDescriptor"
					}
				}
			},
			"description": "A collection of custom data store descriptors."
		},
		"CustomDataStore": {
			"allOf": [
				{
					"$ref": "#/definitions/DataStore"
				},
				{
					"type": "object",
					"required": [
						"configuration",
						"name",
						"pluginDescriptorRef",
						"type"
					],
					"properties": {
						"type": {
							"type": "string",
							"position": 5,
							"description": "The data store type.",
							"enum": [
								"LDAP",
								"PING_ONE_LDAP_GATEWAY",
								"JDBC",
								"CUSTOM"
							]
						},
						"id": {
							"type": "string",
							"position": 6,
							"description": "The persistent, unique ID for the data store. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified."
						},
						"maskAttributeValues": {
							"type": "boolean",
							"position": 7,
							"description": "Whether attribute values should be masked in the log."
						},
						"name": {
							"type": "string",
							"position": 8,
							"description": "The plugin instance name."
						},
						"pluginDescriptorRef": {
							"position": 30,
							"description": "Reference to the plugin descriptor for this instance. The plugin descriptor cannot be modified once the instance is created.<br>Note: Ignored when specifying a connection's adapter override.",
							"$ref": "#/definitions/ResourceLink"
						},
						"parentRef": {
							"position": 40,
							"description": "The reference to this plugin's parent instance. The parent reference is only accepted if the plugin type supports parent instances.<br>Note: This parent reference is required if this plugin instance is used as an overriding plugin (e.g. connection adapter overrides)",
							"$ref": "#/definitions/ResourceLink"
						},
						"configuration": {
							"position": 50,
							"description": "Plugin instance configuration.",
							"$ref": "#/definitions/PluginConfiguration"
						}
					},
					"description": "A custom data store."
				}
			]
		},
		"DataStore": {
			"type": "object",
			"required": [
				"type"
			],
			"discriminator": "type",
			"properties": {
				"type": {
					"type": "string",
					"position": 10,
					"description": "The data store type.",
					"enum": [
						"LDAP",
						"PING_ONE_LDAP_GATEWAY",
						"JDBC",
						"CUSTOM"
					]
				},
				"id": {
					"type": "string",
					"position": 20,
					"description": "The persistent, unique ID for the data store. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified."
				},
				"maskAttributeValues": {
					"type": "boolean",
					"position": 30,
					"description": "Whether attribute values should be masked in the log."
				}
			},
			"description": "The set of attributes used to configure a data store."
		},
		"JdbcDataStore": {
			"allOf": [
				{
					"$ref": "#/definitions/DataStore"
				},
				{
					"type": "object",
					"required": [
						"driverClass",
						"userName"
					],
					"properties": {
						"connectionUrlTags": {
							"type": "array",
							"position": 40,
							"description": "The set of connection URLs and associated tags for this JDBC data store.",
							"items": {
								"$ref": "#/definitions/JdbcTagConfig"
							}
						},
						"connectionUrl": {
							"type": "string",
							"position": 42,
							"description": "The default location of the JDBC database. This field is required if no mapping for JDBC database location and tags are specified."
						},
						"name": {
							"type": "string",
							"position": 45,
							"description": "The data store name with a unique value across all data sources. Omitting this attribute will set the value to a combination of the connection url and the username."
						},
						"driverClass": {
							"type": "string",
							"position": 50,
							"description": "The name of the driver class used to communicate with the source database."
						},
						"userName": {
							"type": "string",
							"position": 60,
							"description": "The name that identifies the user when connecting to the database."
						},
						"password": {
							"type": "string",
							"position": 70,
							"description": "The password needed to access the database. GETs will not return this attribute. To update this field, specify the new value in this attribute."
						},
						"encryptedPassword": {
							"type": "string",
							"position": 80,
							"description": "The encrypted password needed to access the database. If you do not want to update the stored value, this attribute should be passed back unchanged. Secret Reference may be provided in this field with format 'OBF:MGR:{secretManagerId}:{secretId}'."
						},
						"validateConnectionSql": {
							"type": "string",
							"position": 90,
							"description": "A simple SQL statement used by PingFederate at runtime to verify that the database connection is still active and to reconnect if needed."
						},
						"allowMultiValueAttributes": {
							"type": "boolean",
							"position": 100,
							"description": "Indicates that this data store can select more than one record from a column and return the results as a multi-value attribute."
						},
						"minPoolSize": {
							"type": "integer",
							"format": "int32",
							"position": 110,
							"description": "The smallest number of database connections in the connection pool for the given data store. Omitting this attribute will set the value to the connection pool default."
						},
						"maxPoolSize": {
							"type": "integer",
							"format": "int32",
							"position": 120,
							"description": "The largest number of database connections in the connection pool for the given data store. Omitting this attribute will set the value to the connection pool default."
						},
						"blockingTimeout": {
							"type": "integer",
							"format": "int32",
							"position": 130,
							"description": "The amount of time in milliseconds a request waits to get a connection from the connection pool before it fails. Omitting this attribute will set the value to the connection pool default."
						},
						"idleTimeout": {
							"type": "integer",
							"format": "int32",
							"position": 140,
							"description": "The length of time in minutes the connection can be idle in the pool before it is closed. Omitting this attribute will set the value to the connection pool default."
						}
					},
					"description": "A JDBC data store."
				}
			]
		},
		"JdbcTagConfig": {
			"type": "object",
			"required": [
				"connectionUrl"
			],
			"properties": {
				"connectionUrl": {
					"type": "string",
					"position": 10,
					"description": "The location of the JDBC database. "
				},
				"tags": {
					"type": "string",
					"position": 50,
					"description": "Tags associated with this data source."
				},
				"defaultSource": {
					"type": "boolean",
					"position": 60,
					"description": "Whether this is the default connection. Defaults to false if not specified."
				}
			},
			"description": "A JDBC data store's connection URLs and tags configuration. This is required if no default JDBC database location is specified."
		},
		"LdapDataStore": {
			"allOf": [
				{
					"$ref": "#/definitions/DataStore"
				},
				{
					"type": "object",
					"required": [
						"ldapType"
					],
					"properties": {
						"hostnamesTags": {
							"type": "array",
							"position": 40,
							"description": "The set of host names and associated tags for this LDAP data store.",
							"items": {
								"$ref": "#/definitions/LdapTagConfig"
							}
						},
						"hostnames": {
							"type": "array",
							"position": 42,
							"description": "The default LDAP host names. This field is required if no mapping for host names and tags are specified.",
							"items": {
								"type": "string"
							}
						},
						"name": {
							"type": "string",
							"position": 45,
							"description": "The data store name with a unique value across all data sources. Omitting this attribute will set the value to a combination of the hostname(s) and the principal."
						},
						"ldapType": {
							"type": "string",
							"position": 50,
							"description": "A type that allows PingFederate to configure many provisioning settings automatically. The 'UNBOUNDID_DS' type has been deprecated, please use the 'PING_DIRECTORY' type instead.",
							"enum": [
								"ACTIVE_DIRECTORY",
								"ORACLE_DIRECTORY_SERVER",
								"ORACLE_UNIFIED_DIRECTORY",
								"UNBOUNDID_DS",
								"PING_DIRECTORY",
								"GENERIC"
							]
						},
						"bindAnonymously": {
							"type": "boolean",
							"position": 60,
							"description": "Whether username and password are required. The default value is false."
						},
						"userDN": {
							"type": "string",
							"position": 70,
							"description": "The username credential required to access the data store."
						},
						"password": {
							"type": "string",
							"position": 80,
							"description": "The password credential required to access the data store. GETs will not return this attribute. To update this field, specify the new value in this attribute."
						},
						"encryptedPassword": {
							"type": "string",
							"position": 90,
							"description": "The encrypted password credential required to access the data store.  If you do not want to update the stored value, this attribute should be passed back unchanged. Secret Reference may be provided in this field with format 'OBF:MGR:{secretManagerId}:{secretId}'."
						},
						"useSsl": {
							"type": "boolean",
							"position": 100,
							"description": "Connects to the LDAP data store using secure SSL/TLS encryption (LDAPS). The default value is false."
						},
						"useDnsSrvRecords": {
							"type": "boolean",
							"position": 101,
							"description": "Use DNS SRV Records to discover LDAP server information. The default value is false."
						},
						"followLDAPReferrals": {
							"type": "boolean",
							"position": 102,
							"description": "Follow LDAP Referrals in the domain tree. The default value is false. This property does not apply to PingDirectory as this functionality is configured in PingDirectory."
						},
						"testOnBorrow": {
							"type": "boolean",
							"position": 110,
							"description": "Indicates whether objects are validated before being borrowed from the pool."
						},
						"testOnReturn": {
							"type": "boolean",
							"position": 120,
							"description": "Indicates whether objects are validated before being returned to the pool."
						},
						"createIfNecessary": {
							"type": "boolean",
							"position": 130,
							"description": "Indicates whether temporary connections can be created when the Maximum Connections threshold is reached."
						},
						"verifyHost": {
							"type": "boolean",
							"position": 131,
							"description": "Verifies that the presented server certificate includes the address to which the client intended to establish a connection. Omitting this attribute will set the value to true."
						},
						"minConnections": {
							"type": "integer",
							"format": "int32",
							"position": 140,
							"description": "The smallest number of connections that can remain in each pool, without creating extra ones. Omitting this attribute will set the value to the default value."
						},
						"maxConnections": {
							"type": "integer",
							"format": "int32",
							"position": 150,
							"description": "The largest number of active connections that can remain in each pool without releasing extra ones. Omitting this attribute will set the value to the default value."
						},
						"maxWait": {
							"type": "integer",
							"format": "int32",
							"position": 160,
							"description": "The maximum number of milliseconds the pool waits for a connection to become available when trying to obtain a connection from the pool. Omitting this attribute or setting a value of -1 causes the pool not to wait at all and to either create a new connection or produce an error (when no connections are available)."
						},
						"timeBetweenEvictions": {
							"type": "integer",
							"format": "int32",
							"position": 170,
							"description": "The frequency, in milliseconds, that the evictor cleans up the connections in the pool. A value of -1 disables the evictor. Omitting this attribute will set the value to the default value."
						},
						"readTimeout": {
							"type": "integer",
							"format": "int32",
							"position": 180,
							"description": "The maximum number of milliseconds a connection waits for a response to be returned before producing an error. A value of -1 causes the connection to wait indefinitely. Omitting this attribute will set the value to the default value."
						},
						"connectionTimeout": {
							"type": "integer",
							"format": "int32",
							"position": 190,
							"description": "The maximum number of milliseconds that a connection attempt should be allowed to continue before returning an error. A value of -1 causes the pool to wait indefinitely. Omitting this attribute will set the value to the default value."
						},
						"dnsTtl": {
							"type": "integer",
							"format": "int32",
							"position": 191,
							"description": "The maximum time in milliseconds that DNS information are cached. Omitting this attribute will set the value to the default value."
						},
						"ldapDnsSrvPrefix": {
							"type": "string",
							"position": 192,
							"description": "The prefix value used to discover LDAP DNS SRV record. Omitting this attribute will set the value to the default value."
						},
						"ldapsDnsSrvPrefix": {
							"type": "string",
							"position": 193,
							"description": "The prefix value used to discover LDAPs DNS SRV record. Omitting this attribute will set the value to the default value."
						},
						"binaryAttributes": {
							"type": "array",
							"position": 200,
							"description": "The list of LDAP attributes to be handled as binary data.",
							"items": {
								"type": "string"
							}
						}
					},
					"description": "A LDAP data store."
				}
			]
		},
		"LdapTagConfig": {
			"type": "object",
			"required": [
				"hostnames"
			],
			"properties": {
				"hostnames": {
					"type": "array",
					"position": 10,
					"description": "The LDAP host names.",
					"items": {
						"type": "string"
					}
				},
				"tags": {
					"type": "string",
					"position": 50,
					"description": "Tags associated with this data source."
				},
				"defaultSource": {
					"type": "boolean",
					"position": 60,
					"description": "Whether this is the default connection. Defaults to false if not specified."
				}
			},
			"description": "An LDAP data store's hostnames and tags configuration. This is required if no default hostname is specified."
		},
		"PingOneLdapGatewayDataStore": {
			"allOf": [
				{
					"$ref": "#/definitions/DataStore"
				},
				{
					"type": "object",
					"required": [
						"ldapType",
						"pingOneConnectionRef",
						"pingOneEnvironmentId",
						"pingOneLdapGatewayId"
					],
					"properties": {
						"name": {
							"type": "string",
							"position": 40,
							"description": "The data store name with a unique value across all data sources. Omitting this attribute will set the value to a combination of the hostname(s) and the principal."
						},
						"ldapType": {
							"type": "string",
							"position": 50,
							"description": "A type that allows PingFederate to configure many provisioning settings automatically. The value is validated against the LDAP gateway configuration in PingOne unless the header 'X-BypassExternalValidation' is set to true.",
							"enum": [
								"ACTIVE_DIRECTORY",
								"ORACLE_DIRECTORY_SERVER",
								"ORACLE_UNIFIED_DIRECTORY",
								"UNBOUNDID_DS",
								"PING_DIRECTORY",
								"GENERIC"
							]
						},
						"pingOneConnectionRef": {
							"position": 60,
							"description": "Reference to the PingOne connection this gateway uses.",
							"$ref": "#/definitions/ResourceLink"
						},
						"pingOneEnvironmentId": {
							"type": "string",
							"position": 70,
							"description": "The environment ID that the gateway belongs to."
						},
						"pingOneLdapGatewayId": {
							"type": "string",
							"position": 80,
							"description": "The ID of the PingOne LDAP Gateway this data store uses."
						},
						"useSsl": {
							"type": "boolean",
							"position": 100,
							"description": "Connects to the LDAP data store using secure SSL/TLS encryption (LDAPS). The default value is false. The value is validated against the LDAP gateway configuration in PingOne unless the header 'X-BypassExternalValidation' is set to true."
						},
						"binaryAttributes": {
							"type": "array",
							"position": 200,
							"description": "The list of LDAP attributes to be handled as binary data.",
							"items": {
								"type": "string"
							}
						}
					},
					"description": "A LDAP gateway data store."
				}
			]
		},
		"DataStores": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of data stores.",
					"items": {
						"$ref": "#/definitions/DataStore"
					}
				}
			},
			"description": "A collection of data stores."
		},
		"ActionResult": {
			"type": "object",
			"properties": {
				"message": {
					"type": "string",
					"position": 10,
					"description": "The message from the completed action."
				}
			},
			"description": "The result for non-download plugin actions."
		},
		"ActionOptions": {
			"type": "object",
			"required": [
				"parameters"
			],
			"properties": {
				"parameters": {
					"type": "array",
					"position": 10,
					"description": "List of action parameters.",
					"items": {
						"$ref": "#/definitions/ActionParameter"
					}
				}
			},
			"description": "Action options to invoke action."
		},
		"ActionParameter": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of the action parameter."
				},
				"value": {
					"type": "string",
					"position": 20,
					"description": "The value for the action parameter."
				}
			},
			"description": "An action parameter value."
		},
		"ExtendedProperties": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of Extended Property definitions.",
					"items": {
						"$ref": "#/definitions/ExtendedProperty"
					}
				}
			},
			"description": "A collection of Extended Properties definitions."
		},
		"ExtendedProperty": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The property name."
				},
				"description": {
					"type": "string",
					"position": 20,
					"description": "The property description."
				},
				"multiValued": {
					"type": "boolean",
					"position": 30,
					"description": "Indicates whether the property should allow multiple values."
				}
			},
			"description": "Extended Property definition that allows to store additional information about IdP/SP Connections and OAuth Clients."
		},
		"IdentityStoreProvisionerDescriptor": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "Unique ID of the plugin."
				},
				"name": {
					"type": "string",
					"position": 20,
					"description": "Friendly name for the plugin."
				},
				"className": {
					"type": "string",
					"position": 30,
					"description": "Full class name of the class that implements this plugin."
				},
				"attributeContract": {
					"type": "array",
					"position": 40,
					"description": "The attribute contract for this plugin.",
					"items": {
						"type": "string"
					}
				},
				"groupAttributeContract": {
					"type": "array",
					"position": 45,
					"description": "The group attribute contract for this identity store provisioner",
					"items": {
						"type": "string"
					}
				},
				"supportsExtendedContract": {
					"type": "boolean",
					"position": 50,
					"description": "Determines whether this plugin supports extending the attribute contract."
				},
				"supportsGroupExtendedContract": {
					"type": "boolean",
					"position": 55,
					"description": "Determines whether this plugin supports extending the group attribute contract"
				},
				"configDescriptor": {
					"position": 60,
					"description": "The descriptor which defines the configuration fields available for this plugin.",
					"$ref": "#/definitions/PluginConfigDescriptor"
				}
			},
			"description": "An identity store provisioner descriptor"
		},
		"IdentityStoreProvisionerDescriptors": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of identity store provisioner descriptors.",
					"items": {
						"$ref": "#/definitions/IdentityStoreProvisionerDescriptor"
					}
				}
			},
			"description": "A collection of identity store provisioner descriptors."
		},
		"GroupAttribute": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of this attribute."
				}
			},
			"description": "The definition of a group attribute in a group attribute contract."
		},
		"IdentityStoreProvisioner": {
			"type": "object",
			"required": [
				"configuration",
				"id",
				"name",
				"pluginDescriptorRef"
			],
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The ID of the plugin instance. The ID cannot be modified once the instance is created.<br>Note: Ignored when specifying a connection's adapter override."
				},
				"name": {
					"type": "string",
					"position": 20,
					"description": "The plugin instance name. The name can be modified once the instance is created.<br>Note: Ignored when specifying a connection's adapter override."
				},
				"pluginDescriptorRef": {
					"position": 30,
					"description": "Reference to the plugin descriptor for this instance. The plugin descriptor cannot be modified once the instance is created.<br>Note: Ignored when specifying a connection's adapter override.",
					"$ref": "#/definitions/ResourceLink"
				},
				"parentRef": {
					"position": 40,
					"description": "The reference to this plugin's parent instance. The parent reference is only accepted if the plugin type supports parent instances.<br>Note: This parent reference is required if this plugin instance is used as an overriding plugin (e.g. connection adapter overrides)",
					"$ref": "#/definitions/ResourceLink"
				},
				"configuration": {
					"position": 50,
					"description": "Plugin instance configuration.",
					"$ref": "#/definitions/PluginConfiguration"
				},
				"attributeContract": {
					"position": 100,
					"description": "The list of attributes that the identity store provisioner provides.",
					"$ref": "#/definitions/IdentityStoreProvisionerAttributeContract"
				},
				"groupAttributeContract": {
					"position": 110,
					"description": "The list of group attributes that the identity store provisioner provides.",
					"$ref": "#/definitions/IdentityStoreProvisionerGroupAttributeContract"
				}
			},
			"description": "An identity store provisioner instance."
		},
		"IdentityStoreProvisionerAttributeContract": {
			"type": "object",
			"required": [
				"coreAttributes"
			],
			"properties": {
				"coreAttributes": {
					"type": "array",
					"position": 10,
					"description": "A list of identity store provisioner attributes that correspond to the attributes exposed by the identity store provisioner type.",
					"items": {
						"$ref": "#/definitions/Attribute"
					}
				},
				"extendedAttributes": {
					"type": "array",
					"position": 20,
					"description": "A list of additional attributes that can be returned by the identity store provisioner. The extended attributes are only used if the provisioner supports them.",
					"items": {
						"$ref": "#/definitions/Attribute"
					}
				},
				"inherited": {
					"type": "boolean",
					"position": 30,
					"description": "Whether this attribute contract is inherited from its parent instance. If true, the rest of the properties in this model become read-only. The default value is false."
				}
			},
			"description": "A set of attributes exposed by an identity store provisioner."
		},
		"IdentityStoreProvisionerGroupAttributeContract": {
			"type": "object",
			"required": [
				"coreAttributes"
			],
			"properties": {
				"coreAttributes": {
					"type": "array",
					"position": 10,
					"description": "A list of identity store provisioner group attributes that correspond to the group attributes exposed by the identity store provisioner type.",
					"items": {
						"$ref": "#/definitions/GroupAttribute"
					}
				},
				"extendedAttributes": {
					"type": "array",
					"position": 20,
					"description": "A list of additional group attributes that can be returned by the identity store provisioner. The extended group attributes are only used if the provisioner supports them.",
					"items": {
						"$ref": "#/definitions/GroupAttribute"
					}
				},
				"inherited": {
					"type": "boolean",
					"position": 30,
					"description": "Whether this group attribute contract is inherited from its parent instance. If true, the rest of the properties in this model become read-only. The default value is false."
				}
			},
			"description": "A set of group attributes exposed by an identity store provisioner."
		},
		"IdentityStoreProvisioners": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of identity store provisioners.",
					"items": {
						"$ref": "#/definitions/IdentityStoreProvisioner"
					}
				}
			},
			"description": "A collection of identity store provisioners."
		},
		"IdpAdapterDescriptors": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of IdP adapter descriptors.",
					"items": {
						"$ref": "#/definitions/IdpAdapterDescriptor"
					}
				}
			},
			"description": "A collection of IdP adapter descriptors."
		},
		"IdpAdapters": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of IdP adapters.",
					"items": {
						"$ref": "#/definitions/IdpAdapter"
					}
				}
			},
			"description": "A collection of IdP adapters."
		},
		"IdpConnections": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of connections.",
					"items": {
						"$ref": "#/definitions/IdpConnection"
					}
				}
			},
			"description": "A collection of IdP connections."
		},
		"ConnectionCerts": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of certificates.",
					"items": {
						"$ref": "#/definitions/ConnectionCert"
					}
				}
			},
			"description": "The certificates used for signature verification and XML encryption."
		},
		"DecryptionKeys": {
			"type": "object",
			"properties": {
				"primaryKeyRef": {
					"position": 10,
					"description": "The ID of the primary decryption key pair. It is also known as the alias and can be found by viewing the corresponding certificate under 'Signing & Decryption Keys & Certificates' in the PingFederate Administrative Console.",
					"$ref": "#/definitions/ResourceLink"
				},
				"secondaryKeyPairRef": {
					"position": 20,
					"description": "The ID of the secondary key pair used to decrypt message content received from the partner.",
					"$ref": "#/definitions/ResourceLink"
				}
			},
			"description": "Decryption keys used to decrypt message content received from the partner."
		},
		"IdpDefaultUrl": {
			"type": "object",
			"required": [
				"idpErrorMsg"
			],
			"properties": {
				"confirmIdpSlo": {
					"type": "boolean",
					"position": 10,
					"description": "Prompt user to confirm Single Logout (SLO)."
				},
				"idpSloSuccessUrl": {
					"type": "string",
					"position": 20,
					"description": "Provide the default URL you would like to send the user to when Single Logout has succeeded."
				},
				"idpErrorMsg": {
					"type": "string",
					"position": 30,
					"description": "Provide the error text displayed in a user's browser when an SSO operation fails."
				}
			},
			"description": "IDP Default URL settings."
		},
		"IdpToSpAdapterMapping": {
			"type": "object",
			"required": [
				"attributeContractFulfillment",
				"sourceId",
				"targetId"
			],
			"properties": {
				"attributeSources": {
					"type": "array",
					"position": 10,
					"description": "A list of configured data stores to look up attributes from.",
					"items": {
						"$ref": "#/definitions/AttributeSource"
					}
				},
				"attributeContractFulfillment": {
					"type": "object",
					"position": 20,
					"description": "A list of mappings from attribute names to their fulfillment values.",
					"additionalProperties": {
						"$ref": "#/definitions/AttributeFulfillmentValue"
					}
				},
				"issuanceCriteria": {
					"position": 30,
					"description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
					"$ref": "#/definitions/IssuanceCriteria"
				},
				"sourceId": {
					"type": "string",
					"position": 40,
					"description": "The id of the IdP Adapter."
				},
				"targetId": {
					"type": "string",
					"position": 50,
					"description": "The id of the SP Adapter."
				},
				"id": {
					"type": "string",
					"position": 60,
					"description": "The id of the IdP-to-SP Adapter mapping. This field is read-only and is ignored when passed in with the payload."
				},
				"defaultTargetResource": {
					"type": "string",
					"position": 70,
					"description": "Default target URL for this adapter-to-adapter mapping configuration."
				},
				"licenseConnectionGroupAssignment": {
					"type": "string",
					"position": 80,
					"description": "The license connection group."
				},
				"applicationName": {
					"type": "string",
					"position": 90,
					"description": "The application name."
				},
				"applicationIconUrl": {
					"type": "string",
					"position": 100,
					"description": "The application icon URL."
				}
			},
			"description": "The IdP-to-SP Adapter Mapping."
		},
		"IdpToSpAdapterMappings": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of connections.",
					"items": {
						"$ref": "#/definitions/IdpToSpAdapterMapping"
					}
				}
			},
			"description": "A collection of IdP-to-SP Adapter Mappings."
		},
		"IncomingProxySettings": {
			"type": "object",
			"properties": {
				"forwardedIpAddressHeaderName": {
					"type": "string",
					"position": 10,
					"description": "Globally specify the header name (for example, X-Forwarded-For) where PingFederate should attempt to retrieve the client IP address in all HTTP requests."
				},
				"forwardedIpAddressHeaderIndex": {
					"type": "string",
					"position": 20,
					"description": "PingFederate combines multiple comma-separated header values into the same order that they are received. Define which IP address you want to use. Default is to use the last address.",
					"enum": [
						"FIRST",
						"LAST"
					]
				},
				"forwardedHostHeaderName": {
					"type": "string",
					"position": 30,
					"description": "Globally specify the header name (for example, X-Forwarded-Host) where PingFederate should attempt to retrieve the hostname and port in all HTTP requests."
				},
				"forwardedHostHeaderIndex": {
					"type": "string",
					"position": 40,
					"description": "PingFederate combines multiple comma-separated header values into the same order that they are received. Define which hostname you want to use. Default is to use the last hostname.",
					"enum": [
						"FIRST",
						"LAST"
					]
				},
				"clientCertSSLHeaderName": {
					"type": "string",
					"position": 50,
					"description": "While the proxy server is configured to pass client certificates as HTTP request headers, specify the header name here."
				},
				"clientCertChainSSLHeaderName": {
					"type": "string",
					"position": 60,
					"description": "While the proxy server is configured to pass client certificates as HTTP request headers, specify the chain header name here."
				},
				"proxyTerminatesHttpsConns": {
					"type": "boolean",
					"position": 70,
					"description": "Allows you to globally specify that connections to the reverse proxy are made over HTTPS even when HTTP is used between the reverse proxy and PingFederate."
				}
			},
			"description": "Incoming Proxy Settings."
		},
		"KerberosKeySet": {
			"type": "object",
			"required": [
				"encryptedKeySet"
			],
			"properties": {
				"encryptedKeySet": {
					"type": "string",
					"position": 10,
					"description": "The encrypted key set."
				},
				"deactivatedAt": {
					"type": "string",
					"format": "date-time",
					"position": 20,
					"description": "Time at which the key set was deactivated due to password change. This field is not populated if the key set is active."
				}
			},
			"description": "Represents a set of Kerberos encryption keys."
		},
		"KerberosRealm": {
			"type": "object",
			"required": [
				"kerberosRealmName"
			],
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The persistent, unique ID for the Kerberos Realm. It can be any combination of [a-z0-9._-]. This property is system-assigned if not specified."
				},
				"kerberosRealmName": {
					"type": "string",
					"position": 20,
					"description": "The Domain/Realm name used for display in UI screens."
				},
				"connectionType": {
					"type": "string",
					"position": 25,
					"description": "Controls how PingFederate connects to the Active Directory/Kerberos Realm. The default is: \"DIRECT\".",
					"enum": [
						"DIRECT",
						"LDAP_GATEWAY"
					]
				},
				"keyDistributionCenters": {
					"type": "array",
					"position": 30,
					"description": "The Domain Controller/Key Distribution Center Host Action Names. Only applicable when 'connectionType' is \"DIRECT\".",
					"items": {
						"type": "string"
					}
				},
				"kerberosUsername": {
					"type": "string",
					"position": 40,
					"description": "The Domain/Realm username. Only required when 'connectionType' is \"DIRECT\"."
				},
				"kerberosPassword": {
					"type": "string",
					"position": 50,
					"description": "The Domain/Realm password. GETs will not return this attribute. To update this field, specify the new value in this attribute. Only applicable when 'connectionType' is \"DIRECT\"."
				},
				"kerberosEncryptedPassword": {
					"type": "string",
					"position": 60,
					"description": "For GET requests, this field contains the encrypted Domain/Realm password, if one exists. For POST and PUT requests, if you wish to reuse the existing password, this field should be passed back unchanged. Only applicable when 'connectionType' is \"DIRECT\"."
				},
				"keySets": {
					"type": "array",
					"position": 70,
					"description": "A list of key sets for validating Kerberos tickets. On POST or PUT, if 'retainPreviousKeysOnPasswordChange' is true, PingFederate automatically adds the key set for the current password to this list and removes expired key sets. If 'retainPreviousKeysOnPasswordChange' is false, this list is cleared. Only applicable when 'connectionType' is \"DIRECT\".",
					"items": {
						"$ref": "#/definitions/KerberosKeySet"
					}
				},
				"retainPreviousKeysOnPasswordChange": {
					"type": "boolean",
					"position": 80,
					"description": "Determines whether the previous encryption keys are retained when the password is updated. Retaining the previous keys allows existing Kerberos tickets to continue to be validated. The default is false. Only applicable when 'connectionType' is \"DIRECT\"."
				},
				"suppressDomainNameConcatenation": {
					"type": "boolean",
					"position": 90,
					"description": "Controls whether the KDC hostnames and the realm name are concatenated in the auto-generated krb5.conf file. Default is false. Only applicable when 'connectionType' is \"DIRECT\"."
				},
				"ldapGatewayDataStoreRef": {
					"position": 100,
					"description": "The LDAP gateway used by PingFederate to communicate with the Active Directory. Only required when 'connectionType' is \"LDAP_GATEWAY\".",
					"$ref": "#/definitions/ResourceLink"
				}
			}
		},
		"KerberosRealms": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of kerberos realms.",
					"items": {
						"$ref": "#/definitions/KerberosRealm"
					}
				}
			},
			"description": "A collection of Kerberos Realms."
		},
		"KerberosRealmsSettings": {
			"type": "object",
			"required": [
				"kdcRetries",
				"kdcTimeout"
			],
			"properties": {
				"forceTcp": {
					"type": "boolean",
					"position": 10,
					"description": "Reference to the default security."
				},
				"kdcRetries": {
					"type": "string",
					"position": 20,
					"description": "Reference to the default Key Distribution Center Retries."
				},
				"debugLogOutput": {
					"type": "boolean",
					"position": 30,
					"description": "Reference to the default logging."
				},
				"kdcTimeout": {
					"type": "string",
					"position": 40,
					"description": "Reference to the default Key Distribution Center Timeout (in seconds)."
				},
				"keySetRetentionPeriodMins": {
					"type": "integer",
					"format": "int32",
					"position": 50,
					"description": "The key set retention period in minutes. When 'retainPreviousKeysOnPasswordChange' is set to true for a realm, this setting determines how long keys will be retained after a password change occurs. If this field is omitted in a PUT request, the default of 610 minutes is applied."
				}
			},
			"description": "Settings for all of the Kerberos Realms."
		},
		"ConnectionGroupLicenseView": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "Group name from the license file."
				},
				"connectionCount": {
					"type": "integer",
					"format": "int32",
					"position": 20,
					"description": "Maximum number of connections permitted under the group."
				},
				"startDate": {
					"type": "string",
					"format": "date-time",
					"position": 30,
					"description": "Start date for the group."
				},
				"endDate": {
					"type": "string",
					"format": "date-time",
					"position": 40,
					"description": "End date for the group."
				}
			},
			"description": "Connection group license information."
		},
		"LicenseFeatureView": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of the license feature."
				},
				"value": {
					"type": "string",
					"position": 20,
					"description": "The value of the license feature."
				}
			},
			"description": "PingFederate license feature details."
		},
		"LicenseView": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"position": 5,
					"description": "Name of the person the license was issued to."
				},
				"id": {
					"type": "string",
					"position": 10,
					"description": "Unique identifier of a license."
				},
				"maxConnections": {
					"type": "integer",
					"format": "int32",
					"position": 15,
					"description": "Maximum number of connections that can be created under this license (if applicable)."
				},
				"usedConnections": {
					"type": "integer",
					"format": "int32",
					"position": 16,
					"description": "Number of used connections under this license."
				},
				"tier": {
					"type": "string",
					"position": 20,
					"description": "The tier value from the license file. The possible values are FREE, PERPETUAL or SUBSCRIPTION."
				},
				"issueDate": {
					"type": "string",
					"format": "date-time",
					"position": 25,
					"description": "The issue date value from the license file."
				},
				"expirationDate": {
					"type": "string",
					"format": "date-time",
					"position": 30,
					"description": "The expiration date value from the license file (if applicable)."
				},
				"enforcementType": {
					"type": "string",
					"position": 35,
					"description": "The enforcement type is a 3-bit binary value, expressed as a decimal digit. The bits from left to right are: <br>1: Shutdown on expire <br>2: Notify on expire <br>4: Enforce minor version <br>if all three enforcements are active, the enforcement type will be 7 (1 + 2 + 4); if only the first two are active, you have an enforcement type of 3 (1 + 2). "
				},
				"version": {
					"type": "string",
					"position": 40,
					"description": "The Ping Identity product version from the license file."
				},
				"product": {
					"type": "string",
					"position": 45,
					"description": "The Ping Identity product value from the license file."
				},
				"organization": {
					"type": "string",
					"position": 50,
					"description": "The organization value from the license file."
				},
				"gracePeriod": {
					"type": "integer",
					"format": "int64",
					"position": 55,
					"description": "Number of days provided as grace period, past the expiration date (if applicable)."
				},
				"nodeLimit": {
					"type": "integer",
					"format": "int32",
					"position": 60,
					"description": "Maximum number of clustered nodes allowed under this license (if applicable)."
				},
				"licenseGroups": {
					"type": "array",
					"position": 65,
					"description": "License connection groups, if applicable.",
					"items": {
						"$ref": "#/definitions/ConnectionGroupLicenseView"
					}
				},
				"oauthEnabled": {
					"type": "boolean",
					"position": 70,
					"description": "Indicates whether OAuth role is enabled for this license."
				},
				"wsTrustEnabled": {
					"type": "boolean",
					"position": 75,
					"description": "Indicates whether WS-Trust role is enabled for this license."
				},
				"provisioningEnabled": {
					"type": "boolean",
					"position": 80,
					"description": "Indicates whether Provisioning role is enabled for this license."
				},
				"bridgeMode": {
					"type": "boolean",
					"position": 90,
					"description": "Indicates whether this license is a bridge license or not."
				},
				"features": {
					"type": "array",
					"position": 100,
					"description": "Other licence features, if applicable.",
					"items": {
						"$ref": "#/definitions/LicenseFeatureView"
					}
				}
			},
			"description": "PingFederate License details."
		},
		"LicenseFile": {
			"type": "object",
			"required": [
				"fileData"
			],
			"properties": {
				"fileData": {
					"type": "string",
					"description": "The base64-encoded license file."
				}
			},
			"description": "License to import."
		},
		"LicenseAgreementInfo": {
			"type": "object",
			"properties": {
				"licenseAgreementUrl": {
					"type": "string",
					"position": 5,
					"description": "URL to license agreement."
				},
				"accepted": {
					"type": "boolean",
					"position": 10,
					"description": "Indicates whether license agreement has been accepted. The default value is false."
				}
			},
			"description": "PingFederate License Agreement information."
		},
		"BaseDefaultValueLocalIdentityField": {
			"allOf": [
				{
					"$ref": "#/definitions/LocalIdentityField"
				},
				{
					"type": "object",
					"properties": {
						"defaultValue": {
							"type": "string",
							"position": 100,
							"description": "The default value for this field."
						}
					},
					"description": "Holds fields that are shared by all default value type fields."
				}
			]
		},
		"BaseSelectionLocalIdentityField": {
			"allOf": [
				{
					"$ref": "#/definitions/LocalIdentityField"
				},
				{
					"type": "object",
					"properties": {
						"options": {
							"type": "array",
							"position": 100,
							"description": "The list of options for this selection field.",
							"items": {
								"type": "string"
							}
						}
					},
					"description": "Holds fields that are shared by all selection-type fields."
				}
			]
		},
		"CheckboxGroupLocalIdentityField": {
			"allOf": [
				{
					"$ref": "#/definitions/BaseSelectionLocalIdentityField"
				},
				{
					"type": "object",
					"required": [
						"options"
					],
					"properties": {
						"options": {
							"type": "array",
							"position": 100,
							"description": "The list of options for this selection field.",
							"items": {
								"type": "string"
							}
						}
					},
					"description": "A checkbox group selection type field."
				}
			]
		},
		"CheckboxLocalIdentityField": {
			"allOf": [
				{
					"$ref": "#/definitions/BaseDefaultValueLocalIdentityField"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "A checkbox selection type field."
				}
			]
		},
		"DataStoreAttribute": {
			"type": "object",
			"required": [
				"name",
				"type"
			],
			"discriminator": "type",
			"properties": {
				"type": {
					"type": "string",
					"position": 10,
					"description": "The data store attribute type.",
					"enum": [
						"LDAP",
						"PING_ONE_LDAP_GATEWAY",
						"JDBC",
						"CUSTOM"
					]
				},
				"name": {
					"type": "string",
					"position": 20,
					"description": "The data store attribute name."
				},
				"metadata": {
					"type": "object",
					"position": 30,
					"description": "The data store attribute metadata.",
					"additionalProperties": {
						"type": "string"
					}
				}
			},
			"description": "The data store attribute."
		},
		"DataStoreConfig": {
			"type": "object",
			"required": [
				"dataStoreRef",
				"type"
			],
			"discriminator": "type",
			"properties": {
				"type": {
					"type": "string",
					"position": 10,
					"description": "The data store config type.",
					"enum": [
						"LDAP",
						"PING_ONE_LDAP_GATEWAY",
						"JDBC",
						"CUSTOM"
					]
				},
				"dataStoreRef": {
					"position": 20,
					"description": "Reference to the associated data store.",
					"$ref": "#/definitions/ResourceLink"
				},
				"dataStoreMapping": {
					"type": "object",
					"position": 30,
					"description": "The data store mapping.",
					"additionalProperties": {
						"$ref": "#/definitions/DataStoreAttribute"
					}
				}
			},
			"description": "Local identity profile data store."
		},
		"DateLocalIdentityField": {
			"allOf": [
				{
					"$ref": "#/definitions/BaseDefaultValueLocalIdentityField"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "A date type field."
				}
			]
		},
		"DropDownLocalIdentityField": {
			"allOf": [
				{
					"$ref": "#/definitions/BaseSelectionLocalIdentityField"
				},
				{
					"type": "object",
					"required": [
						"options"
					],
					"properties": {
						"defaultValue": {
							"type": "string",
							"position": 100,
							"description": "The default value for this field."
						},
						"options": {
							"type": "array",
							"position": 110,
							"description": "The list of options for this selection field.",
							"items": {
								"type": "string"
							}
						}
					},
					"description": "A dropdown selection type field."
				}
			]
		},
		"EmailLocalIdentityField": {
			"allOf": [
				{
					"$ref": "#/definitions/LocalIdentityField"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "An email type field."
				}
			]
		},
		"EmailVerificationConfig": {
			"type": "object",
			"required": [
				"fieldForEmailToVerify",
				"fieldStoringVerificationStatus"
			],
			"properties": {
				"emailVerificationEnabled": {
					"type": "boolean",
					"position": 10,
					"description": "Whether the email ownership verification is enabled."
				},
				"verifyEmailTemplateName": {
					"type": "string",
					"position": 20,
					"description": "The template name for verify email. The default is message-template-email-ownership-verification.html."
				},
				"emailVerificationSentTemplateName": {
					"type": "string",
					"position": 30,
					"description": "The template name for email verification sent. The default is local.identity.email.verification.sent.html.<br>Note:Only applicable if EmailVerificationType is OTL."
				},
				"emailVerificationSuccessTemplateName": {
					"type": "string",
					"position": 40,
					"description": "The template name for email verification success. The default is local.identity.email.verification.success.html."
				},
				"emailVerificationErrorTemplateName": {
					"type": "string",
					"position": 50,
					"description": "The template name for email verification error.  The default is local.identity.email.verification.error.html."
				},
				"emailVerificationType": {
					"type": "string",
					"position": 60,
					"description": "Email Verification Type.",
					"enum": [
						"OTP",
						"OTL"
					]
				},
				"otpLength": {
					"type": "integer",
					"format": "int32",
					"position": 70,
					"description": "The OTP length generated for email verification. The default is 8.<br>Note: Only applicable if EmailVerificationType is OTP."
				},
				"otpRetryAttempts": {
					"type": "integer",
					"format": "int32",
					"position": 80,
					"description": "The number of OTP retry attempts for email verification. The default is 3.<br>Note: Only applicable if EmailVerificationType is OTP."
				},
				"allowedOtpCharacterSet": {
					"type": "string",
					"position": 90,
					"description": "The allowed character set used to generate the OTP. The default is 23456789BCDFGHJKMNPQRSTVWXZbcdfghjkmnpqrstvwxz.<br>Note: Only applicable if EmailVerificationType is OTP."
				},
				"otpTimeToLive": {
					"type": "integer",
					"format": "int32",
					"position": 100,
					"description": "Field used OTP time to live. The default is 15.<br>Note: Only applicable if EmailVerificationType is OTP."
				},
				"emailVerificationOtpTemplateName": {
					"type": "string",
					"position": 110,
					"description": "The template name for email verification OTP verification.  The default is local.identity.email.verification.otp.html.<br>Note: Only applicable if EmailVerificationType is OTP."
				},
				"otlTimeToLive": {
					"type": "integer",
					"format": "int32",
					"position": 120,
					"description": "Field used OTL time to live. The default is 1440.<br>Note: Only applicable if EmailVerificationType is OTL."
				},
				"fieldForEmailToVerify": {
					"type": "string",
					"position": 130,
					"description": "Field used for email ownership verification.<br>Note: Not required when emailVerificationEnabled is set to false."
				},
				"fieldStoringVerificationStatus": {
					"type": "string",
					"position": 140,
					"description": "Field used for storing email verification status.<br>Note: Not required when emailVerificationEnabled is set to false."
				},
				"notificationPublisherRef": {
					"position": 150,
					"description": "Reference to the associated notification publisher.",
					"$ref": "#/definitions/ResourceLink"
				},
				"requireVerifiedEmail": {
					"type": "boolean",
					"position": 160,
					"description": "Whether the user must verify their email address before they can complete a single sign-on transaction. The default is false."
				},
				"requireVerifiedEmailTemplateName": {
					"type": "string",
					"position": 170,
					"description": "The template to render when the user must verify their email address before they can complete a single sign-on transaction. The default is local.identity.email.verification.required.html.<br>Note:Only applicable if EmailVerificationType is OTL and requireVerifiedEmail is true."
				}
			},
			"description": "A local identity email verification configuration."
		},
		"FieldConfig": {
			"type": "object",
			"properties": {
				"fields": {
					"type": "array",
					"position": 10,
					"description": "The field configuration for the local identity profile.",
					"items": {
						"$ref": "#/definitions/LocalIdentityField"
					}
				},
				"stripSpaceFromUniqueField": {
					"type": "boolean",
					"position": 20,
					"description": "Strip leading/trailing spaces from unique ID field. Default is true."
				}
			},
			"description": "A local identity profile field configuration."
		},
		"HiddenLocalIdentityField": {
			"allOf": [
				{
					"$ref": "#/definitions/LocalIdentityField"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "A hidden selection type field."
				}
			]
		},
		"LdapDataStoreAttribute": {
			"allOf": [
				{
					"$ref": "#/definitions/DataStoreAttribute"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "LDAP data store attribute."
				}
			]
		},
		"LdapDataStoreConfig": {
			"allOf": [
				{
					"$ref": "#/definitions/DataStoreConfig"
				},
				{
					"type": "object",
					"required": [
						"baseDn",
						"createPattern",
						"dataStoreMapping",
						"objectClass"
					],
					"properties": {
						"baseDn": {
							"type": "string",
							"position": 30,
							"description": "The base DN to search from. If not specified, the search will start at the LDAP's root."
						},
						"createPattern": {
							"type": "string",
							"position": 50,
							"description": "The Relative DN Pattern that will be used to create objects in the directory."
						},
						"objectClass": {
							"type": "string",
							"position": 60,
							"description": "The Object Class used by the new objects stored in the LDAP data store."
						},
						"auxiliaryObjectClasses": {
							"type": "array",
							"position": 70,
							"description": "The Auxiliary Object Classes used by the new objects stored in the LDAP data store.",
							"items": {
								"type": "string"
							}
						},
						"dataStoreMapping": {
							"type": "object",
							"position": 100,
							"description": "The data store mapping.",
							"additionalProperties": {
								"$ref": "#/definitions/DataStoreAttribute"
							}
						}
					},
					"description": "LDAP data store configuration."
				}
			]
		},
		"LocalIdentityAuthSource": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The persistent, unique ID for the local identity authentication source. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified."
				},
				"source": {
					"type": "string",
					"position": 20,
					"description": "The local identity authentication source. Source is unique."
				}
			},
			"description": "An authentication source name."
		},
		"LocalIdentityAuthSourceUpdatePolicy": {
			"type": "object",
			"properties": {
				"storeAttributes": {
					"type": "boolean",
					"position": 10,
					"description": "Whether or not to store attributes that came from authentication sources."
				},
				"retainAttributes": {
					"type": "boolean",
					"position": 20,
					"description": "Whether or not to keep attributes after user disconnects."
				},
				"updateAttributes": {
					"type": "boolean",
					"position": 30,
					"description": "Whether or not to update attributes when users authenticate."
				},
				"updateInterval": {
					"type": "number",
					"format": "double",
					"position": 40,
					"description": "The minimum number of days between updates."
				}
			},
			"description": "Settings to determine whether to store attributes that came from third-party authentication sources."
		},
		"LocalIdentityField": {
			"type": "object",
			"required": [
				"id",
				"label",
				"type"
			],
			"discriminator": "type",
			"properties": {
				"type": {
					"type": "string",
					"position": 10,
					"description": "The type of the local identity field.",
					"enum": [
						"CHECKBOX",
						"CHECKBOX_GROUP",
						"DATE",
						"DROP_DOWN",
						"EMAIL",
						"PHONE",
						"TEXT",
						"HIDDEN"
					]
				},
				"id": {
					"type": "string",
					"position": 20,
					"description": "Id of the local identity field."
				},
				"label": {
					"type": "string",
					"position": 40,
					"description": "Label of the local identity field."
				},
				"registrationPageField": {
					"type": "boolean",
					"position": 50,
					"description": "Whether this is a registration page field or not."
				},
				"profilePageField": {
					"type": "boolean",
					"position": 60,
					"description": "Whether this is a profile page field or not."
				},
				"attributes": {
					"type": "object",
					"position": 70,
					"description": "Attributes of the local identity field.",
					"additionalProperties": {
						"type": "boolean"
					}
				}
			},
			"description": "Local identity profile fields."
		},
		"LocalIdentityProfile": {
			"type": "object",
			"required": [
				"apcId",
				"name"
			],
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The persistent, unique ID for the local identity profile. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified."
				},
				"name": {
					"type": "string",
					"position": 20,
					"description": "The local identity profile name. Name is unique."
				},
				"apcId": {
					"position": 30,
					"description": "The reference to the authentication policy contract to use for this local identity profile.",
					"$ref": "#/definitions/ResourceLink"
				},
				"authSources": {
					"type": "array",
					"position": 40,
					"description": "The local identity authentication sources. Sources are unique.",
					"items": {
						"$ref": "#/definitions/LocalIdentityAuthSource"
					}
				},
				"authSourceUpdatePolicy": {
					"position": 45,
					"description": "The attribute update policy for authentication sources.",
					"$ref": "#/definitions/LocalIdentityAuthSourceUpdatePolicy"
				},
				"registrationEnabled": {
					"type": "boolean",
					"position": 50,
					"description": "Whether the registration configuration is enabled or not."
				},
				"registrationConfig": {
					"position": 60,
					"description": "The local identity profile registration configuration.",
					"$ref": "#/definitions/RegistrationConfig"
				},
				"profileConfig": {
					"position": 70,
					"description": "The local identity profile management configuration.",
					"$ref": "#/definitions/ProfileConfig"
				},
				"fieldConfig": {
					"position": 80,
					"description": "The local identity profile field configuration.",
					"$ref": "#/definitions/FieldConfig"
				},
				"emailVerificationConfig": {
					"position": 90,
					"description": "The local identity email verification configuration.",
					"$ref": "#/definitions/EmailVerificationConfig"
				},
				"dataStoreConfig": {
					"position": 100,
					"description": "The local identity profile data store configuration.",
					"$ref": "#/definitions/DataStoreConfig"
				},
				"profileEnabled": {
					"type": "boolean",
					"position": 110,
					"description": "Whether the profile configuration is enabled or not."
				}
			},
			"description": "A local identity profile."
		},
		"PhoneLocalIdentityField": {
			"allOf": [
				{
					"$ref": "#/definitions/LocalIdentityField"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "A phone type field."
				}
			]
		},
		"ProfileConfig": {
			"type": "object",
			"required": [
				"templateName"
			],
			"properties": {
				"deleteIdentityEnabled": {
					"type": "boolean",
					"position": 10,
					"description": "Whether the end user is allowed to use delete functionality."
				},
				"templateName": {
					"type": "string",
					"position": 20,
					"description": "The template name for end-user profile management."
				}
			},
			"description": "A local identity profile management configuration."
		},
		"RegistrationConfig": {
			"type": "object",
			"required": [
				"templateName"
			],
			"properties": {
				"captchaEnabled": {
					"type": "boolean",
					"position": 10,
					"description": "Whether CAPTCHA is enabled or not in the registration configuration."
				},
				"captchaProviderRef": {
					"position": 15,
					"description": "Reference to the associated CAPTCHA provider.",
					"$ref": "#/definitions/ResourceLink"
				},
				"templateName": {
					"type": "string",
					"position": 20,
					"description": "The template name for the registration configuration."
				},
				"createAuthnSessionAfterRegistration": {
					"type": "boolean",
					"position": 30,
					"description": "Whether to create an Authentication Session when registering a local account. Default is true."
				},
				"usernameField": {
					"type": "string",
					"position": 31,
					"description": "When creating an Authentication Session after registering a local account, PingFederate will pass the Unique ID field's value as the username. If the Unique ID value is not the username, then override which field's value will be used as the username."
				},
				"thisIsMyDeviceEnabled": {
					"type": "boolean",
					"position": 40,
					"description": "Allows users to indicate whether their device is shared or private. In this mode, PingFederate Authentication Sessions will not be stored unless the user indicates the device is private."
				},
				"registrationWorkflow": {
					"position": 50,
					"description": "The policy fragment to be executed as part of the registration workflow.",
					"$ref": "#/definitions/ResourceLink"
				},
				"executeWorkflow": {
					"type": "string",
					"position": 51,
					"description": "This setting indicates whether PingFederate should execute the workflow before or after account creation. The default is to run the registration workflow after account creation.",
					"enum": [
						"BEFORE_ACCOUNT_CREATION",
						"AFTER_ACCOUNT_CREATION"
					]
				}
			},
			"description": "A local identity profile registration configuration."
		},
		"TextLocalIdentityField": {
			"allOf": [
				{
					"$ref": "#/definitions/BaseDefaultValueLocalIdentityField"
				},
				{
					"type": "object",
					"properties": {
						
					},
					"description": "A text type field."
				}
			]
		},
		"LocalIdentityProfiles": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of local identity profiles.",
					"items": {
						"$ref": "#/definitions/LocalIdentityProfile"
					}
				}
			},
			"description": "A collection of local identity profiles."
		},
		"MetadataUrl": {
			"type": "object",
			"required": [
				"name",
				"url"
			],
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The persistent, unique ID for the Metadata Url. It can be any combination of [a-z0-9._-]. This property is system-assigned if not specified."
				},
				"name": {
					"type": "string",
					"position": 20,
					"description": "The name for the Metadata URL."
				},
				"url": {
					"type": "string",
					"position": 30,
					"description": "The Metadata URL."
				},
				"certView": {
					"position": 40,
					"description": "The Signature Verification Certificate details. This property is read-only and is always ignored on a POST or PUT.",
					"$ref": "#/definitions/CertView"
				},
				"x509File": {
					"position": 50,
					"description": "Data of the Signature Verification Certificate for the Metadata URL.",
					"$ref": "#/definitions/X509File"
				},
				"validateSignature": {
					"type": "boolean",
					"position": 60,
					"description": "Perform Metadata Signature Validation. The default value is TRUE."
				}
			},
			"description": "Metadata URL and corresponding Signature Verification Certificate."
		},
		"MetadataUrls": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of Metadata URL items.",
					"items": {
						"$ref": "#/definitions/MetadataUrl"
					}
				}
			}
		},
		"NotificationPublishersSettings": {
			"type": "object",
			"properties": {
				"defaultNotificationPublisherRef": {
					"position": 10,
					"description": "Reference to the default notification publisher, if one is defined.",
					"$ref": "#/definitions/ResourceLink"
				}
			},
			"description": "General notification publisher settings."
		},
		"NotificationPublishers": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of notification publisher plugin instances.",
					"items": {
						"$ref": "#/definitions/NotificationPublisher"
					}
				}
			},
			"description": "A collection of notification publisher plugin instances."
		},
		"NotificationPublisherDescriptors": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of notification publisher plugin descriptors.",
					"items": {
						"$ref": "#/definitions/NotificationPublisherDescriptor"
					}
				}
			},
			"description": "A collection of notification publisher plugin descriptors."
		},
		"ApcToPersistentGrantMapping": {
			"type": "object",
			"required": [
				"attributeContractFulfillment",
				"authenticationPolicyContractRef",
				"id"
			],
			"properties": {
				"id": {
					"type": "string",
					"position": 1,
					"description": "The ID of the authentication policy contract to persistent grant mapping."
				},
				"authenticationPolicyContractRef": {
					"position": 2,
					"description": "Reference to the associated authentication policy contract. The reference cannot be changed after the mapping has been created.",
					"$ref": "#/definitions/ResourceLink"
				},
				"attributeSources": {
					"type": "array",
					"position": 10,
					"description": "A list of configured data stores to look up attributes from.",
					"items": {
						"$ref": "#/definitions/AttributeSource"
					}
				},
				"attributeContractFulfillment": {
					"type": "object",
					"position": 20,
					"description": "A list of mappings from attribute names to their fulfillment values.",
					"additionalProperties": {
						"$ref": "#/definitions/AttributeFulfillmentValue"
					}
				},
				"issuanceCriteria": {
					"position": 30,
					"description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
					"$ref": "#/definitions/IssuanceCriteria"
				}
			},
			"description": "An authentication policy contract mapping into an OAuth persistent grant."
		},
		"ApcToPersistentGrantMappings": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of OAuth authentication policy contract to persistent grant mappings.",
					"items": {
						"$ref": "#/definitions/ApcToPersistentGrantMapping"
					}
				}
			},
			"description": "A collection of OAuth authentication policy contract to persistent grant mapping items."
		},
		"AlternativeLoginHintTokenIssuer": {
			"type": "object",
			"required": [
				"issuer"
			],
			"properties": {
				"issuer": {
					"type": "string",
					"position": 10,
					"description": "The issuer. Issuer is unique."
				},
				"jwksURL": {
					"type": "string",
					"position": 20,
					"description": "The JWKS URL."
				},
				"jwks": {
					"type": "string",
					"position": 30,
					"description": "The JWKS."
				}
			},
			"description": "JSON Web Key Set Settings."
		},
		"IdentityHintAttribute": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of this attribute."
				}
			},
			"description": "An attribute for the ciba request policy's identity hint attribute contract."
		},
		"IdentityHintContract": {
			"type": "object",
			"required": [
				"coreAttributes"
			],
			"properties": {
				"coreAttributes": {
					"type": "array",
					"position": 10,
					"description": "A list of required identity hint contract attributes.",
					"items": {
						"$ref": "#/definitions/IdentityHintAttribute"
					}
				},
				"extendedAttributes": {
					"type": "array",
					"position": 20,
					"description": "A list of additional identity hint contract attributes.",
					"items": {
						"$ref": "#/definitions/IdentityHintAttribute"
					}
				}
			},
			"description": "A set of attributes exposed by request policy contract."
		},
		"RequestPolicy": {
			"type": "object",
			"required": [
				"authenticatorRef",
				"id",
				"identityHintContract",
				"name"
			],
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The request policy ID. ID is unique."
				},
				"name": {
					"type": "string",
					"position": 20,
					"description": "The request policy name. Name is unique."
				},
				"authenticatorRef": {
					"position": 30,
					"description": "Reference to the associated authenticator.",
					"$ref": "#/definitions/ResourceLink"
				},
				"userCodePcvRef": {
					"position": 40,
					"description": "Reference to the associated password credential validator.",
					"$ref": "#/definitions/ResourceLink"
				},
				"transactionLifetime": {
					"type": "integer",
					"format": "int32",
					"position": 50,
					"description": "The transaction lifetime in seconds."
				},
				"allowUnsignedLoginHintToken": {
					"type": "boolean",
					"position": 60,
					"description": "Allow unsigned login hint token."
				},
				"requireTokenForIdentityHint": {
					"type": "boolean",
					"position": 70,
					"description": "Require token for identity hint."
				},
				"alternativeLoginHintTokenIssuers": {
					"type": "array",
					"position": 80,
					"description": "Alternative login hint token issuers.",
					"items": {
						"$ref": "#/definitions/AlternativeLoginHintTokenIssuer"
					}
				},
				"identityHintContract": {
					"position": 90,
					"description": "Identity hint attribute contract.",
					"$ref": "#/definitions/IdentityHintContract"
				},
				"identityHintContractFulfillment": {
					"position": 100,
					"description": "Identity hint attribute contract fulfillment.",
					"$ref": "#/definitions/AttributeMapping"
				},
				"identityHintMapping": {
					"position": 110,
					"description": "Identity hint contract to request policy mapping.",
					"$ref": "#/definitions/AttributeMapping"
				}
			},
			"description": "The set of attributes used to configure a CIBA request policy."
		},
		"RequestPolicies": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of request policies.",
					"items": {
						"$ref": "#/definitions/RequestPolicy"
					}
				}
			},
			"description": "A collection of CIBA request policies."
		},
		"CibaServerPolicySettings": {
			"type": "object",
			"properties": {
				"defaultRequestPolicyRef": {
					"position": 10,
					"description": "Reference to the default request policy, if one is defined.",
					"$ref": "#/definitions/ResourceLink"
				}
			},
			"description": "Settings for the CIBA request policy configuration."
		},
		"Client": {
			"type": "object",
			"required": [
				"clientId",
				"grantTypes",
				"name"
			],
			"properties": {
				"clientId": {
					"type": "string",
					"position": 10,
					"description": "A unique identifier the client provides to the Resource Server to identify itself. This identifier is included with every request the client makes. For PUT requests, this field is optional and it will be overridden by the 'id' parameter of the PUT request."
				},
				"enabled": {
					"type": "boolean",
					"position": 15,
					"description": "Specifies whether the client is enabled. The default value is true."
				},
				"redirectUris": {
					"type": "array",
					"position": 20,
					"description": "URIs to which the OAuth AS may redirect the resource owner's user agent after authorization is obtained. A redirection URI is used with the Authorization Code and Implicit grant types. Wildcards are allowed. However, for security reasons, make the URL as restrictive as possible.For example: https://*.company.com/* Important: If more than one URI is added or if a single URI uses wildcards, then Authorization Code grant and token requests must contain a specific matching redirect uri parameter.",
					"items": {
						"type": "string"
					}
				},
				"grantTypes": {
					"type": "array",
					"position": 30,
					"description": "The grant types allowed for this client. The EXTENSION grant type applies to SAML/JWT assertion grants.",
					"uniqueItems": true,
					"items": {
						"type": "string",
						"enum": [
							"IMPLICIT",
							"AUTHORIZATION_CODE",
							"RESOURCE_OWNER_CREDENTIALS",
							"CLIENT_CREDENTIALS",
							"REFRESH_TOKEN",
							"EXTENSION",
							"DEVICE_CODE",
							"ACCESS_TOKEN_VALIDATION",
							"CIBA",
							"TOKEN_EXCHANGE"
						]
					}
				},
				"name": {
					"type": "string",
					"position": 40,
					"description": "A descriptive name for the client instance. This name appears when the user is prompted for authorization."
				},
				"description": {
					"type": "string",
					"position": 50,
					"description": "A description of what the client application does. This description appears when the user is prompted for authorization."
				},
				"modificationDate": {
					"type": "string",
					"format": "date-time",
					"position": 55,
					"description": "The time at which the client was last changed. This property is read only and is ignored on PUT and POST requests."
				},
				"creationDate": {
					"type": "string",
					"format": "date-time",
					"position": 56,
					"description": "The time at which the client was created. This property is read only and is ignored on PUT and POST requests."
				},
				"logoUrl": {
					"type": "string",
					"position": 60,
					"description": "The location of the logo used on user-facing OAuth grant authorization and revocation pages."
				},
				"defaultAccessTokenManagerRef": {
					"position": 65,
					"description": "The default access token manager for this client.",
					"$ref": "#/definitions/ResourceLink"
				},
				"restrictToDefaultAccessTokenManager": {
					"type": "boolean",
					"position": 67,
					"description": "Determines whether the client is restricted to using only its default access token manager. The default is false."
				},
				"validateUsingAllEligibleAtms": {
					"type": "boolean",
					"position": 68,
					"description": "Validates token using all eligible access token managers for the client. This setting is ignored if 'restrictToDefaultAccessTokenManager' is set to true."
				},
				"refreshRolling": {
					"type": "string",
					"position": 70,
					"description": "Use ROLL or DONT_ROLL to override the Roll Refresh Token Values setting on the Authorization Server Settings. SERVER_DEFAULT will default to the Roll Refresh Token Values setting on the Authorization Server Setting screen. Defaults to SERVER_DEFAULT.",
					"enum": [
						"SERVER_DEFAULT",
						"DONT_ROLL",
						"ROLL"
					]
				},
				"refreshTokenRollingIntervalType": {
					"type": "string",
					"position": 73,
					"description": "Use OVERRIDE_SERVER_DEFAULT to override the Refresh Token Rolling Interval value on the Authorization Server Settings. SERVER_DEFAULT will default to the Refresh Token Rolling Interval value on the Authorization Server Setting. Defaults to SERVER_DEFAULT.",
					"enum": [
						"SERVER_DEFAULT",
						"OVERRIDE_SERVER_DEFAULT"
					]
				},
				"refreshTokenRollingInterval": {
					"type": "integer",
					"format": "int64",
					"position": 74,
					"description": "The minimum interval to roll refresh tokens, in hours. This value will override the Refresh Token Rolling Interval Value on the Authorization Server Settings."
				},
				"persistentGrantExpirationType": {
					"type": "string",
					"position": 80,
					"description": "Allows an administrator to override the Persistent Grant Lifetime set globally for the OAuth AS. Defaults to SERVER_DEFAULT.",
					"enum": [
						"INDEFINITE_EXPIRY",
						"SERVER_DEFAULT",
						"OVERRIDE_SERVER_DEFAULT"
					]
				},
				"persistentGrantExpirationTime": {
					"type": "integer",
					"format": "int64",
					"position": 90,
					"description": "The persistent grant expiration time. -1 indicates an indefinite amount of time."
				},
				"persistentGrantExpirationTimeUnit": {
					"type": "string",
					"position": 100,
					"description": "The persistent grant expiration time unit.",
					"enum": [
						"MINUTES",
						"DAYS",
						"HOURS"
					]
				},
				"persistentGrantIdleTimeoutType": {
					"type": "string",
					"position": 101,
					"description": "Allows an administrator to override the Persistent Grant Idle Timeout set globally for the OAuth AS. Defaults to SERVER_DEFAULT.",
					"enum": [
						"INDEFINITE_EXPIRY",
						"SERVER_DEFAULT",
						"OVERRIDE_SERVER_DEFAULT"
					]
				},
				"persistentGrantIdleTimeout": {
					"type": "integer",
					"format": "int64",
					"position": 102,
					"description": "The persistent grant idle timeout."
				},
				"persistentGrantIdleTimeoutTimeUnit": {
					"type": "string",
					"position": 103,
					"description": "The persistent grant idle timeout time unit.",
					"enum": [
						"MINUTES",
						"DAYS",
						"HOURS"
					]
				},
				"persistentGrantReuseType": {
					"type": "string",
					"position": 104,
					"description": "Allows and administrator to override the Reuse Existing Persistent Access Grants for Grant Types set globally for OAuth AS. Defaults to SERVER_DEFAULT.",
					"enum": [
						"SERVER_DEFAULT",
						"OVERRIDE_SERVER_DEFAULT"
					]
				},
				"persistentGrantReuseGrantTypes": {
					"type": "array",
					"position": 105,
					"description": "The grant types that the OAuth AS can reuse rather than creating a new grant for each request. This value will override the Reuse Existing Persistent Access Grants for Grant Types on the Authorization Server Settings. Only 'IMPLICIT' or 'AUTHORIZATION_CODE' or 'RESOURCE_OWNER_CREDENTIALS' are valid grant types.",
					"uniqueItems": true,
					"items": {
						"type": "string",
						"enum": [
							"IMPLICIT",
							"AUTHORIZATION_CODE",
							"RESOURCE_OWNER_CREDENTIALS",
							"CLIENT_CREDENTIALS",
							"REFRESH_TOKEN",
							"EXTENSION",
							"DEVICE_CODE",
							"ACCESS_TOKEN_VALIDATION",
							"CIBA",
							"TOKEN_EXCHANGE"
						]
					}
				},
				"allowAuthenticationApiInit": {
					"type": "boolean",
					"position": 107,
					"description": "Set to true to allow this client to initiate the authentication API redirectless flow."
				},
				"bypassApprovalPage": {
					"type": "boolean",
					"position": 110,
					"description": "Use this setting, for example, when you want to deploy a trusted application and authenticate end users via an IdP adapter or IdP connection."
				},
				"restrictScopes": {
					"type": "boolean",
					"position": 120,
					"description": "Restricts this client's access to specific scopes."
				},
				"restrictedScopes": {
					"type": "array",
					"position": 130,
					"description": "The scopes available for this client.",
					"uniqueItems": true,
					"items": {
						"type": "string"
					}
				},
				"exclusiveScopes": {
					"type": "array",
					"position": 150,
					"description": "The exclusive scopes available for this client.",
					"uniqueItems": true,
					"items": {
						"type": "string"
					}
				},
				"authorizationDetailTypes": {
					"type": "array",
					"position": 152,
					"description": "The authorization detail types available for this client.",
					"uniqueItems": true,
					"items": {
						"type": "string"
					}
				},
				"restrictedResponseTypes": {
					"type": "array",
					"position": 155,
					"description": "The response types allowed for this client. If omitted all response types are available to the client.",
					"uniqueItems": true,
					"items": {
						"type": "string"
					}
				},
				"requirePushedAuthorizationRequests": {
					"type": "boolean",
					"position": 158,
					"description": "Determines whether pushed authorization requests are required when initiating an authorization request. The default is false."
				},
				"requireJwtSecuredAuthorizationResponseMode": {
					"type": "boolean",
					"position": 159,
					"description": "Determines whether JWT Secured authorization response mode is required when initiating an authorization request. The default is false."
				},
				"requireSignedRequests": {
					"type": "boolean",
					"position": 160,
					"description": "Determines whether signed requests are required for this client"
				},
				"requestObjectSigningAlgorithm": {
					"type": "string",
					"position": 161,
					"description": "The JSON Web Signature [JWS] algorithm that must be used to sign the Request Object. All signing algorithms are allowed if value is not present <br>RS256 - RSA using SHA-256<br>RS384 - RSA using SHA-384<br>RS512 - RSA using SHA-512<br>ES256 - ECDSA using P256 Curve and SHA-256<br>ES384 - ECDSA using P384 Curve and SHA-384<br>ES512 - ECDSA using P521 Curve and SHA-512<br>PS256 - RSASSA-PSS using SHA-256 and MGF1 padding with SHA-256<br>PS384 - RSASSA-PSS using SHA-384 and MGF1 padding with SHA-384<br>PS512 - RSASSA-PSS using SHA-512 and MGF1 padding with SHA-512<br>RSASSA-PSS is only supported with SafeNet Luna, Thales nCipher or Java 11.",
					"enum": [
						"RS256",
						"RS384",
						"RS512",
						"ES256",
						"ES384",
						"ES512",
						"PS256",
						"PS384",
						"PS512"
					]
				},
				"oidcPolicy": {
					"position": 170,
					"description": "Open ID Connect Policy settings.  This is included in the message only when OIDC is enabled.",
					"$ref": "#/definitions/ClientOIDCPolicy"
				},
				"clientAuth": {
					"position": 180,
					"description": "Client authentication settings.  If this model is null, it indicates that no client authentication will be used.",
					"$ref": "#/definitions/ClientAuth"
				},
				"jwksSettings": {
					"position": 190,
					"description": "JSON Web Key Set Settings of the OAuth client. Required if private key JWT client authentication or signed requests is enabled.",
					"$ref": "#/definitions/JwksSettings"
				},
				"extendedParameters": {
					"type": "object",
					"position": 200,
					"description": "OAuth Client Metadata can be extended to use custom Client Metadata Parameters. The names of these custom parameters should be defined in /extendedProperties.",
					"additionalProperties": {
						"$ref": "#/definitions/ParameterValues"
					}
				},
				"deviceFlowSettingType": {
					"type": "string",
					"position": 300,
					"description": "Allows an administrator to override the Device Authorization Settings set globally for the OAuth AS. Defaults to SERVER_DEFAULT.",
					"enum": [
						"SERVER_DEFAULT",
						"OVERRIDE_SERVER_DEFAULT"
					]
				},
				"userAuthorizationUrlOverride": {
					"type": "string",
					"position": 310,
					"description": "The URL used as 'verification_url' and 'verification_url_complete' values in a Device Authorization request. This property overrides the 'userAuthorizationUrl' value present in Authorization Server Settings."
				},
				"pendingAuthorizationTimeoutOverride": {
					"type": "integer",
					"format": "int32",
					"position": 320,
					"description": "The 'device_code' and 'user_code' timeout, in seconds. This overrides the 'pendingAuthorizationTimeout' value present in Authorization Server Settings."
				},
				"devicePollingIntervalOverride": {
					"type": "integer",
					"format": "int32",
					"position": 330,
					"description": "The amount of time client should wait between polling requests, in seconds. This overrides the 'devicePollingInterval' value present in Authorization Server Settings."
				},
				"bypassActivationCodeConfirmationOverride": {
					"type": "boolean",
					"position": 340,
					"description": "Indicates if the Activation Code Confirmation page should be bypassed if 'verification_url_complete' is used by the end user to authorize a device. This overrides the 'bypassUseCodeConfirmation' value present in Authorization Server Settings."
				},
				"requireProofKeyForCodeExchange": {
					"type": "boolean",
					"position": 400,
					"description": "Determines whether Proof Key for Code Exchange (PKCE) is required for this client."
				},
				"cibaDeliveryMode": {
					"type": "string",
					"position": 410,
					"description": "The token delivery mode for the client.  The default value is 'POLL'.",
					"enum": [
						"POLL",
						"PING"
					]
				},
				"cibaNotificationEndpoint": {
					"type": "string",
					"position": 420,
					"description": "The endpoint the OP will call after a successful or failed end-user authentication."
				},
				"cibaPollingInterval": {
					"type": "integer",
					"format": "int32",
					"position": 430,
					"description": "The minimum amount of time in seconds that the Client must wait between polling requests to the token endpoint. The default is 3 seconds."
				},
				"cibaRequireSignedRequests": {
					"type": "boolean",
					"position": 440,
					"description": "Determines whether CIBA signed requests are required for this client."
				},
				"cibaRequestObjectSigningAlgorithm": {
					"type": "string",
					"position": 441,
					"description": "The JSON Web Signature [JWS] algorithm that must be used to sign the CIBA Request Object. All signing algorithms are allowed if value is not present <br>RS256 - RSA using SHA-256<br>RS384 - RSA using SHA-384<br>RS512 - RSA using SHA-512<br>ES256 - ECDSA using P256 Curve and SHA-256<br>ES384 - ECDSA using P384 Curve and SHA-384<br>ES512 - ECDSA using P521 Curve and SHA-512<br>PS256 - RSASSA-PSS using SHA-256 and MGF1 padding with SHA-256<br>PS384 - RSASSA-PSS using SHA-384 and MGF1 padding with SHA-384<br>PS512 - RSASSA-PSS using SHA-512 and MGF1 padding with SHA-512<br>RSASSA-PSS is only supported with SafeNet Luna, Thales nCipher or Java 11.",
					"enum": [
						"RS256",
						"RS384",
						"RS512",
						"ES256",
						"ES384",
						"ES512",
						"PS256",
						"PS384",
						"PS512"
					]
				},
				"cibaUserCodeSupported": {
					"type": "boolean",
					"position": 450,
					"description": "Determines whether CIBA user code is supported for this client."
				},
				"requestPolicyRef": {
					"position": 451,
					"description": "The CIBA request policy.",
					"$ref": "#/definitions/ResourceLink"
				},
				"tokenExchangeProcessorPolicyRef": {
					"position": 460,
					"description": "The Token Exchange Processor policy.",
					"$ref": "#/definitions/ResourceLink"
				},
				"refreshTokenRollingGracePeriodType": {
					"type": "string",
					"position": 470,
					"description": "When specified, it overrides the global Refresh Token Grace Period defined in the Authorization Server Settings. The default value is SERVER_DEFAULT",
					"enum": [
						"SERVER_DEFAULT",
						"OVERRIDE_SERVER_DEFAULT"
					]
				},
				"refreshTokenRollingGracePeriod": {
					"type": "integer",
					"format": "int32",
					"position": 471,
					"description": "The grace period that a rolled refresh token remains valid in seconds."
				},
				"clientSecretRetentionPeriodType": {
					"type": "string",
					"position": 480,
					"description": "Use OVERRIDE_SERVER_DEFAULT to override the Client Secret Retention Period value on the Authorization Server Settings. SERVER_DEFAULT will default to the Client Secret Retention Period value on the Authorization Server Setting. Defaults to SERVER_DEFAULT.",
					"enum": [
						"SERVER_DEFAULT",
						"OVERRIDE_SERVER_DEFAULT"
					]
				},
				"clientSecretRetentionPeriod": {
					"type": "integer",
					"format": "int32",
					"position": 481,
					"description": "The length of time in minutes that client secrets will be retained as secondary secrets after secret change. The default value is 0, which will disable secondary client secret retention. This value will override the Client Secret Retention Period value on the Authorization Server Settings."
				},
				"clientSecretChangedTime": {
					"type": "string",
					"format": "date-time",
					"position": 490,
					"description": "The time at which the client secret was last changed. This property is read only and is ignored on PUT and POST requests."
				},
				"tokenIntrospectionSigningAlgorithm": {
					"type": "string",
					"position": 500,
					"description": "The JSON Web Signature [JWS] algorithm required to sign the Token Introspection Response.<br>HS256 - HMAC using SHA-256<br>HS384 - HMAC using SHA-384<br>HS512 - HMAC using SHA-512<br>RS256 - RSA using SHA-256<br>RS384 - RSA using SHA-384<br>RS512 - RSA using SHA-512<br>ES256 - ECDSA using P256 Curve and SHA-256<br>ES384 - ECDSA using P384 Curve and SHA-384<br>ES512 - ECDSA using P521 Curve and SHA-512<br>PS256 - RSASSA-PSS using SHA-256 and MGF1 padding with SHA-256<br>PS384 - RSASSA-PSS using SHA-384 and MGF1 padding with SHA-384<br>PS512 - RSASSA-PSS using SHA-512 and MGF1 padding with SHA-512<br>A null value will represent the default algorithm which is RS256.<br>RSASSA-PSS is only supported with SafeNet Luna, Thales nCipher or Java 11",
					"enum": [
						"RS256",
						"RS384",
						"RS512",
						"HS256",
						"HS384",
						"HS512",
						"ES256",
						"ES384",
						"ES512",
						"PS256",
						"PS384",
						"PS512"
					]
				},
				"tokenIntrospectionEncryptionAlgorithm": {
					"type": "string",
					"position": 501,
					"description": "The JSON Web Encryption [JWE] encryption algorithm used to encrypt the content-encryption key of the Token Introspection Response.<br>DIR - Direct Encryption with symmetric key<br>A128KW - AES-128 Key Wrap<br>A192KW - AES-192 Key Wrap<br>A256KW - AES-256 Key Wrap<br>A128GCMKW - AES-GCM-128 key encryption<br>A192GCMKW - AES-GCM-192 key encryption<br>A256GCMKW - AES-GCM-256 key encryption<br>ECDH_ES - ECDH-ES<br>ECDH_ES_A128KW - ECDH-ES with AES-128 Key Wrap<br>ECDH_ES_A192KW - ECDH-ES with AES-192 Key Wrap<br>ECDH_ES_A256KW - ECDH-ES with AES-256 Key Wrap<br>RSA_OAEP - RSAES OAEP<br>RSA_OAEP_256 - RSAES OAEP using SHA-256 and MGF1 with SHA-256",
					"enum": [
						"DIR",
						"A128KW",
						"A192KW",
						"A256KW",
						"A128GCMKW",
						"A192GCMKW",
						"A256GCMKW",
						"ECDH_ES",
						"ECDH_ES_A128KW",
						"ECDH_ES_A192KW",
						"ECDH_ES_A256KW",
						"RSA_OAEP",
						"RSA_OAEP_256"
					]
				},
				"tokenIntrospectionContentEncryptionAlgorithm": {
					"type": "string",
					"position": 502,
					"description": "The JSON Web Encryption [JWE] content-encryption algorithm for the Token Introspection Response.<br>AES_128_CBC_HMAC_SHA_256 - Composite AES-CBC-128 HMAC-SHA-256<br>AES_192_CBC_HMAC_SHA_384 - Composite AES-CBC-192 HMAC-SHA-384<br>AES_256_CBC_HMAC_SHA_512 - Composite AES-CBC-256 HMAC-SHA-512<br>AES_128_GCM - AES-GCM-128<br>AES_192_GCM - AES-GCM-192<br>AES_256_GCM - AES-GCM-256",
					"enum": [
						"AES_128_CBC_HMAC_SHA_256",
						"AES_192_CBC_HMAC_SHA_384",
						"AES_256_CBC_HMAC_SHA_512",
						"AES_128_GCM",
						"AES_192_GCM",
						"AES_256_GCM"
					]
				},
				"jwtSecuredAuthorizationResponseModeSigningAlgorithm": {
					"type": "string",
					"position": 510,
					"description": "The JSON Web Signature [JWS] algorithm required to sign the JWT Secured Authorization Response.<br>HS256 - HMAC using SHA-256<br>HS384 - HMAC using SHA-384<br>HS512 - HMAC using SHA-512<br>RS256 - RSA using SHA-256<br>RS384 - RSA using SHA-384<br>RS512 - RSA using SHA-512<br>ES256 - ECDSA using P256 Curve and SHA-256<br>ES384 - ECDSA using P384 Curve and SHA-384<br>ES512 - ECDSA using P521 Curve and SHA-512<br>PS256 - RSASSA-PSS using SHA-256 and MGF1 padding with SHA-256<br>PS384 - RSASSA-PSS using SHA-384 and MGF1 padding with SHA-384<br>PS512 - RSASSA-PSS using SHA-512 and MGF1 padding with SHA-512<br>A null value will represent the default algorithm which is RS256.<br>RSASSA-PSS is only supported with SafeNet Luna, Thales nCipher or Java 11",
					"enum": [
						"RS256",
						"RS384",
						"RS512",
						"HS256",
						"HS384",
						"HS512",
						"ES256",
						"ES384",
						"ES512",
						"PS256",
						"PS384",
						"PS512"
					]
				},
				"jwtSecuredAuthorizationResponseModeEncryptionAlgorithm": {
					"type": "string",
					"position": 511,
					"description": "The JSON Web Encryption [JWE] encryption algorithm used to encrypt the content-encryption key of the JWT Secured Authorization Response.<br>DIR - Direct Encryption with symmetric key<br>A128KW - AES-128 Key Wrap<br>A192KW - AES-192 Key Wrap<br>A256KW - AES-256 Key Wrap<br>A128GCMKW - AES-GCM-128 key encryption<br>A192GCMKW - AES-GCM-192 key encryption<br>A256GCMKW - AES-GCM-256 key encryption<br>ECDH_ES - ECDH-ES<br>ECDH_ES_A128KW - ECDH-ES with AES-128 Key Wrap<br>ECDH_ES_A192KW - ECDH-ES with AES-192 Key Wrap<br>ECDH_ES_A256KW - ECDH-ES with AES-256 Key Wrap<br>RSA_OAEP - RSAES OAEP<br>RSA_OAEP_256 - RSAES OAEP using SHA-256 and MGF1 with SHA-256",
					"enum": [
						"DIR",
						"A128KW",
						"A192KW",
						"A256KW",
						"A128GCMKW",
						"A192GCMKW",
						"A256GCMKW",
						"ECDH_ES",
						"ECDH_ES_A128KW",
						"ECDH_ES_A192KW",
						"ECDH_ES_A256KW",
						"RSA_OAEP",
						"RSA_OAEP_256"
					]
				},
				"jwtSecuredAuthorizationResponseModeContentEncryptionAlgorithm": {
					"type": "string",
					"position": 512,
					"description": "The JSON Web Encryption [JWE] content-encryption algorithm for the JWT Secured Authorization Response.<br>AES_128_CBC_HMAC_SHA_256 - Composite AES-CBC-128 HMAC-SHA-256<br>AES_192_CBC_HMAC_SHA_384 - Composite AES-CBC-192 HMAC-SHA-384<br>AES_256_CBC_HMAC_SHA_512 - Composite AES-CBC-256 HMAC-SHA-512<br>AES_128_GCM - AES-GCM-128<br>AES_192_GCM - AES-GCM-192<br>AES_256_GCM - AES-GCM-256",
					"enum": [
						"AES_128_CBC_HMAC_SHA_256",
						"AES_192_CBC_HMAC_SHA_384",
						"AES_256_CBC_HMAC_SHA_512",
						"AES_128_GCM",
						"AES_192_GCM",
						"AES_256_GCM"
					]
				}
			},
			"description": "OAuth client."
		},
		"ClientAuth": {
			"type": "object",
			"properties": {
				"type": {
					"type": "string",
					"position": 10,
					"description": "Client authentication type.<br>The required field for type SECRET is secret.<br>The required fields for type CERTIFICATE are clientCertIssuerDn and clientCertSubjectDn.<br>The required field for type PRIVATE_KEY_JWT is: either jwks or jwksUrl.",
					"enum": [
						"NONE",
						"SECRET",
						"CERTIFICATE",
						"PRIVATE_KEY_JWT"
					]
				},
				"secret": {
					"type": "string",
					"position": 20,
					"description": "Client secret for Basic Authentication.  To update the client secret, specify the plaintext value in this field.  This field will not be populated for GET requests."
				},
				"encryptedSecret": {
					"type": "string",
					"position": 25,
					"description": "For GET requests, this field contains the encrypted client secret, if one exists.  For POST and PUT requests, if you wish to reuse the existing secret, this field should be passed back unchanged."
				},
				"secondarySecrets": {
					"type": "array",
					"position": 26,
					"description": "The list of secondary client secrets that are temporarily retained.",
					"items": {
						"$ref": "#/definitions/SecondarySecret"
					}
				},
				"clientCertIssuerDn": {
					"type": "string",
					"position": 30,
					"description": "Client TLS Certificate Issuer DN."
				},
				"clientCertSubjectDn": {
					"type": "string",
					"position": 40,
					"description": "Client TLS Certificate Subject DN."
				},
				"enforceReplayPrevention": {
					"type": "boolean",
					"position": 50,
					"description": "Enforce replay prevention on JSON Web Tokens. This field is applicable only for Private Key JWT Client Authentication."
				},
				"tokenEndpointAuthSigningAlgorithm": {
					"type": "string",
					"position": 60,
					"description": "The JSON Web Signature [JWS] algorithm that must be used to sign the JSON Web Tokens. This field is applicable only for Private Key JWT Client Authentication. All signing algorithms are allowed if value is not present <br>RS256 - RSA using SHA-256<br>RS384 - RSA using SHA-384<br>RS512 - RSA using SHA-512<br>ES256 - ECDSA using P256 Curve and SHA-256<br>ES384 - ECDSA using P384 Curve and SHA-384<br>ES512 - ECDSA using P521 Curve and SHA-512<br>PS256 - RSASSA-PSS using SHA-256 and MGF1 padding with SHA-256<br>PS384 - RSASSA-PSS using SHA-384 and MGF1 padding with SHA-384<br>PS512 - RSASSA-PSS using SHA-512 and MGF1 padding with SHA-512<br>RSASSA-PSS is only supported with SafeNet Luna, Thales nCipher or Java 11.",
					"enum": [
						"RS256",
						"RS384",
						"RS512",
						"ES256",
						"ES384",
						"ES512",
						"PS256",
						"PS384",
						"PS512"
					]
				}
			},
			"description": "Client Authentication."
		},
		"ClientOIDCPolicy": {
			"type": "object",
			"properties": {
				"idTokenSigningAlgorithm": {
					"type": "string",
					"position": 10,
					"description": "The JSON Web Signature [JWS] algorithm required for the ID Token.<br>NONE - No signing algorithm<br>HS256 - HMAC using SHA-256<br>HS384 - HMAC using SHA-384<br>HS512 - HMAC using SHA-512<br>RS256 - RSA using SHA-256<br>RS384 - RSA using SHA-384<br>RS512 - RSA using SHA-512<br>ES256 - ECDSA using P256 Curve and SHA-256<br>ES384 - ECDSA using P384 Curve and SHA-384<br>ES512 - ECDSA using P521 Curve and SHA-512<br>PS256 - RSASSA-PSS using SHA-256 and MGF1 padding with SHA-256<br>PS384 - RSASSA-PSS using SHA-384 and MGF1 padding with SHA-384<br>PS512 - RSASSA-PSS using SHA-512 and MGF1 padding with SHA-512<br>A null value will represent the default algorithm which is RS256.<br>RSASSA-PSS is only supported with SafeNet Luna, Thales nCipher or Java 11",
					"enum": [
						"NONE",
						"HS256",
						"HS384",
						"HS512",
						"RS256",
						"RS384",
						"RS512",
						"ES256",
						"ES384",
						"ES512",
						"PS256",
						"PS384",
						"PS512"
					]
				},
				"idTokenEncryptionAlgorithm": {
					"type": "string",
					"position": 11,
					"description": "The JSON Web Encryption [JWE] encryption algorithm used to encrypt the content encryption key for the ID Token.<br>DIR - Direct Encryption with symmetric key<br>A128KW - AES-128 Key Wrap<br>A192KW - AES-192 Key Wrap<br>A256KW - AES-256 Key Wrap<br>A128GCMKW - AES-GCM-128 key encryption<br>A192GCMKW - AES-GCM-192 key encryption<br>A256GCMKW - AES-GCM-256 key encryption<br>ECDH_ES - ECDH-ES<br>ECDH_ES_A128KW - ECDH-ES with AES-128 Key Wrap<br>ECDH_ES_A192KW - ECDH-ES with AES-192 Key Wrap<br>ECDH_ES_A256KW - ECDH-ES with AES-256 Key Wrap<br>RSA_OAEP - RSAES OAEP<br>RSA_OAEP_256 - RSAES OAEP using SHA-256 and MGF1 with SHA-256",
					"enum": [
						"DIR",
						"A128KW",
						"A192KW",
						"A256KW",
						"A128GCMKW",
						"A192GCMKW",
						"A256GCMKW",
						"ECDH_ES",
						"ECDH_ES_A128KW",
						"ECDH_ES_A192KW",
						"ECDH_ES_A256KW",
						"RSA_OAEP",
						"RSA_OAEP_256"
					]
				},
				"idTokenContentEncryptionAlgorithm": {
					"type": "string",
					"position": 12,
					"description": "The JSON Web Encryption [JWE] content encryption algorithm for the ID Token.<br>AES_128_CBC_HMAC_SHA_256 - Composite AES-CBC-128 HMAC-SHA-256<br>AES_192_CBC_HMAC_SHA_384 - Composite AES-CBC-192 HMAC-SHA-384<br>AES_256_CBC_HMAC_SHA_512 - Composite AES-CBC-256 HMAC-SHA-512<br>AES_128_GCM - AES-GCM-128<br>AES_192_GCM - AES-GCM-192<br>AES_256_GCM - AES-GCM-256",
					"enum": [
						"AES_128_CBC_HMAC_SHA_256",
						"AES_192_CBC_HMAC_SHA_384",
						"AES_256_CBC_HMAC_SHA_512",
						"AES_128_GCM",
						"AES_192_GCM",
						"AES_256_GCM"
					]
				},
				"policyGroup": {
					"position": 20,
					"description": "The Open ID Connect policy. A null value will represent the default policy group.",
					"$ref": "#/definitions/ResourceLink"
				},
				"grantAccessSessionRevocationApi": {
					"type": "boolean",
					"position": 30,
					"description": "Determines whether this client is allowed to access the Session Revocation API."
				},
				"grantAccessSessionSessionManagementApi": {
					"type": "boolean",
					"position": 40,
					"description": "Determines whether this client is allowed to access the Session Management API."
				},
				"pingAccessLogoutCapable": {
					"type": "boolean",
					"position": 50,
					"description": "Set this value to true if you wish to enable client application logout, and the client is PingAccess, or its logout endpoints follow the PingAccess path convention."
				},
				"logoutUris": {
					"type": "array",
					"position": 60,
					"description": "A list of client logout URI's which will be invoked when a user logs out through one of PingFederate's SLO endpoints.",
					"items": {
						"type": "string"
					}
				},
				"pairwiseIdentifierUserType": {
					"type": "boolean",
					"position": 70,
					"description": "Determines whether the subject identifier type is pairwise."
				},
				"sectorIdentifierUri": {
					"type": "string",
					"position": 80,
					"description": "The URI references a file with a single JSON array of Redirect URI and JWKS URL values."
				}
			},
			"description": "OAuth Client Open ID Connect Policy."
		},
		"JwksSettings": {
			"type": "object",
			"properties": {
				"jwksUrl": {
					"type": "string",
					"position": 10,
					"description": "JSON Web Key Set (JWKS) URL of the OAuth client. Either 'jwks' or 'jwksUrl' must be provided if private key JWT client authentication or signed requests is enabled.  If the client signs its JWTs using an RSASSA-PSS signing algorithm, PingFederate must either use Java 11 or be integrated with a hardware security module (HSM) to process the digital signatures."
				},
				"jwks": {
					"type": "string",
					"position": 20,
					"description": "JSON Web Key Set (JWKS) document of the OAuth client. Either 'jwks' or 'jwksUrl' must be provided if private key JWT client authentication or signed requests is enabled.  If the client signs its JWTs using an RSASSA-PSS signing algorithm, PingFederate must either use Java 11 or be integrated with a hardware security module (HSM) to process the digital signatures."
				}
			},
			"description": "JSON Web Key Set Settings."
		},
		"SecondarySecret": {
			"type": "object",
			"properties": {
				"secret": {
					"type": "string",
					"position": 20,
					"description": "Secondary client secret for Basic Authentication.  To update the secondary client secret, specify the plaintext value in this field.  This field will not be populated for GET requests."
				},
				"encryptedSecret": {
					"type": "string",
					"position": 25,
					"description": "For GET requests, this field contains the encrypted secondary client secret, if one exists.  For POST and PUT requests, if you wish to reuse the existing secret, this field should be passed back unchanged."
				},
				"expiryTime": {
					"type": "string",
					"format": "date-time",
					"position": 30,
					"description": "The expiry time of the secondary secret."
				}
			}
		},
		"Clients": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"description": "The actual list of OAuth clients.",
					"items": {
						"$ref": "#/definitions/Client"
					}
				}
			},
			"description": "A collection of OAuth client items."
		},
		"ClientSecret": {
			"type": "object",
			"properties": {
				"secret": {
					"type": "string",
					"position": 10,
					"description": "Client secret for Basic Authentication.  To update the client secret, specify the plaintext value in this field.  This field will not be populated for GET requests."
				},
				"encryptedSecret": {
					"type": "string",
					"position": 20,
					"description": "For GET requests, this field contains the encrypted client secret, if one exists.  For POST and PUT requests, if you wish to reuse the existing secret, this field should be passed back unchanged."
				},
				"secondarySecrets": {
					"type": "array",
					"position": 30,
					"description": "The list of secondary client secrets that are temporarily retained.",
					"items": {
						"$ref": "#/definitions/SecondarySecret"
					}
				}
			},
			"description": "Client Secret."
		},
		"ClientMetadata": {
			"type": "object",
			"properties": {
				"parameter": {
					"type": "string",
					"position": 10,
					"description": "The metadata name."
				},
				"description": {
					"type": "string",
					"position": 20,
					"description": "The metadata description."
				},
				"multiValued": {
					"type": "boolean",
					"position": 30,
					"description": "If the field should allow multiple values."
				}
			},
			"description": "The client metadata."
		},
		"ClientRegistrationOIDCPolicy": {
			"type": "object",
			"properties": {
				"idTokenSigningAlgorithm": {
					"type": "string",
					"position": 10,
					"description": "The JSON Web Signature [JWS] algorithm required for the ID Token.<br>NONE - No signing algorithm<br>HS256 - HMAC using SHA-256<br>HS384 - HMAC using SHA-384<br>HS512 - HMAC using SHA-512<br>RS256 - RSA using SHA-256<br>RS384 - RSA using SHA-384<br>RS512 - RSA using SHA-512<br>ES256 - ECDSA using P256 Curve and SHA-256<br>ES384 - ECDSA using P384 Curve and SHA-384<br>ES512 - ECDSA using P521 Curve and SHA-512<br>PS256 - RSASSA-PSS using SHA-256 and MGF1 padding with SHA-256<br>PS384 - RSASSA-PSS using SHA-384 and MGF1 padding with SHA-384<br>PS512 - RSASSA-PSS using SHA-512 and MGF1 padding with SHA-512<br>A null value will represent the default algorithm which is RS256.<br>RSASSA-PSS is only supported with SafeNet Luna, Thales nCipher or Java 11",
					"enum": [
						"NONE",
						"HS256",
						"HS384",
						"HS512",
						"RS256",
						"RS384",
						"RS512",
						"ES256",
						"ES384",
						"ES512",
						"PS256",
						"PS384",
						"PS512"
					]
				},
				"idTokenEncryptionAlgorithm": {
					"type": "string",
					"position": 11,
					"description": "The JSON Web Encryption [JWE] encryption algorithm used to encrypt the content encryption key for the ID Token.<br>DIR - Direct Encryption with symmetric key<br>A128KW - AES-128 Key Wrap<br>A192KW - AES-192 Key Wrap<br>A256KW - AES-256 Key Wrap<br>A128GCMKW - AES-GCM-128 key encryption<br>A192GCMKW - AES-GCM-192 key encryption<br>A256GCMKW - AES-GCM-256 key encryption<br>ECDH_ES - ECDH-ES<br>ECDH_ES_A128KW - ECDH-ES with AES-128 Key Wrap<br>ECDH_ES_A192KW - ECDH-ES with AES-192 Key Wrap<br>ECDH_ES_A256KW - ECDH-ES with AES-256 Key Wrap<br>RSA_OAEP - RSAES OAEP<br>RSA_OAEP_256 - RSAES OAEP using SHA-256 and MGF1 with SHA-256",
					"enum": [
						"DIR",
						"A128KW",
						"A192KW",
						"A256KW",
						"A128GCMKW",
						"A192GCMKW",
						"A256GCMKW",
						"ECDH_ES",
						"ECDH_ES_A128KW",
						"ECDH_ES_A192KW",
						"ECDH_ES_A256KW",
						"RSA_OAEP",
						"RSA_OAEP_256"
					]
				},
				"idTokenContentEncryptionAlgorithm": {
					"type": "string",
					"position": 12,
					"description": "The JSON Web Encryption [JWE] content encryption algorithm for the ID Token.<br>AES_128_CBC_HMAC_SHA_256 - Composite AES-CBC-128 HMAC-SHA-256<br>AES_192_CBC_HMAC_SHA_384 - Composite AES-CBC-192 HMAC-SHA-384<br>AES_256_CBC_HMAC_SHA_512 - Composite AES-CBC-256 HMAC-SHA-512<br>AES_128_GCM - AES-GCM-128<br>AES_192_GCM - AES-GCM-192<br>AES_256_GCM - AES-GCM-256",
					"enum": [
						"AES_128_CBC_HMAC_SHA_256",
						"AES_192_CBC_HMAC_SHA_384",
						"AES_256_CBC_HMAC_SHA_512",
						"AES_128_GCM",
						"AES_192_GCM",
						"AES_256_GCM"
					]
				},
				"policyGroup": {
					"position": 20,
					"description": "The Open ID Connect policy. A null value will represent the default policy group.",
					"$ref": "#/definitions/ResourceLink"
				}
			},
			"description": "Client Registration Open ID Connect Policy settings."
		},
		"ClientSettings": {
			"type": "object",
			"properties": {
				"clientMetadata": {
					"type": "array",
					"position": 10,
					"description": "The client metadata.",
					"items": {
						"$ref": "#/definitions/ClientMetadata"
					}
				},
				"dynamicClientRegistration": {
					"position": 20,
					"description": "Dynamic client registration settings.",
					"$ref": "#/definitions/DynamicClientRegistration"
				}
			},
			"description": "The client settings."
		},
		"DynamicClientRegistration": {
			"type": "object",
			"properties": {
				"initialAccessTokenScope": {
					"type": "string",
					"position": 10,
					"description": "The initial access token to prevent unwanted client registrations."
				},
				"restrictCommonScopes": {
					"type": "boolean",
					"position": 20,
					"description": "Restrict common scopes."
				},
				"restrictedCommonScopes": {
					"type": "array",
					"position": 30,
					"description": "The common scopes to restrict.",
					"items": {
						"type": "string"
					}
				},
				"allowedExclusiveScopes": {
					"type": "array",
					"position": 40,
					"description": "The exclusive scopes to allow.",
					"items": {
						"type": "string"
					}
				},
				"allowedAuthorizationDetailTypes": {
					"type": "array",
					"position": 45,
					"description": "The authorization detail types to allow.",
					"items": {
						"type": "string"
					}
				},
				"enforceReplayPrevention": {
					"type": "boolean",
					"position": 50,
					"description": "Enforce replay prevention."
				},
				"requireSignedRequests": {
					"type": "boolean",
					"position": 60,
					"description": "Require signed requests."
				},
				"defaultAccessTokenManagerRef": {
					"position": 70,
					"description": "The default access token manager for this client.",
					"$ref": "#/definitions/ResourceLink"
				},
				"restrictToDefaultAccessTokenManager": {
					"type": "boolean",
					"position": 80,
					"description": "Determines whether the client is restricted to using only its default access token manager. The default is false."
				},
				"persistentGrantExpirationType": {
					"type": "string",
					"position": 90,
					"description": "Allows an administrator to override the Persistent Grant Lifetime set globally for the OAuth AS. Defaults to SERVER_DEFAULT.",
					"enum": [
						"INDEFINITE_EXPIRY",
						"SERVER_DEFAULT",
						"OVERRIDE_SERVER_DEFAULT"
					]
				},
				"persistentGrantExpirationTime": {
					"type": "integer",
					"format": "int64",
					"position": 100,
					"description": "The persistent grant expiration time."
				},
				"persistentGrantExpirationTimeUnit": {
					"type": "string",
					"position": 110,
					"description": "The persistent grant expiration time unit.",
					"enum": [
						"MINUTES",
						"DAYS",
						"HOURS"
					]
				},
				"persistentGrantIdleTimeoutType": {
					"type": "string",
					"position": 120,
					"description": "Allows an administrator to override the Persistent Grant Idle Timeout set globally for the OAuth AS. Defaults to SERVER_DEFAULT.",
					"enum": [
						"INDEFINITE_EXPIRY",
						"SERVER_DEFAULT",
						"OVERRIDE_SERVER_DEFAULT"
					]
				},
				"persistentGrantIdleTimeout": {
					"type": "integer",
					"format": "int64",
					"position": 130,
					"description": "The persistent grant idle timeout."
				},
				"persistentGrantIdleTimeoutTimeUnit": {
					"type": "string",
					"position": 140,
					"description": "The persistent grant idle timeout time unit.",
					"enum": [
						"MINUTES",
						"DAYS",
						"HOURS"
					]
				},
				"clientCertIssuerType": {
					"type": "string",
					"position": 150,
					"description": "Client TLS Certificate Issuer Type.",
					"enum": [
						"NONE",
						"TRUST_ANY",
						"CERTIFICATE"
					]
				},
				"clientCertIssuerRef": {
					"position": 160,
					"description": "Client TLS Certificate Issuer DN.",
					"$ref": "#/definitions/ResourceLink"
				},
				"refreshRolling": {
					"type": "string",
					"position": 170,
					"description": "Use ROLL or DONT_ROLL to override the Roll Refresh Token Values setting on the Authorization Server Settings. SERVER_DEFAULT will default to the Roll Refresh Token Values setting on the Authorization Server Setting screen. Defaults to SERVER_DEFAULT.",
					"enum": [
						"SERVER_DEFAULT",
						"DONT_ROLL",
						"ROLL"
					]
				},
				"refreshTokenRollingIntervalType": {
					"type": "string",
					"position": 180,
					"description": "Use OVERRIDE_SERVER_DEFAULT to override the Refresh Token Rolling Interval value on the Authorization Server Settings. SERVER_DEFAULT will default to the Refresh Token Rolling Interval value on the Authorization Server Setting. Defaults to SERVER_DEFAULT.",
					"enum": [
						"SERVER_DEFAULT",
						"OVERRIDE_SERVER_DEFAULT"
					]
				},
				"refreshTokenRollingInterval": {
					"type": "integer",
					"format": "int64",
					"position": 190,
					"description": "The minimum interval to roll refresh tokens, in hours. This value will override the Refresh Token Rolling Interval Value on the Authorization Server Settings."
				},
				"oidcPolicy": {
					"position": 200,
					"description": "Open ID Connect Policy settings.  This is included in the message only when OIDC is enabled.",
					"$ref": "#/definitions/ClientRegistrationOIDCPolicy"
				},
				"policyRefs": {
					"type": "array",
					"position": 210,
					"description": "The client registration policies.",
					"items": {
						"$ref": "#/definitions/ResourceLink"
					}
				},
				"deviceFlowSettingType": {
					"type": "string",
					"position": 220,
					"description": "Allows an administrator to override the Device Authorization Settings set globally for the OAuth AS. Defaults to SERVER_DEFAULT.",
					"enum": [
						"SERVER_DEFAULT",
						"OVERRIDE_SERVER_DEFAULT"
					]
				},
				"userAuthorizationUrlOverride": {
					"type": "string",
					"position": 230,
					"description": "The URL is used as 'verification_url' and 'verification_url_complete' values in a Device Authorization request."
				},
				"pendingAuthorizationTimeoutOverride": {
					"type": "integer",
					"format": "int32",
					"position": 240,
					"description": "The 'device_code' and 'user_code' timeout, in seconds."
				},
				"devicePollingIntervalOverride": {
					"type": "integer",
					"format": "int32",
					"position": 250,
					"description": "The amount of time client should wait between polling requests, in seconds."
				},
				"bypassActivationCodeConfirmationOverride": {
					"type": "boolean",
					"position": 260,
					"description": "Indicates if the Activation Code Confirmation page should be bypassed if 'verification_url_complete' is used by the end user to authorize a device."
				},
				"requireProofKeyForCodeExchange": {
					"type": "boolean",
					"position": 270,
					"description": "Determines whether Proof Key for Code Exchange (PKCE) is required for the dynamically created client."
				},
				"cibaPollingInterval": {
					"type": "integer",
					"format": "int32",
					"position": 280,
					"description": "The minimum amount of time in seconds that the Client must wait between polling requests to the token endpoint. The default is 3 seconds."
				},
				"cibaRequireSignedRequests": {
					"type": "boolean",
					"position": 290,
					"description": "Determines whether CIBA signed requests are required for this client."
				},
				"requestPolicyRef": {
					"position": 300,
					"description": "The CIBA request policy.",
					"$ref": "#/definitions/ResourceLink"
				},
				"tokenExchangeProcessorPolicyRef": {
					"position": 310,
					"description": "The Token Exchange Processor policy.",
					"$ref": "#/definitions/ResourceLink"
				},
				"rotateClientSecret": {
					"type": "boolean",
					"position": 320,
					"description": "Rotate registration access token on dynamic client management requests."
				},
				"rotateRegistrationAccessToken": {
					"type": "boolean",
					"position": 330,
					"description": "Rotate client secret on dynamic client management requests."
				},
				"allowClientDelete": {
					"type": "boolean",
					"position": 340,
					"description": "Allow client deletion from dynamic client management."
				},
				"disableRegistrationAccessTokens": {
					"type": "boolean",
					"position": 350,
					"description": "Disable registration access tokens. Local standards may mandate different registration access token requirements. If applicable, implement custom validation and enforcement rules using the DynamicClientRegistrationPlugin interface from the PingFederate SDK, configure the client registration policies (policyRefs), and set this property (disableRegistrationAccessTokens) to true. CAUTION: When the disableRegistrationAccessTokens property is set to true, all clients, not just the ones created using the Dynamic Client Registration protocol, are vulnerable to unrestricted retrievals, updates (including modifications to the client authentication scheme and redirect URIs), and deletes at the /as/clients.oauth2 endpoint unless one or more client registration policies are in place to protect against unauthorized attempts."
				},
				"refreshTokenRollingGracePeriodType": {
					"type": "string",
					"position": 360,
					"description": "When specified, it overrides the global Refresh Token Grace Period defined in the Authorization Server Settings. The default value is SERVER_DEFAULT",
					"enum": [
						"SERVER_DEFAULT",
						"OVERRIDE_SERVER_DEFAULT"
					]
				},
				"refreshTokenRollingGracePeriod": {
					"type": "integer",
					"format": "int32",
					"position": 361,
					"description": "The grace period that a rolled refresh token remains valid in seconds."
				},
				"retainClientSecret": {
					"type": "boolean",
					"position": 370,
					"description": "Temporarily retain the old client secret on client secret change."
				},
				"clientSecretRetentionPeriodType": {
					"type": "string",
					"position": 380,
					"description": "Use OVERRIDE_SERVER_DEFAULT to override the Client Secret Retention Period value on the Authorization Server Settings. SERVER_DEFAULT will default to the Client Secret Retention Period value on the Authorization Server Setting. Defaults to SERVER_DEFAULT."
				},
				"clientSecretRetentionPeriodOverride": {
					"type": "integer",
					"format": "int32",
					"position": 390,
					"description": "The length of time in minutes that client secrets will be retained as secondary secrets after secret change. The default value is 0, which will disable secondary client secret retention. This value will override the Client Secret Retention Period value on the Authorization Server Settings."
				},
				"requireJwtSecuredAuthorizationResponseMode": {
					"type": "boolean",
					"position": 400,
					"description": "Determines whether JWT Secured authorization response mode is required when initiating an authorization request. The default is false."
				}
			},
			"description": "Dynamic client registration settings."
		},
		"ClientRegistrationPolicyDescriptors": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of client registration policy plugin descriptors.",
					"items": {
						"$ref": "#/definitions/ClientRegistrationPolicyDescriptor"
					}
				}
			},
			"description": "A collection of client registration policy plugin descriptors."
		},
		"ClientRegistrationPolicies": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of client registration policy plugin instances.",
					"items": {
						"$ref": "#/definitions/ClientRegistrationPolicy"
					}
				}
			},
			"description": "A collection of client registration policy plugin instances."
		},
		"IdpAdapterMapping": {
			"type": "object",
			"required": [
				"attributeContractFulfillment",
				"id"
			],
			"properties": {
				"id": {
					"type": "string",
					"position": 1,
					"description": "The ID of the adapter mapping."
				},
				"idpAdapterRef": {
					"position": 2,
					"description": "Read only reference to the associated IdP adapter.",
					"$ref": "#/definitions/ResourceLink"
				},
				"attributeSources": {
					"type": "array",
					"position": 10,
					"description": "A list of configured data stores to look up attributes from.",
					"items": {
						"$ref": "#/definitions/AttributeSource"
					}
				},
				"attributeContractFulfillment": {
					"type": "object",
					"position": 20,
					"description": "A list of mappings from attribute names to their fulfillment values.",
					"additionalProperties": {
						"$ref": "#/definitions/AttributeFulfillmentValue"
					}
				},
				"issuanceCriteria": {
					"position": 30,
					"description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
					"$ref": "#/definitions/IssuanceCriteria"
				}
			},
			"description": "The OAuth IdP Adapter Mapping."
		},
		"IdpAdapterMappings": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of OAuth IdP adapter mappings.",
					"items": {
						"$ref": "#/definitions/IdpAdapterMapping"
					}
				}
			},
			"description": "A collection of OAuth IdP adapter mapping items."
		},
		"OutOfBandAuthPluginDescriptors": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of out of band authenticator plugin descriptors.",
					"items": {
						"$ref": "#/definitions/OutOfBandAuthPluginDescriptor"
					}
				}
			}
		},
		"OutOfBandAuthenticators": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of out of band authenticator plugin instances.",
					"items": {
						"$ref": "#/definitions/OutOfBandAuthenticator"
					}
				}
			},
			"description": "A collection of out of band authenticator plugin instances."
		},
		"AdditionalKeySet": {
			"type": "object",
			"required": [
				"issuers",
				"name",
				"signingKeys"
			],
			"properties": {
				"id": {
					"type": "string",
					"position": 5,
					"description": "The unique ID for the key set. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified."
				},
				"name": {
					"type": "string",
					"position": 10,
					"description": "The key set name."
				},
				"description": {
					"type": "string",
					"position": 15,
					"description": "A description of the key set."
				},
				"signingKeys": {
					"position": 20,
					"description": "A set of references to the keys.",
					"$ref": "#/definitions/SigningKeys"
				},
				"issuers": {
					"type": "array",
					"position": 25,
					"description": "A list of virtual issuers that will use the current key set. Once assigned to a key set, the same virtual issuer cannot be assigned to another key set instance.",
					"items": {
						"$ref": "#/definitions/ResourceLink"
					}
				}
			},
			"description": "The attributes used to configure an OAuth/OpenID Connect additional signing key set with virtual issuers."
		},
		"AdditionalKeySets": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of signing key sets.",
					"items": {
						"$ref": "#/definitions/AdditionalKeySet"
					}
				}
			},
			"description": "A collection of OAuth/OpenID Connect additional signing key sets."
		},
		"SigningKeys": {
			"type": "object",
			"properties": {
				"p256ActiveCertRef": {
					"position": 15,
					"description": "Reference to the P-256 key currently active.",
					"$ref": "#/definitions/ResourceLink"
				},
				"p256PreviousCertRef": {
					"position": 20,
					"description": "Reference to the P-256 key previously active.",
					"$ref": "#/definitions/ResourceLink"
				},
				"p256PublishX5cParameter": {
					"type": "boolean",
					"position": 25,
					"description": "Enable publishing of the P-256 certificate chain associated with the active key."
				},
				"p384ActiveCertRef": {
					"position": 30,
					"description": "Reference to the P-384 key currently active.",
					"$ref": "#/definitions/ResourceLink"
				},
				"p384PreviousCertRef": {
					"position": 35,
					"description": "Reference to the P-384 key previously active.",
					"$ref": "#/definitions/ResourceLink"
				},
				"p384PublishX5cParameter": {
					"type": "boolean",
					"position": 40,
					"description": "Enable publishing of the P-384 certificate chain associated with the active key."
				},
				"p521ActiveCertRef": {
					"position": 45,
					"description": "Reference to the P-521 key currently active.",
					"$ref": "#/definitions/ResourceLink"
				},
				"p521PreviousCertRef": {
					"position": 50,
					"description": "Reference to the P-521 key previously active.",
					"$ref": "#/definitions/ResourceLink"
				},
				"p521PublishX5cParameter": {
					"type": "boolean",
					"position": 55,
					"description": "Enable publishing of the P-521 certificate chain associated with the active key."
				},
				"rsaActiveCertRef": {
					"position": 60,
					"description": "Reference to the RSA key currently active.",
					"$ref": "#/definitions/ResourceLink"
				},
				"rsaPreviousCertRef": {
					"position": 65,
					"description": "Reference to the RSA key previously active.",
					"$ref": "#/definitions/ResourceLink"
				},
				"rsaPublishX5cParameter": {
					"type": "boolean",
					"position": 70,
					"description": "Enable publishing of the RSA certificate chain associated with the active key."
				}
			},
			"description": "Setting for a OAuth/OpenID Connect signing key set while using multiple virtual issuers."
		},
		"OAuthOidcKeysSettings": {
			"type": "object",
			"required": [
				"staticJwksEnabled"
			],
			"properties": {
				"staticJwksEnabled": {
					"type": "boolean",
					"position": 10,
					"description": "Enable static keys."
				},
				"p256ActiveCertRef": {
					"position": 15,
					"description": "Reference to the P-256 key currently active.",
					"$ref": "#/definitions/ResourceLink"
				},
				"p256PreviousCertRef": {
					"position": 20,
					"description": "Reference to the P-256 key previously active.",
					"$ref": "#/definitions/ResourceLink"
				},
				"p256PublishX5cParameter": {
					"type": "boolean",
					"position": 25,
					"description": "Enable publishing of the P-256 certificate chain associated with the active key."
				},
				"p384ActiveCertRef": {
					"position": 30,
					"description": "Reference to the P-384 key currently active.",
					"$ref": "#/definitions/ResourceLink"
				},
				"p384PreviousCertRef": {
					"position": 35,
					"description": "Reference to the P-384 key previously active.",
					"$ref": "#/definitions/ResourceLink"
				},
				"p384PublishX5cParameter": {
					"type": "boolean",
					"position": 40,
					"description": "Enable publishing of the P-384 certificate chain associated with the active key."
				},
				"p521ActiveCertRef": {
					"position": 45,
					"description": "Reference to the P-521 key currently active.",
					"$ref": "#/definitions/ResourceLink"
				},
				"p521PreviousCertRef": {
					"position": 50,
					"description": "Reference to the P-521 key previously active.",
					"$ref": "#/definitions/ResourceLink"
				},
				"p521PublishX5cParameter": {
					"type": "boolean",
					"position": 55,
					"description": "Enable publishing of the P-521 certificate chain associated with the active key."
				},
				"rsaActiveCertRef": {
					"position": 60,
					"description": "Reference to the RSA key currently active.",
					"$ref": "#/definitions/ResourceLink"
				},
				"rsaPreviousCertRef": {
					"position": 65,
					"description": "Reference to the RSA key previously active.",
					"$ref": "#/definitions/ResourceLink"
				},
				"rsaPublishX5cParameter": {
					"type": "boolean",
					"position": 70,
					"description": "Enable publishing of the RSA certificate chain associated with the active key."
				},
				"p256DecryptionActiveCertRef": {
					"position": 75,
					"description": "Reference to the P-256 decryption key currently active.",
					"$ref": "#/definitions/ResourceLink"
				},
				"p256DecryptionPreviousCertRef": {
					"position": 80,
					"description": "Reference to the P-256 decryption key previously active.",
					"$ref": "#/definitions/ResourceLink"
				},
				"p256DecryptionPublishX5cParameter": {
					"type": "boolean",
					"position": 85,
					"description": "Enable publishing of the P-256 certificate chain associated with the active key."
				},
				"p384DecryptionActiveCertRef": {
					"position": 90,
					"description": "Reference to the P-384 decryption key currently active.",
					"$ref": "#/definitions/ResourceLink"
				},
				"p384DecryptionPreviousCertRef": {
					"position": 95,
					"description": "Reference to the P-384 decryption key previously active.",
					"$ref": "#/definitions/ResourceLink"
				},
				"p384DecryptionPublishX5cParameter": {
					"type": "boolean",
					"position": 100,
					"description": "Enable publishing of the P-384 certificate chain associated with the active key."
				},
				"p521DecryptionActiveCertRef": {
					"position": 105,
					"description": "Reference to the P-521 decryption key currently active.",
					"$ref": "#/definitions/ResourceLink"
				},
				"p521DecryptionPreviousCertRef": {
					"position": 110,
					"description": "Reference to the P-521 decryption key previously active.",
					"$ref": "#/definitions/ResourceLink"
				},
				"p521DecryptionPublishX5cParameter": {
					"type": "boolean",
					"position": 115,
					"description": "Enable publishing of the P-521 certificate chain associated with the active key."
				},
				"rsaDecryptionActiveCertRef": {
					"position": 120,
					"description": "Reference to the RSA decryption key currently active.",
					"$ref": "#/definitions/ResourceLink"
				},
				"rsaDecryptionPreviousCertRef": {
					"position": 125,
					"description": "Reference to the RSA decryption key previously active.",
					"$ref": "#/definitions/ResourceLink"
				},
				"rsaDecryptionPublishX5cParameter": {
					"type": "boolean",
					"position": 130,
					"description": "Enable publishing of the RSA certificate chain associated with the active key."
				}
			},
			"description": "Setting for OAuth/OpenID Connect signing and decryption key settings."
		},
		"ResourceOwnerCredentialsMapping": {
			"type": "object",
			"required": [
				"attributeContractFulfillment",
				"id"
			],
			"properties": {
				"id": {
					"type": "string",
					"position": 1,
					"description": "The ID of the Resource Owner Credentials Mapping."
				},
				"passwordValidatorRef": {
					"position": 2,
					"description": "Read only reference to the associated Source Password Validator Instance.",
					"$ref": "#/definitions/ResourceLink"
				},
				"attributeSources": {
					"type": "array",
					"position": 10,
					"description": "A list of configured data stores to look up attributes from.",
					"items": {
						"$ref": "#/definitions/AttributeSource"
					}
				},
				"attributeContractFulfillment": {
					"type": "object",
					"position": 20,
					"description": "A list of mappings from attribute names to their fulfillment values.",
					"additionalProperties": {
						"$ref": "#/definitions/AttributeFulfillmentValue"
					}
				},
				"issuanceCriteria": {
					"position": 30,
					"description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
					"$ref": "#/definitions/IssuanceCriteria"
				}
			},
			"description": "The OAuth Resource Owner Credentials Mapping."
		},
		"ResourceOwnerCredentialsMappings": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of OAuth Resource Owner Credentials Grant Mapping.",
					"items": {
						"$ref": "#/definitions/ResourceOwnerCredentialsMapping"
					}
				}
			},
			"description": "A collection of OAuth Resource Owner Credentials mapping items."
		},
		"OpenIdConnectAttribute": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of this attribute."
				},
				"includeInIdToken": {
					"type": "boolean",
					"position": 20,
					"description": "Attribute is included in the ID Token."
				},
				"includeInUserInfo": {
					"type": "boolean",
					"position": 30,
					"description": "Attribute is included in the User Info."
				},
				"multiValued": {
					"type": "boolean",
					"position": 40,
					"description": "Indicates whether attribute value is always returned as an array."
				}
			},
			"description": "An attribute for the OpenID Connect returned to OAuth clients."
		},
		"OpenIdConnectAttributeContract": {
			"type": "object",
			"properties": {
				"coreAttributes": {
					"type": "array",
					"position": 10,
					"description": "A list of read-only attributes (for example, sub) that are automatically populated by PingFederate.",
					"items": {
						"$ref": "#/definitions/OpenIdConnectAttribute"
					}
				},
				"extendedAttributes": {
					"type": "array",
					"position": 20,
					"description": "A list of additional attributes.",
					"items": {
						"$ref": "#/definitions/OpenIdConnectAttribute"
					}
				}
			},
			"description": "A set of attributes that will be returned to OAuth clients in response to requests received at the PingFederate UserInfo endpoint."
		},
		"OpenIdConnectPolicy": {
			"type": "object",
			"required": [
				"accessTokenManagerRef",
				"attributeContract",
				"attributeMapping",
				"id",
				"name"
			],
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The policy ID used internally."
				},
				"name": {
					"type": "string",
					"position": 20,
					"description": "The name used for display in UI screens."
				},
				"accessTokenManagerRef": {
					"position": 30,
					"description": "The access token manager associated with this Open ID Connect policy.",
					"$ref": "#/definitions/ResourceLink"
				},
				"idTokenLifetime": {
					"type": "integer",
					"format": "int32",
					"position": 40,
					"description": "The ID Token Lifetime, in minutes. The default value is 5."
				},
				"includeSriInIdToken": {
					"type": "boolean",
					"position": 50,
					"description": "Determines whether a Session Reference Identifier is included in the ID token."
				},
				"includeUserInfoInIdToken": {
					"type": "boolean",
					"position": 60,
					"description": "Determines whether the User Info is always included in the ID token."
				},
				"includeSHashInIdToken": {
					"type": "boolean",
					"position": 70,
					"description": "Determines whether the State Hash should be included in the ID token."
				},
				"returnIdTokenOnRefreshGrant": {
					"type": "boolean",
					"position": 80,
					"description": "Determines whether an ID Token should be returned when refresh grant is requested or not."
				},
				"reissueIdTokenInHybridFlow": {
					"type": "boolean",
					"position": 90,
					"description": "Determines whether a new ID Token should be returned during token request of the hybrid flow."
				},
				"attributeContract": {
					"position": 100,
					"description": "The list of attributes that will be returned to OAuth clients in response to requests received at the PingFederate UserInfo endpoint.",
					"$ref": "#/definitions/OpenIdConnectAttributeContract"
				},
				"attributeMapping": {
					"position": 110,
					"description": "The attributes mapping from attribute sources to attribute targets.",
					"$ref": "#/definitions/AttributeMapping"
				},
				"scopeAttributeMappings": {
					"type": "object",
					"position": 120,
					"description": "The attribute scope mappings from scopes to attribute names.",
					"additionalProperties": {
						"$ref": "#/definitions/ParameterValues"
					}
				}
			},
			"description": "The set of attributes used to configure an OpenID Connect policy."
		},
		"OpenIdConnectPolicies": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of policies.",
					"items": {
						"$ref": "#/definitions/OpenIdConnectPolicy"
					}
				}
			},
			"description": "A collection of OpenID Connect policies."
		},
		"OIDCSessionSettings": {
			"type": "object",
			"properties": {
				"trackUserSessionsForLogout": {
					"type": "boolean",
					"position": 10,
					"description": "Determines whether user sessions are tracked for logout. This property is now available under /oauth/authServerSettings and should be accessed through that resource."
				},
				"revokeUserSessionOnLogout": {
					"type": "boolean",
					"position": 20,
					"description": "Determines whether the user's session is revoked on logout. This property is now available under /session/settings and should be accessed through that resource."
				},
				"sessionRevocationLifetime": {
					"type": "integer",
					"format": "int32",
					"position": 30,
					"description": "How long a session revocation is tracked and stored, in minutes. This property is now available under /session/settings and should be accessed through that resource."
				}
			},
			"description": "Settings relating to OpenID Connect session management."
		},
		"OpenIdConnectSettings": {
			"type": "object",
			"properties": {
				"defaultPolicyRef": {
					"position": 10,
					"description": "Reference to the default policy.",
					"$ref": "#/definitions/ResourceLink"
				},
				"sessionSettings": {
					"position": 20,
					"description": "Settings relating to OpenID Connect session management.",
					"$ref": "#/definitions/OIDCSessionSettings"
				}
			},
			"description": "Settings for the OpenID Connect configuration."
		},
		"PasswordCredentialValidatorDescriptors": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of password credential validator descriptors.",
					"items": {
						"$ref": "#/definitions/PasswordCredentialValidatorDescriptor"
					}
				}
			},
			"description": "A collection of password credential validator descriptors."
		},
		"PasswordCredentialValidators": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of password credential validators.",
					"items": {
						"$ref": "#/definitions/PasswordCredentialValidator"
					}
				}
			},
			"description": "A collection of password credential validators."
		},
		"PingOneConnection": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The persistent, unique ID of the connection. This property is system-assigned if not specified."
				},
				"name": {
					"type": "string",
					"position": 20,
					"description": "The name of the PingOne connection."
				},
				"description": {
					"type": "string",
					"position": 30,
					"description": "A description for the PingOne connection."
				},
				"active": {
					"type": "boolean",
					"position": 40,
					"description": "Whether or not this connection is active. Defaults to true."
				},
				"credential": {
					"type": "string",
					"position": 50,
					"description": "The credential for the PingOne connection. To update the credential, specify the plaintext value of the credential in this field. This field will not be populated for GET requests."
				},
				"encryptedCredential": {
					"type": "string",
					"position": 60,
					"description": "The encrypted credential for the PingOne connection. For POST and PUT requests, if you wish to keep the existing credential, this field should be passed back unchanged."
				},
				"credentialId": {
					"type": "string",
					"position": 70,
					"description": "The ID of the PingOne credential. This field is read only."
				},
				"pingOneConnectionId": {
					"type": "string",
					"position": 80,
					"description": "The ID of the PingOne connection. This field is read only."
				},
				"environmentId": {
					"type": "string",
					"position": 90,
					"description": "The ID of the environment of the PingOne credential. This field is read only."
				},
				"creationDate": {
					"type": "string",
					"format": "date-time",
					"position": 100,
					"description": "The creation date of the PingOne connection. This field is read only."
				},
				"organizationName": {
					"type": "string",
					"position": 110,
					"description": "The name of the organization associated with this PingOne connection. This field is read only."
				},
				"region": {
					"type": "string",
					"position": 120,
					"description": "The region of the PingOne connection. This field is read only."
				},
				"pingOneManagementApiEndpoint": {
					"type": "string",
					"position": 130,
					"description": "The PingOne management API endpoint. This field is read only."
				},
				"pingOneAuthenticationApiEndpoint": {
					"type": "string",
					"position": 140,
					"description": "The PingOne authentication API endpoint. This field is read only."
				}
			},
			"description": "PingOne connection."
		},
		"PingOneEnvironment": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of the environment"
				},
				"id": {
					"type": "string",
					"position": 20,
					"description": "The ID of the environment"
				},
				"type": {
					"type": "string",
					"position": 30,
					"description": "The type of the environment"
				}
			}
		},
		"PingOneEnvironments": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of PingOne environments.",
					"items": {
						"$ref": "#/definitions/PingOneEnvironment"
					}
				}
			},
			"description": "A collection of PingOne Environments."
		},
		"PingOneCredentialStatus": {
			"type": "object",
			"properties": {
				"pingOneCredentialStatus": {
					"type": "string",
					"position": 10,
					"description": "The status of the PingOne connection credential.",
					"enum": [
						"VALID",
						"INVALID",
						"UNKNOWN"
					]
				}
			},
			"description": "PingOne credential Status"
		},
		"ResourceCategoryInfo": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The ID of the resource category.",
					"enum": [
						"IDP_CONNECTION",
						"SP_CONNECTION",
						"PASSWORD_CREDENTIAL_VALIDATOR",
						"AUTHENTICATION_SELECTOR",
						"IDP_ADAPTER",
						"SP_ADAPTER",
						"ACCESS_TOKEN_MGMT_PLUGIN",
						"TOKEN_PROCESSOR",
						"TOKEN_GENERATOR",
						"NOTIFICATION_PUBLISHER",
						"OOB_AUTH_PLUGIN",
						"DATA_STORE",
						"DYNAMIC_CLIENT_REGISTRATION_PLUGIN",
						"IDENTITY_STORE_PROVISIONER"
					]
				},
				"name": {
					"type": "string",
					"position": 20,
					"description": "The name of the resource category."
				}
			},
			"description": "A model containing information on a category of resource in the administrative API."
		},
		"ResourceUsage": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The ID of the referencing resource."
				},
				"name": {
					"type": "string",
					"position": 20,
					"description": "The name of the referencing resource."
				},
				"categoryId": {
					"type": "string",
					"position": 30,
					"description": "The category of the referencing resource.",
					"enum": [
						"IDP_CONNECTION",
						"SP_CONNECTION",
						"PASSWORD_CREDENTIAL_VALIDATOR",
						"AUTHENTICATION_SELECTOR",
						"IDP_ADAPTER",
						"SP_ADAPTER",
						"ACCESS_TOKEN_MGMT_PLUGIN",
						"TOKEN_PROCESSOR",
						"TOKEN_GENERATOR",
						"NOTIFICATION_PUBLISHER",
						"OOB_AUTH_PLUGIN",
						"DATA_STORE",
						"DYNAMIC_CLIENT_REGISTRATION_PLUGIN",
						"IDENTITY_STORE_PROVISIONER"
					]
				},
				"type": {
					"type": "string",
					"position": 40,
					"description": "The type of the referencing resource. In the case of plugins, this is the plugin type. Otherwise, it is usually the same as the name of the category."
				},
				"ref": {
					"position": 50,
					"description": "A link to the referencing resource.",
					"$ref": "#/definitions/ResourceLink"
				}
			},
			"description": "An API model representing a reference to an API resource."
		},
		"ResourceUsages": {
			"type": "object",
			"properties": {
				"categories": {
					"type": "array",
					"position": 10,
					"description": "The static list of available resource categories.",
					"items": {
						"$ref": "#/definitions/ResourceCategoryInfo"
					}
				},
				"items": {
					"type": "array",
					"position": 20,
					"description": "The actual list of resource usages.",
					"items": {
						"$ref": "#/definitions/ResourceUsage"
					}
				}
			},
			"description": "A collection of resource usages."
		},
		"PingOneConnections": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of PingOne connections.",
					"items": {
						"$ref": "#/definitions/PingOneConnection"
					}
				}
			},
			"description": "A collection of PingOne connections."
		},
		"ServiceAssociation": {
			"type": "object",
			"properties": {
				"componentName": {
					"type": "string",
					"position": 10,
					"description": "The display name for the component."
				},
				"serviceNames": {
					"type": "array",
					"position": 20,
					"description": "The list of PingOne services consumed by the plugin. The first service represents the primary service consumed by the plugin.",
					"items": {
						"type": "string"
					}
				},
				"configured": {
					"type": "boolean",
					"position": 30,
					"description": "Indicates whether one or more instances of the plugin are configured for a given PingOne connection."
				}
			},
			"description": "A model representing an association between a PingFederate component (typically a plugin) and a list of PingOne services."
		},
		"ServiceAssociations": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of component-to-service associations.",
					"items": {
						"$ref": "#/definitions/ServiceAssociation"
					}
				}
			},
			"description": "A list of installed components that consume PingOne services."
		},
		"PingOneForEnterpriseSettings": {
			"type": "object",
			"properties": {
				"connectedToPingOneForEnterprise": {
					"type": "boolean",
					"position": 10,
					"description": "A read only field indicating whether PingFederate is connected to PingOne for Enterprise."
				},
				"pingOneSsoConnection": {
					"position": 20,
					"description": "A read only reference to the SP connection configured for PingOne SSO.",
					"$ref": "#/definitions/ResourceLink"
				},
				"companyName": {
					"type": "string",
					"position": 30,
					"description": "A read only field indicating the company name."
				},
				"enableAdminConsoleSso": {
					"type": "boolean",
					"position": 40,
					"description": "Indicates whether single sign on from PingOne for Enterprise to the PingFederate admin console is enabled. The default is false."
				},
				"enableMonitoring": {
					"type": "boolean",
					"position": 50,
					"description": "Indicates whether monitoring of PingFederate from PingOne for Enterprise is enabled. The default is true."
				},
				"currentAuthnKeyCreationTime": {
					"type": "string",
					"format": "date-time",
					"position": 60,
					"description": "A read only field indicating the creation time of the current authentication key."
				},
				"previousAuthnKeyCreationTime": {
					"type": "string",
					"format": "date-time",
					"position": 70,
					"description": "A read only field indicating the creation time of the previous authentication key."
				},
				"identityRepositoryUpdateRequired": {
					"type": "boolean",
					"position": 80,
					"description": "A read-only field indicating whether changes were made in the current PingFederate configuration that might affect your connection with PingOne for Enterprise. For example, if you modified the attribute contract of your SSO configuration. Update the identity repository to keep your PingFederate and PingOne for Enterprise settings synchronized. "
				}
			},
			"description": "PingOne for Enterprise Settings"
		},
		"P14EKeyPairView": {
			"type": "object",
			"properties": {
				"currentAuthenticationKey": {
					"type": "boolean",
					"position": 10,
					"description": "Indicates whether this is the current key used to authenticate with PingOne."
				},
				"previousAuthenticationKey": {
					"type": "boolean",
					"position": 20,
					"description": "Indicates whether this is the previous key used to authenticate with PingOne."
				},
				"keyPairView": {
					"position": 30,
					"description": "The PingOne for Enterprise key pair details.",
					"$ref": "#/definitions/CertView"
				},
				"creationTime": {
					"type": "string",
					"format": "date-time",
					"position": 40,
					"description": "The creation time of the key."
				}
			},
			"description": "PingOne for Enterprise connection key pair details."
		},
		"P14EKeysView": {
			"type": "object",
			"properties": {
				"keyPairs": {
					"type": "array",
					"position": 10,
					"description": "The key pairs used to authenticate to PingOne for Enterprise",
					"items": {
						"$ref": "#/definitions/P14EKeyPairView"
					}
				}
			},
			"description": "The collection of PingOne for Enterprise connection key pair details."
		},
		"MetadataSigningSettings": {
			"type": "object",
			"properties": {
				"signingKeyRef": {
					"position": 10,
					"description": "Reference to the key used for metadata signing. Refer to /keyPair/signing to get the list of available signing key pairs.",
					"$ref": "#/definitions/ResourceLink"
				},
				"signatureAlgorithm": {
					"type": "string",
					"position": 20,
					"description": "Signature algorithm. If this property is unset, the default signature algorithm for the key algorithm will be used. Supported signature algorithms are available through the /keyPairs/keyAlgorithms endpoint."
				}
			},
			"description": "Metadata signing settings. If metadata is not signed, this model will be empty."
		},
		"MetadataLifetimeSettings": {
			"type": "object",
			"properties": {
				"cacheDuration": {
					"type": "integer",
					"format": "int32",
					"position": 10,
					"description": "This field adjusts the validity of your metadata in minutes. The default value is 1440 (1 day)."
				},
				"reloadDelay": {
					"type": "integer",
					"format": "int64",
					"position": 20,
					"description": "This field adjusts the frequency of automatic reloading of SAML metadata in minutes. The default value is 1440 (1 day)."
				}
			},
			"description": "Metadata lifetime settings."
		},
		"RedirectValidationLocalSettings": {
			"type": "object",
			"properties": {
				"enableTargetResourceValidationForSSO": {
					"type": "boolean",
					"position": 10,
					"description": "Enable target resource validation for SSO."
				},
				"enableTargetResourceValidationForSLO": {
					"type": "boolean",
					"position": 20,
					"description": "Enable target resource validation for SLO."
				},
				"enableTargetResourceValidationForIdpDiscovery": {
					"type": "boolean",
					"position": 30,
					"description": "Enable target resource validation for IdP discovery."
				},
				"enableInErrorResourceValidation": {
					"type": "boolean",
					"position": 40,
					"description": "Enable validation for error resource."
				},
				"whiteList": {
					"type": "array",
					"position": 50,
					"description": "List of URLs that are designated as valid target resources.",
					"items": {
						"$ref": "#/definitions/RedirectValidationSettingsWhitelistEntry"
					}
				}
			},
			"description": "Settings for local redirect validation."
		},
		"RedirectValidationPartnerSettings": {
			"type": "object",
			"properties": {
				"enableWreplyValidationSLO": {
					"type": "boolean",
					"position": 10,
					"description": "Enable wreply validation for SLO."
				}
			},
			"description": "Settings for redirection at a partner site."
		},
		"RedirectValidationSettings": {
			"type": "object",
			"properties": {
				"redirectValidationLocalSettings": {
					"position": 10,
					"description": "Settings for local redirect validation.",
					"$ref": "#/definitions/RedirectValidationLocalSettings"
				},
				"redirectValidationPartnerSettings": {
					"position": 20,
					"description": "Settings for redirection at a partner site.",
					"$ref": "#/definitions/RedirectValidationPartnerSettings"
				}
			},
			"description": "Settings for redirect validation for SSO, SLO and IdP discovery."
		},
		"RedirectValidationSettingsWhitelistEntry": {
			"type": "object",
			"required": [
				"validDomain"
			],
			"properties": {
				"targetResourceSSO": {
					"type": "boolean",
					"position": 10,
					"description": "Enable this target resource for SSO redirect validation."
				},
				"targetResourceSLO": {
					"type": "boolean",
					"position": 20,
					"description": "Enable this target resource for SLO redirect validation."
				},
				"inErrorResource": {
					"type": "boolean",
					"position": 30,
					"description": "Enable this target resource for in error resource validation."
				},
				"idpDiscovery": {
					"type": "boolean",
					"position": 40,
					"description": "Enable this target resource for IdP discovery validation."
				},
				"validDomain": {
					"type": "string",
					"position": 50,
					"description": "Domain of a valid resource."
				},
				"validPath": {
					"type": "string",
					"position": 60,
					"description": "Path of a valid resource."
				},
				"allowQueryAndFragment": {
					"type": "boolean",
					"position": 70,
					"description": "Allow any query parameters and fragment in the resource."
				},
				"requireHttps": {
					"type": "boolean",
					"position": 80,
					"description": "Require HTTPS for accessing this resource."
				}
			},
			"description": "Whitelist entry for valid target resource."
		},
		"KeyAlgorithm": {
			"type": "object",
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "Name of the key algorithm."
				},
				"keySizes": {
					"type": "array",
					"position": 20,
					"description": "Possible key sizes for this algorithm, in bits.",
					"items": {
						"type": "integer",
						"format": "int32"
					}
				},
				"defaultKeySize": {
					"type": "integer",
					"format": "int32",
					"position": 30,
					"description": "Default key size for this algorithm."
				},
				"signatureAlgorithms": {
					"type": "array",
					"position": 40,
					"description": "Possible signature algorithms for this key algorithm.",
					"items": {
						"type": "string"
					}
				},
				"defaultSignatureAlgorithm": {
					"type": "string",
					"position": 50,
					"description": "Default signature algorithm for this key algorithm."
				}
			},
			"description": "Details for a key algorithm."
		},
		"KeyAlgorithms": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of key algorithms.",
					"items": {
						"$ref": "#/definitions/KeyAlgorithm"
					}
				}
			},
			"description": "A collection of key algorithms."
		},
		"SecretManagerDescriptors": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of secret manager plugin descriptors.",
					"items": {
						"$ref": "#/definitions/SecretManagerDescriptor"
					}
				}
			},
			"description": "A collection of secret manager plugin descriptors."
		},
		"SecretManagers": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of secret manager plugin instances.",
					"items": {
						"$ref": "#/definitions/SecretManager"
					}
				}
			},
			"description": "A collection of secret manager plugin instances."
		},
		"IssuerCert": {
			"type": "object",
			"required": [
				"x509File"
			],
			"properties": {
				"certView": {
					"position": 10,
					"description": "Certificate details. This property is read-only and is always ignored on a POST or PUT.",
					"$ref": "#/definitions/CertView"
				},
				"x509File": {
					"position": 20,
					"description": "The certificate data. This property must always be supplied on a POST or PUT.",
					"$ref": "#/definitions/X509File"
				},
				"active": {
					"type": "boolean",
					"position": 30,
					"description": "Indicates whether this an active certificate or not."
				}
			},
			"description": "A certificate used to validate certificates for access to the WS-Trust STS endpoints."
		},
		"IssuerCerts": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of certificates.",
					"items": {
						"$ref": "#/definitions/IssuerCert"
					}
				}
			},
			"description": "The certificates used to validate certificates for access to the WS-Trust STS endpoints."
		},
		"CertificateExpirationNotificationSettings": {
			"type": "object",
			"required": [
				"emailAddress",
				"finalWarningPeriod"
			],
			"properties": {
				"emailAddress": {
					"type": "string",
					"position": 10,
					"description": "Email address where notifications are sent."
				},
				"initialWarningPeriod": {
					"type": "integer",
					"format": "int32",
					"position": 20,
					"description": "Time before certificate expiration when initial warning is sent (in days)."
				},
				"finalWarningPeriod": {
					"type": "integer",
					"format": "int32",
					"position": 30,
					"description": "Time before certificate expiration when final warning is sent (in days)."
				},
				"notificationPublisherRef": {
					"position": 40,
					"description": "Reference to the associated notification publisher.",
					"$ref": "#/definitions/ResourceLink"
				}
			},
			"description": "Notification settings for certificate expiration events."
		},
		"LicenseEventNotificationSettings": {
			"type": "object",
			"required": [
				"emailAddress"
			],
			"properties": {
				"emailAddress": {
					"type": "string",
					"position": 10,
					"description": "The email address where notifications are sent."
				},
				"notificationPublisherRef": {
					"position": 20,
					"description": "Reference to the associated notification publisher.",
					"$ref": "#/definitions/ResourceLink"
				}
			},
			"description": "Notification settings for licensing events."
		},
		"MetadataEventNotificationSettings": {
			"type": "object",
			"required": [
				"emailAddress"
			],
			"properties": {
				"emailAddress": {
					"type": "string",
					"position": 10,
					"description": "The email address where metadata update notifications are sent."
				},
				"notificationPublisherRef": {
					"position": 20,
					"description": "Reference to the associated notification publisher.",
					"$ref": "#/definitions/ResourceLink"
				}
			},
			"description": "Notification settings for metadata update events."
		},
		"NotificationSettings": {
			"type": "object",
			"properties": {
				"licenseEvents": {
					"position": 10,
					"description": "Settings for license event notifications.",
					"$ref": "#/definitions/LicenseEventNotificationSettings"
				},
				"certificateExpirations": {
					"position": 20,
					"description": "Settings for certificate expiration notifications.",
					"$ref": "#/definitions/CertificateExpirationNotificationSettings"
				},
				"notifyAdminUserPasswordChanges": {
					"type": "boolean",
					"position": 30,
					"description": "Determines whether admin users are notified through email when their account is changed."
				},
				"accountChangesNotificationPublisherRef": {
					"position": 40,
					"description": "Reference to the associated notification publisher for admin user account changes.",
					"$ref": "#/definitions/ResourceLink"
				},
				"metadataNotificationSettings": {
					"position": 50,
					"description": "Settings for metadata update event notifications.",
					"$ref": "#/definitions/MetadataEventNotificationSettings"
				}
			},
			"description": "Settings for notifications relating to licensing and certificate expiration."
		},
		"ApiResponse": {
			"type": "object"
		},
		"SystemKey": {
			"type": "object",
			"properties": {
				"creationDate": {
					"type": "string",
					"format": "date-time",
					"position": 10,
					"description": "Creation time of the key."
				},
				"encryptedKeyData": {
					"type": "string",
					"position": 20,
					"description": "The system key encrypted."
				},
				"keyData": {
					"type": "string",
					"position": 30,
					"description": "The clear text system key base 64 encoded. The system key must be 32 bytes before base 64 encoding."
				}
			},
			"description": "A system key."
		},
		"SystemKeys": {
			"type": "object",
			"required": [
				"current",
				"pending"
			],
			"properties": {
				"current": {
					"position": 10,
					"description": "The current secret.",
					"$ref": "#/definitions/SystemKey"
				},
				"previous": {
					"position": 20,
					"description": "Previously used secret.",
					"$ref": "#/definitions/SystemKey"
				},
				"pending": {
					"position": 30,
					"description": "The next secret.",
					"$ref": "#/definitions/SystemKey"
				}
			},
			"description": "Secrets that are used in cryptographic operations to generate and consume internal tokens"
		},
		"CaptchaSettings": {
			"type": "object",
			"properties": {
				"siteKey": {
					"type": "string",
					"position": 10,
					"description": "Site key for reCAPTCHA."
				},
				"secretKey": {
					"type": "string",
					"position": 20,
					"description": "Secret key for reCAPTCHA. GETs will not return this attribute. To update this field, specify the new value in this attribute."
				},
				"encryptedSecretKey": {
					"type": "string",
					"position": 30,
					"description": "The encrypted secret key for reCAPTCHA. If you do not want to update the stored value, this attribute should be passed back unchanged."
				}
			},
			"description": "Settings for CAPTCHA."
		},
		"LogCategorySettings": {
			"type": "object",
			"required": [
				"id"
			],
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The ID of the log category. This field must match one of the category IDs defined in log4j-categories.xml."
				},
				"name": {
					"type": "string",
					"position": 20,
					"description": "The name of the log category. This field is read-only and is ignored for PUT requests."
				},
				"description": {
					"type": "string",
					"position": 30,
					"description": "The description of the log category. This field is read-only and is ignored for PUT requests."
				},
				"enabled": {
					"type": "boolean",
					"position": 40,
					"description": "Determines whether or not the log category is enabled. The default is false."
				}
			},
			"description": "The settings for a log category. A log category represents a group of related loggers and is associated with a system property (the ID field of the category with 'pf.log.level.' prepended). The system property can be referenced in log4j2.xml to set the level for the associated loggers. Log category IDs, names, and descriptions are defined in log4j-categories.xml. Only the enabled state of the category can be modified through the administrative console or API."
		},
		"LogSettings": {
			"type": "object",
			"properties": {
				"logCategories": {
					"type": "array",
					"position": 10,
					"description": "The log categories defined for the system and whether they are enabled. On a PUT request, if a category is not included in the list, it will be disabled.",
					"items": {
						"$ref": "#/definitions/LogCategorySettings"
					}
				}
			},
			"description": "Settings related to server logging."
		},
		"BaseProviderRole": {
			"type": "object",
			"properties": {
				"enable": {
					"type": "boolean"
				},
				"enableSaml11": {
					"type": "boolean",
					"position": 30,
					"description": "Enable SAML 1.1."
				},
				"enableSaml10": {
					"type": "boolean",
					"position": 40,
					"description": "Enable SAML 1.0."
				},
				"enableWsFed": {
					"type": "boolean",
					"position": 50,
					"description": "Enable WS Federation."
				},
				"enableWsTrust": {
					"type": "boolean",
					"position": 60,
					"description": "Enable WS Trust."
				}
			},
			"description": "Base Provider Role."
		},
		"EmailServerSettings": {
			"type": "object",
			"required": [
				"emailServer",
				"port",
				"sourceAddr"
			],
			"properties": {
				"sourceAddr": {
					"type": "string",
					"position": 10,
					"description": "The email address that appears in the 'From' header line in email messages generated by PingFederate.  The address must be in valid format but need not be set up on your system."
				},
				"emailServer": {
					"type": "string",
					"position": 20,
					"description": "The IP address or hostname of your email server."
				},
				"port": {
					"type": "integer",
					"format": "int32",
					"position": 30,
					"description": "The SMTP port on your email server. Allowable values: 1 - 65535. The default value is 25."
				},
				"sslPort": {
					"type": "integer",
					"format": "int32",
					"position": 40,
					"description": "The secure SMTP port on your email server. This field is not active unless Use SSL is enabled. Allowable values: 1 - 65535. The default value is  465."
				},
				"timeout": {
					"type": "integer",
					"format": "int32",
					"position": 50,
					"description": "The amount of time in seconds that PingFederate will wait before it times out connecting to the SMTP server. Allowable values: 0 - 3600. The default value is 30."
				},
				"retryAttempts": {
					"type": "integer",
					"format": "int32",
					"position": 55,
					"description": "The number of times PingFederate tries to resend an email upon unsuccessful delivery. The default value is 2."
				},
				"retryDelay": {
					"type": "integer",
					"format": "int32",
					"position": 56,
					"description": "The number of minutes PingFederate waits before the next retry attempt. The default value is 2."
				},
				"useSSL": {
					"type": "boolean",
					"position": 60,
					"description": "Requires the use of SSL/TLS on the port specified by 'sslPort'. If this option is enabled, it overrides the 'useTLS' option."
				},
				"useTLS": {
					"type": "boolean",
					"position": 70,
					"description": "Requires the use of the STARTTLS protocol on the port specified by 'port'."
				},
				"verifyHostname": {
					"type": "boolean",
					"position": 75,
					"description": "If useSSL or useTLS is enabled, this flag determines whether the email server hostname is verified against the server's SMTPS certificate."
				},
				"enableUtf8MessageHeaders": {
					"type": "boolean",
					"position": 80,
					"description": "Only set this flag to true if the email server supports UTF-8 characters in message headers. Otherwise, this is defaulted to false."
				},
				"useDebugging": {
					"type": "boolean",
					"position": 85,
					"description": "Turns on detailed error messages for the PingFederate server log to help troubleshoot any problems."
				},
				"username": {
					"type": "string",
					"position": 90,
					"description": "Authorized email username. Required if the password is provided."
				},
				"password": {
					"type": "string",
					"position": 100,
					"description": "User password.  To update the password, specify the plaintext value in this field.  This field will not be populated for GET requests."
				},
				"encryptedPassword": {
					"type": "string",
					"position": 110,
					"description": "For GET requests, this field contains the encrypted password, if one exists.  For POST and PUT requests, if you wish to reuse the existing password, this field should be passed back unchanged."
				}
			},
			"description": "Email server configuration settings."
		},
		"FederationInfo": {
			"type": "object",
			"properties": {
				"baseUrl": {
					"type": "string",
					"position": 10,
					"description": "The fully qualified host name, port, and path (if applicable) on which the PingFederate server runs."
				},
				"saml2EntityId": {
					"type": "string",
					"position": 20,
					"description": "This ID defines your organization as the entity operating the server for SAML 2.0 transactions. It is usually defined as an organization's URL or a DNS address; for example: pingidentity.com. The SAML SourceID used for artifact resolution is derived from this ID using SHA1."
				},
				"autoConnectEntityId": {
					"type": "string",
					"position": 30,
					"description": "This property has been deprecated and no longer used"
				},
				"saml1xIssuerId": {
					"type": "string",
					"position": 40,
					"description": "This ID identifies your federation server for SAML 1.x transactions. As with SAML 2.0, it is usually defined as an organization's URL or a DNS address. The SourceID used for artifact resolution is derived from this ID using SHA1."
				},
				"saml1xSourceId": {
					"type": "string",
					"position": 50,
					"description": "If supplied, the Source ID value entered here is used for SAML 1.x, instead of being derived from the SAML 1.x Issuer/Audience."
				},
				"wsfedRealm": {
					"type": "string",
					"position": 60,
					"description": "The URI of the realm associated with the PingFederate server. A realm represents a single unit of security administration or trust."
				}
			},
			"description": "Federation Info."
		},
		"IdpRole": {
			"allOf": [
				{
					"$ref": "#/definitions/BaseProviderRole"
				},
				{
					"type": "object",
					"properties": {
						"enable": {
							"type": "boolean",
							"position": 10,
							"description": "Enable Identity Provider Role."
						},
						"saml20Profile": {
							"position": 20,
							"description": "SAML 2.0 Profile settings.",
							"$ref": "#/definitions/SAML20Profile"
						},
						"enableOutboundProvisioning": {
							"type": "boolean",
							"position": 30,
							"description": "Enable Outbound Provisioning."
						}
					},
					"description": "This property has been deprecated and is no longer used. All Roles and protocols are always enabled."
				}
			]
		},
		"OAuthRole": {
			"type": "object",
			"properties": {
				"enableOauth": {
					"type": "boolean",
					"position": 10,
					"description": "Enable OAuth 2.0 Authorization Server (AS) Role."
				},
				"enableOpenIdConnect": {
					"type": "boolean",
					"position": 20,
					"description": "Enable Open ID Connect."
				}
			},
			"description": "This property has been deprecated and is no longer used. OAuth and OpenID Connect are always enabled."
		},
		"RolesAndProtocols": {
			"type": "object",
			"properties": {
				"oauthRole": {
					"position": 10,
					"description": "OAuth role settings.",
					"$ref": "#/definitions/OAuthRole"
				},
				"idpRole": {
					"position": 20,
					"description": "Identity Provider (IdP) settings.",
					"$ref": "#/definitions/IdpRole"
				},
				"spRole": {
					"position": 30,
					"description": "Service Provider (SP) settings.",
					"$ref": "#/definitions/SpRole"
				},
				"enableIdpDiscovery": {
					"type": "boolean",
					"position": 40,
					"description": "Enable IdP Discovery."
				}
			},
			"description": "This property has been deprecated and is no longer used. All Roles and protocols are always enabled."
		},
		"SAML20Profile": {
			"type": "object",
			"properties": {
				"enable": {
					"type": "boolean",
					"position": 10,
					"description": "Enable SAML2.0 profile."
				},
				"enableAutoConnect": {
					"type": "boolean",
					"position": 20,
					"description": "This property has been deprecated and no longer used"
				}
			},
			"description": "SAML 2.0 Profile."
		},
		"ServerSettings": {
			"type": "object",
			"properties": {
				"contactInfo": {
					"position": 10,
					"description": "Information that identifies the server.",
					"$ref": "#/definitions/ContactInfo"
				},
				"notifications": {
					"position": 20,
					"description": "Notification settings for license and certificate expiration events.",
					"$ref": "#/definitions/NotificationSettings"
				},
				"rolesAndProtocols": {
					"position": 30,
					"description": "Configure roles and protocols.",
					"$ref": "#/definitions/RolesAndProtocols"
				},
				"federationInfo": {
					"position": 40,
					"description": "Federation Info.",
					"$ref": "#/definitions/FederationInfo"
				},
				"emailServer": {
					"position": 50,
					"description": "Email Server Settings.",
					"$ref": "#/definitions/EmailServerSettings"
				},
				"captchaSettings": {
					"position": 60,
					"description": "Captcha Settings.",
					"$ref": "#/definitions/CaptchaSettings"
				}
			},
			"description": "Server configuration settings."
		},
		"SpRole": {
			"allOf": [
				{
					"$ref": "#/definitions/BaseProviderRole"
				},
				{
					"type": "object",
					"properties": {
						"enable": {
							"type": "boolean",
							"position": 10,
							"description": "Enable Service Provider Role."
						},
						"saml20Profile": {
							"position": 20,
							"description": "SAML 2.0 Profile settings.",
							"$ref": "#/definitions/SpSAML20Profile"
						},
						"enableOpenIDConnect": {
							"type": "boolean",
							"position": 75,
							"description": "Enable OpenID Connect."
						},
						"enableInboundProvisioning": {
							"type": "boolean",
							"position": 80,
							"description": "Enable Inbound Provisioning."
						}
					},
					"description": "This property has been deprecated and is no longer used. All Roles and protocols are always enabled."
				}
			]
		},
		"SpSAML20Profile": {
			"allOf": [
				{
					"$ref": "#/definitions/SAML20Profile"
				},
				{
					"type": "object",
					"properties": {
						"enableXASP": {
							"type": "boolean",
							"position": 11,
							"description": "Enable Attribute Requester Mapping for X.509 Attribute Sharing Profile (XASP)"
						}
					},
					"description": "SP SAML 2.0 Profile."
				}
			]
		},
		"GeneralSettings": {
			"type": "object",
			"properties": {
				"disableAutomaticConnectionValidation": {
					"type": "boolean",
					"position": 10,
					"description": "Boolean that disables automatic connection validation when set to true. The default is false."
				},
				"idpConnectionTransactionLoggingOverride": {
					"type": "string",
					"position": 20,
					"description": "Determines the level of transaction logging for all identity provider connections. The default is DONT_OVERRIDE, in which case the logging level will be determined by each individual IdP connection",
					"enum": [
						"DONT_OVERRIDE",
						"NONE",
						"FULL",
						"STANDARD",
						"ENHANCED"
					]
				},
				"spConnectionTransactionLoggingOverride": {
					"type": "string",
					"position": 30,
					"description": "Determines the level of transaction logging for all service provider connections. The default is DONT_OVERRIDE, in which case the logging level will be determined by each individual SP connection",
					"enum": [
						"DONT_OVERRIDE",
						"NONE",
						"FULL",
						"STANDARD",
						"ENHANCED"
					]
				},
				"datastoreValidationIntervalSecs": {
					"type": "integer",
					"format": "int32",
					"position": 40,
					"description": "Determines how long (in seconds) the result of testing a datastore connection is cached. The default is 300."
				},
				"requestHeaderForCorrelationId": {
					"type": "string",
					"position": 50,
					"description": "HTTP request header for retrieving correlation ID."
				}
			},
			"description": "General settings."
		},
		"OutboundProvisionDatabase": {
			"type": "object",
			"required": [
				"dataStoreRef"
			],
			"properties": {
				"dataStoreRef": {
					"position": 10,
					"description": "Reference to the associated data store.",
					"$ref": "#/definitions/ResourceLink"
				},
				"synchronizationFrequency": {
					"type": "integer",
					"format": "int32",
					"position": 20,
					"description": "The synchronization frequency in seconds. The default value is 60."
				}
			},
			"description": "The settings for database used internally to facilitate outbound provisioning. The database stores state of synchronization between the source data store and the target data store."
		},
		"WsTrustStsSettings": {
			"type": "object",
			"properties": {
				"basicAuthnEnabled": {
					"type": "boolean",
					"position": 10,
					"description": "Require the use of HTTP Basic Authentication to access WS-Trust STS endpoints. Requires users be populated."
				},
				"clientCertAuthnEnabled": {
					"type": "boolean",
					"position": 20,
					"description": "Require the use of Client Cert Authentication to access WS-Trust STS endpoints. Requires either restrictBySubjectDn and/or restrictByIssuerCert be enabled."
				},
				"restrictBySubjectDn": {
					"type": "boolean",
					"position": 30,
					"description": "Restrict Access by Subject DN. Ignored if clientCertAuthnEnabled is disabled."
				},
				"restrictByIssuerCert": {
					"type": "boolean",
					"position": 40,
					"description": "Restrict Access by Issuer Certificate. Ignored if clientCertAuthnEnabled is disabled."
				},
				"subjectDns": {
					"type": "array",
					"position": 50,
					"description": "List of Subject DNs for certificates that are allowed to authenticate to WS-Trust STS endpoints. Required if restrictBySubjectDn is enabled.",
					"items": {
						"type": "string"
					}
				},
				"users": {
					"type": "array",
					"position": 60,
					"description": "List of users authorized to access WS-Trust STS endpoints when basicAuthnEnabled is enabled. At least one users entry is required if basicAuthnEnabled is enabled.",
					"items": {
						"$ref": "#/definitions/UsernamePasswordCredentials"
					}
				},
				"issuerCerts": {
					"type": "array",
					"position": 70,
					"description": "List of certificate Issuers that are used to validate certificates for access to the WS-Trust STS endpoints. Required if restrictByIssuerCert is enabled.",
					"items": {
						"$ref": "#/definitions/ResourceLink"
					}
				}
			},
			"description": "Configure PingFederate to require that client applications provide credentials to access the WS-Trust STS endpoints."
		},
		"ServiceAuthentication": {
			"type": "object",
			"properties": {
				"attributeQuery": {
					"position": 10,
					"description": "SAML2.0 attribute query service. Remove the JSON field to deactivate the attribute query service.",
					"$ref": "#/definitions/ServiceModel"
				},
				"jmx": {
					"position": 20,
					"description": "JMX application management and monitoring service. Remove the JSON field to deactivate the JMX service.",
					"$ref": "#/definitions/ServiceModel"
				},
				"connectionManagement": {
					"position": 30,
					"description": "(Deprecated) Connection management service. Remove the JSON field to deactivate the connection management service.",
					"$ref": "#/definitions/ServiceModel"
				},
				"ssoDirectoryService": {
					"position": 40,
					"description": "(Deprecated) SSO directory service. Remove the JSON field to deactivate the SSO Directory service.",
					"$ref": "#/definitions/ServiceModel"
				}
			},
			"description": "Service Authentication Settings."
		},
		"ServiceModel": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "Id of the service."
				},
				"sharedSecret": {
					"type": "string",
					"position": 20,
					"description": "Shared secret for the service."
				},
				"encryptedSharedSecret": {
					"type": "string",
					"position": 30,
					"description": "Encrypted shared secret for the service."
				}
			},
			"description": "Service Model."
		},
		"KeyPairRotationSettings": {
			"type": "object",
			"required": [
				"activationBufferDays",
				"creationBufferDays"
			],
			"properties": {
				"id": {
					"type": "string"
				},
				"creationBufferDays": {
					"type": "integer",
					"format": "int32",
					"position": 20,
					"description": "Buffer days before key pair expiration for creation of a new key pair."
				},
				"activationBufferDays": {
					"type": "integer",
					"format": "int32",
					"position": 30,
					"description": "Buffer days before key pair expiration for activation of the new key pair."
				},
				"validDays": {
					"type": "integer",
					"format": "int32",
					"position": 40,
					"description": "Valid days for the new key pair to be created. If this property is unset, the validity days of the original key pair will be used."
				},
				"keyAlgorithm": {
					"type": "string",
					"position": 50,
					"description": "Key algorithm to be used while creating a new key pair. If this property is unset, the key algorithm of the original key pair will be used. Supported algorithms are available through the /keyPairs/keyAlgorithms endpoint."
				},
				"keySize": {
					"type": "integer",
					"format": "int32",
					"position": 60,
					"description": "Key size, in bits. If this property is unset, the key size of the original key pair will be used. Supported key sizes are available through the /keyPairs/keyAlgorithms endpoint."
				},
				"signatureAlgorithm": {
					"type": "string",
					"position": 70,
					"description": "Required if the original key pair used SHA1 algorithm. If this property is unset, the default signature algorithm of the original key pair will be used. Supported signature algorithms are available through the /keyPairs/keyAlgorithms endpoint."
				}
			},
			"description": "Key Pair Rotation Details"
		},
		"KeyPairView": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string",
					"position": 5,
					"description": "The persistent, unique ID for the certificate."
				},
				"serialNumber": {
					"type": "string",
					"position": 10,
					"description": "The serial number assigned by the CA."
				},
				"subjectDN": {
					"type": "string",
					"position": 20,
					"description": "The subject's distinguished name."
				},
				"subjectAlternativeNames": {
					"type": "array",
					"position": 25,
					"description": "The subject alternative names (SAN).",
					"items": {
						"type": "string"
					}
				},
				"issuerDN": {
					"type": "string",
					"position": 30,
					"description": "The issuer's distinguished name."
				},
				"validFrom": {
					"type": "string",
					"format": "date-time",
					"position": 40,
					"description": "The start date from which the item is valid, in ISO 8601 format (UTC)."
				},
				"expires": {
					"type": "string",
					"format": "date-time",
					"position": 50,
					"description": "The end date up until which the item is valid, in ISO 8601 format (UTC)."
				},
				"keyAlgorithm": {
					"type": "string",
					"position": 60,
					"description": "The public key algorithm."
				},
				"keySize": {
					"type": "integer",
					"format": "int32",
					"position": 70,
					"description": "The public key size."
				},
				"signatureAlgorithm": {
					"type": "string",
					"position": 80,
					"description": "The signature algorithm."
				},
				"version": {
					"type": "integer",
					"format": "int32",
					"position": 90,
					"description": "The X.509 version to which the item conforms."
				},
				"sha1Fingerprint": {
					"type": "string",
					"position": 100,
					"description": "SHA-1 fingerprint in Hex encoding."
				},
				"sha256Fingerprint": {
					"type": "string",
					"position": 102,
					"description": "SHA-256 fingerprint in Hex encoding."
				},
				"status": {
					"type": "string",
					"position": 110,
					"description": "Status of the item.",
					"enum": [
						"VALID",
						"EXPIRED",
						"NOT_YET_VALID",
						"REVOKED"
					]
				},
				"cryptoProvider": {
					"type": "string",
					"position": 120,
					"description": "Cryptographic Provider. This is only applicable if Hybrid HSM mode is true.",
					"enum": [
						"LOCAL",
						"HSM"
					]
				},
				"rotationSettings": {
					"position": 140,
					"description": "Key pair rotation settings. Only applicable to self-signed signing key pairs. Automatic key rotation is not currently available for SSL client or SSL server key pairs.",
					"$ref": "#/definitions/KeyPairRotationSettings"
				}
			},
			"description": "Key pair details."
		},
		"KeyPairFile": {
			"type": "object",
			"required": [
				"fileData",
				"password"
			],
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The persistent, unique ID for the certificate. It can be any combination of [a-z0-9._-]. This property is system-assigned if not specified."
				},
				"fileData": {
					"type": "string",
					"position": 20,
					"description": "Base-64 encoded PKCS12 or PEM file data. In the case of PEM, the raw (non-base-64) data is also accepted. In BCFIPS mode, only PEM with PBES2 and AES or Triple DES encryption is accepted and 128-bit salt is required."
				},
				"format": {
					"type": "string",
					"position": 30,
					"description": "Key pair file format. If specified, this field will control what file format is expected, otherwise the format will be auto-detected. In BCFIPS mode, only PEM is supported.",
					"enum": [
						"PKCS12",
						"PEM"
					]
				},
				"password": {
					"type": "string",
					"position": 40,
					"description": "Password for the file. In BCFIPS mode, the password must be at least 14 characters."
				},
				"encryptedPassword": {
					"type": "string",
					"position": 50,
					"description": "Encrypted password for the file. Only applicable for bulk export/import operations. For bulk import operation, either password or encrypted password must be set."
				},
				"cryptoProvider": {
					"type": "string",
					"position": 60,
					"description": "Cryptographic Provider. This is only applicable if Hybrid HSM mode is true.",
					"enum": [
						"LOCAL",
						"HSM"
					]
				}
			},
			"description": "Represents the contents of a PKCS12 or PEM file."
		},
		"KeyPairViews": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"description": "The actual list of KeyPairView instances.",
					"items": {
						"$ref": "#/definitions/KeyPairView"
					}
				}
			},
			"description": "A collection of KeyPairView items."
		},
		"CSRResponse": {
			"type": "object",
			"required": [
				"fileData"
			],
			"properties": {
				"fileData": {
					"type": "string",
					"position": 10,
					"description": "The CSR response file data in PKCS7 format or as an X.509 certificate. PEM encoding (with or without the header and footer lines) is required. New line characters should be omitted or encoded in this value."
				}
			},
			"description": "Represents a CSR response file."
		},
		"KeyPairExportSettings": {
			"type": "object",
			"required": [
				"password"
			],
			"properties": {
				"password": {
					"type": "string",
					"description": "The password for the key pair file that is created."
				}
			},
			"description": "Settings for exporting a key pair file from the system."
		},
		"NewKeyPairSettings": {
			"type": "object",
			"required": [
				"commonName",
				"country",
				"keyAlgorithm",
				"organization",
				"validDays"
			],
			"properties": {
				"id": {
					"type": "string",
					"position": 5,
					"description": "The persistent, unique ID for the certificate. It can be any combination of [a-z0-9._-]. This property is system-assigned if not specified."
				},
				"commonName": {
					"type": "string",
					"position": 10,
					"description": "Common name for key pair subject."
				},
				"subjectAlternativeNames": {
					"type": "array",
					"position": 15,
					"description": "The subject alternative names (SAN).",
					"items": {
						"type": "string"
					}
				},
				"organization": {
					"type": "string",
					"position": 20,
					"description": "Organization."
				},
				"organizationUnit": {
					"type": "string",
					"position": 30,
					"description": "Organization unit."
				},
				"city": {
					"type": "string",
					"position": 40,
					"description": "City."
				},
				"state": {
					"type": "string",
					"position": 50,
					"description": "State."
				},
				"country": {
					"type": "string",
					"position": 60,
					"description": "Country."
				},
				"validDays": {
					"type": "integer",
					"format": "int32",
					"position": 70,
					"description": "Number of days the key pair will be valid for."
				},
				"keyAlgorithm": {
					"type": "string",
					"position": 80,
					"description": "Key generation algorithm. Supported algorithms are available through the /keyPairs/keyAlgorithms endpoint."
				},
				"keySize": {
					"type": "integer",
					"format": "int32",
					"position": 90,
					"description": "Key size, in bits. If this property is unset, the default size for the key algorithm will be used. Supported key sizes are available through the /keyPairs/keyAlgorithms endpoint."
				},
				"signatureAlgorithm": {
					"type": "string",
					"position": 100,
					"description": "Signature algorithm. If this property is unset, the default signature algorithm for the key algorithm will be used. Supported signature algorithms are available through the /keyPairs/keyAlgorithms endpoint."
				},
				"cryptoProvider": {
					"type": "string",
					"position": 110,
					"description": "Cryptographic Provider.  This is only applicable if Hybrid HSM mode is true.",
					"enum": [
						"LOCAL",
						"HSM"
					]
				}
			},
			"description": "Settings for creating a new key pair."
		},
		"SpAdapterDescriptors": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of SP adapter descriptors.",
					"items": {
						"$ref": "#/definitions/SpAdapterDescriptor"
					}
				}
			},
			"description": "A collection of SP adapter descriptors."
		},
		"SpAdapterUrlMapping": {
			"type": "object",
			"properties": {
				"url": {
					"type": "string",
					"position": 10,
					"description": "The URL that will be compared against the target URL. Use a wildcard (*) to match multiple URLs to the same adapter instance."
				},
				"adapterRef": {
					"position": 20,
					"description": "The adapter instance mapped for this URL.",
					"$ref": "#/definitions/ResourceLink"
				}
			},
			"description": "SP Adapter URL Mapping"
		},
		"SpAdapterUrlMappings": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of SP adapter URL mappings.",
					"items": {
						"$ref": "#/definitions/SpAdapterUrlMapping"
					}
				}
			}
		},
		"SpAdapters": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of SP adapters.",
					"items": {
						"$ref": "#/definitions/SpAdapter"
					}
				}
			},
			"description": "A collection of SP adapters."
		},
		"SpConnections": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of connections.",
					"items": {
						"$ref": "#/definitions/SpConnection"
					}
				}
			},
			"description": "A collection of SP connections."
		},
		"SpDefaultUrls": {
			"type": "object",
			"properties": {
				"ssoSuccessUrl": {
					"type": "string",
					"position": 10,
					"description": "Provide the default URL you would like to send the user to when Single Sign On (SSO) has succeeded."
				},
				"confirmSlo": {
					"type": "boolean",
					"position": 15,
					"description": "Determines whether the user is prompted to confirm Single Logout (SLO). The default is false."
				},
				"sloSuccessUrl": {
					"type": "string",
					"position": 20,
					"description": "Provide the default URL you would like to send the user to when Single Logout (SLO) has succeeded."
				}
			},
			"description": "SP Default URLs."
		},
		"SpUrlMapping": {
			"type": "object",
			"properties": {
				"url": {
					"type": "string",
					"position": 10,
					"description": "The URL that will be compared against the target URL. Use a wildcard (*) to match multiple URLs to the same adapter or connection instance."
				},
				"type": {
					"type": "string",
					"position": 20,
					"description": "The URL mapping type",
					"enum": [
						"SP_ADAPTER",
						"SP_CONNECTION"
					]
				},
				"ref": {
					"position": 30,
					"description": "The adapter or connection instance mapped for this URL.",
					"$ref": "#/definitions/ResourceLink"
				}
			},
			"description": "SP URL mapping"
		},
		"SpUrlMappings": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of SP connection URL mappings.",
					"items": {
						"$ref": "#/definitions/SpUrlMapping"
					}
				}
			}
		},
		"SslServerSettings": {
			"type": "object",
			"required": [
				"adminConsoleCertRef",
				"runtimeServerCertRef"
			],
			"properties": {
				"runtimeServerCertRef": {
					"position": 10,
					"description": "Reference to the default SSL Server Certificate Key pair active for Runtime Server.",
					"$ref": "#/definitions/ResourceLink"
				},
				"adminConsoleCertRef": {
					"position": 20,
					"description": "Reference to the default SSL Server Certificate Key pair active for PF Administrator Console.",
					"$ref": "#/definitions/ResourceLink"
				},
				"activeRuntimeServerCerts": {
					"type": "array",
					"position": 30,
					"description": "The active SSL Server Certificate Key pairs for Runtime Server.",
					"items": {
						"$ref": "#/definitions/ResourceLink"
					}
				},
				"activeAdminConsoleCerts": {
					"type": "array",
					"position": 40,
					"description": "The active SSL Server Certificate Key pairs for PF Administrator Console.",
					"items": {
						"$ref": "#/definitions/ResourceLink"
					}
				}
			},
			"description": "Settings for the SSL Server certificate configuration."
		},
		"StsRequestParametersContract": {
			"type": "object",
			"required": [
				"id",
				"name",
				"parameters"
			],
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The ID of the Security Token Service request parameter contract.<br>Note: Ignored for PUT requests."
				},
				"name": {
					"type": "string",
					"position": 20,
					"description": "The name of the Security Token Service request parameter contract.<br>Note: Ignored for PUT requests."
				},
				"parameters": {
					"type": "array",
					"position": 30,
					"description": "The list of parameters within the Security  Token Service request parameter contract.",
					"items": {
						"type": "string"
					}
				}
			},
			"description": "A Security Token Service request parameter contract."
		},
		"StsRequestParametersContracts": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of STS Request Parameters Contracts.",
					"items": {
						"$ref": "#/definitions/StsRequestParametersContract"
					}
				}
			},
			"description": "A Collection of STS Request Parameters Contracts"
		},
		"TokenGenerators": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of token generator.",
					"items": {
						"$ref": "#/definitions/TokenGenerator"
					}
				}
			},
			"description": "A collection of token generators."
		},
		"TokenGeneratorDescriptors": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of token generator descriptors.",
					"items": {
						"$ref": "#/definitions/TokenGeneratorDescriptor"
					}
				}
			},
			"description": "A collection of token generator descriptors."
		},
		"TokenProcessorDescriptors": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of token processor descriptors.",
					"items": {
						"$ref": "#/definitions/TokenProcessorDescriptor"
					}
				}
			},
			"description": "A collection of token processor descriptors."
		},
		"TokenProcessors": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The actual list of token processors.",
					"items": {
						"$ref": "#/definitions/TokenProcessor"
					}
				}
			},
			"description": "A collection of token processors."
		},
		"TokenToTokenMapping": {
			"type": "object",
			"required": [
				"attributeContractFulfillment",
				"sourceId",
				"targetId"
			],
			"properties": {
				"attributeSources": {
					"type": "array",
					"position": 10,
					"description": "A list of configured data stores to look up attributes from.",
					"items": {
						"$ref": "#/definitions/AttributeSource"
					}
				},
				"attributeContractFulfillment": {
					"type": "object",
					"position": 20,
					"description": "A list of mappings from attribute names to their fulfillment values.",
					"additionalProperties": {
						"$ref": "#/definitions/AttributeFulfillmentValue"
					}
				},
				"issuanceCriteria": {
					"position": 30,
					"description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
					"$ref": "#/definitions/IssuanceCriteria"
				},
				"sourceId": {
					"type": "string",
					"position": 40,
					"description": "The id of the Token Processor."
				},
				"targetId": {
					"type": "string",
					"position": 50,
					"description": "The id of the Token Generator."
				},
				"id": {
					"type": "string",
					"position": 60,
					"description": "The id of the Token Processor to Token Generator mapping. This field is read-only and is ignored when passed in with the payload."
				},
				"defaultTargetResource": {
					"type": "string",
					"position": 70,
					"description": "Default target URL for this Token Processor to Token Generator mapping configuration."
				},
				"licenseConnectionGroupAssignment": {
					"type": "string",
					"position": 80,
					"description": "The license connection group."
				}
			},
			"description": "A Token Processor to Token Generator Mapping."
		},
		"TokenToTokenMappings": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of Token Processor to Token Generator mappings.",
					"items": {
						"$ref": "#/definitions/TokenToTokenMapping"
					}
				}
			}
		},
		"Version": {
			"type": "object",
			"properties": {
				"version": {
					"type": "string",
					"position": 10,
					"description": "Server version."
				}
			},
			"description": "Server version."
		},
		"VirtualHostNameSettings": {
			"type": "object",
			"properties": {
				"virtualHostNames": {
					"type": "array",
					"position": 10,
					"description": "List of virtual host names.",
					"items": {
						"type": "string"
					}
				}
			},
			"description": "Settings for virtual host names."
		},
		"AuthorizationDetailType": {
			"type": "object",
			"required": [
				"authorizationDetailProcessorRef",
				"type"
			],
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The ID of the authorization detail type. The ID will be system-assigned if not specified."
				},
				"description": {
					"type": "string",
					"position": 20,
					"description": "The description of the authorization detail type."
				},
				"type": {
					"type": "string",
					"position": 30,
					"description": "The authorization detail type."
				},
				"authorizationDetailProcessorRef": {
					"position": 40,
					"description": "The authentication detail processor used to process this type.",
					"$ref": "#/definitions/ResourceLink"
				},
				"active": {
					"type": "boolean",
					"position": 50,
					"description": "Whether or not this authorization detail type is active. Defaults to true."
				}
			},
			"description": "The authorization detail type and the authorization detail processor to process the type."
		},
		"AuthorizationDetailTypes": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of the authorization detail types.",
					"items": {
						"$ref": "#/definitions/AuthorizationDetailType"
					}
				}
			},
			"description": "A collection of authorization detail types."
		},
		"Issuer": {
			"type": "object",
			"required": [
				"host",
				"name"
			],
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The persistent, unique ID for the virtual issuer. It can be any combination of [a-zA-Z0-9._-]. This property is system-assigned if not specified."
				},
				"name": {
					"type": "string",
					"position": 20,
					"description": "The name of this virtual issuer with a unique value."
				},
				"description": {
					"type": "string",
					"position": 30,
					"description": "The description of this virtual issuer."
				},
				"host": {
					"type": "string",
					"position": 40,
					"description": "The hostname of this virtual issuer."
				},
				"path": {
					"type": "string",
					"position": 50,
					"description": "The path of this virtual issuer."
				}
			},
			"description": "The set of attributes used to configure a virtual issuer."
		},
		"Issuers": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of the virtual issuers.",
					"items": {
						"$ref": "#/definitions/Issuer"
					}
				}
			},
			"description": "A collection of virtual issuers."
		},
		"ProcessorPolicyToGeneratorMapping": {
			"type": "object",
			"required": [
				"attributeContractFulfillment",
				"sourceId",
				"targetId"
			],
			"properties": {
				"attributeSources": {
					"type": "array",
					"position": 10,
					"description": "A list of configured data stores to look up attributes from.",
					"items": {
						"$ref": "#/definitions/AttributeSource"
					}
				},
				"attributeContractFulfillment": {
					"type": "object",
					"position": 20,
					"description": "A list of mappings from attribute names to their fulfillment values.",
					"additionalProperties": {
						"$ref": "#/definitions/AttributeFulfillmentValue"
					}
				},
				"issuanceCriteria": {
					"position": 30,
					"description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
					"$ref": "#/definitions/IssuanceCriteria"
				},
				"id": {
					"type": "string",
					"position": 40,
					"description": "The id of the Token Exchange Processor policy to Token Generator mapping. This field is read-only and is ignored when passed in with the payload."
				},
				"sourceId": {
					"type": "string",
					"position": 50,
					"description": "The id of the Token Exchange Processor policy."
				},
				"targetId": {
					"type": "string",
					"position": 60,
					"description": "The id of the Token Generator."
				},
				"licenseConnectionGroupAssignment": {
					"type": "string",
					"position": 70,
					"description": "The license connection group."
				}
			},
			"description": "A Token Exchange Processor policy to Token Generator Mapping."
		},
		"ProcessorPolicyToGeneratorMappings": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of Token Exchange Processor policy to Token Generator mappings.",
					"items": {
						"$ref": "#/definitions/ProcessorPolicyToGeneratorMapping"
					}
				}
			}
		},
		"TokenExchangeGeneratorGroup": {
			"type": "object",
			"required": [
				"generatorMappings",
				"id",
				"name"
			],
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The Token Exchange Generator group ID. ID is unique."
				},
				"name": {
					"type": "string",
					"position": 20,
					"description": "The Token Exchange Generator group name. Name is unique."
				},
				"resourceUris": {
					"type": "array",
					"position": 30,
					"description": "The list of  resource URI's which map to this Token Exchange Generator group.",
					"items": {
						"type": "string"
					}
				},
				"generatorMappings": {
					"type": "array",
					"position": 40,
					"description": "A list of Token Generator mapping into an OAuth 2.0 Token Exchange requested token type.",
					"items": {
						"$ref": "#/definitions/TokenExchangeGeneratorMapping"
					}
				}
			},
			"description": "The set of attributes used to configure a OAuth 2.0 Token Exchange Generator group."
		},
		"TokenExchangeGeneratorMapping": {
			"type": "object",
			"required": [
				"requestedTokenType",
				"tokenGenerator"
			],
			"properties": {
				"requestedTokenType": {
					"type": "string",
					"position": 100,
					"description": "The Requested token type"
				},
				"tokenGenerator": {
					"position": 110,
					"description": "The Token Generator used to generate the requested token",
					"$ref": "#/definitions/ResourceLink"
				},
				"defaultMapping": {
					"type": "boolean",
					"position": 120,
					"description": "Whether this is the default Token Generator Mapping. Defaults to false if not specified."
				}
			},
			"description": "A Token Generator mapping into an OAuth 2.0 Token Exchange requested token type."
		},
		"TokenExchangeGeneratorSettings": {
			"type": "object",
			"properties": {
				"defaultGeneratorGroupRef": {
					"position": 10,
					"description": "Reference to the default Token Exchange Generator group, if one is defined.",
					"$ref": "#/definitions/ResourceLink"
				}
			},
			"description": "Settings for the OAuth Token Exchange Generator Groups."
		},
		"TokenExchangeGeneratorGroups": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of OAuth 2.0 Token Exchange Generator groups.",
					"items": {
						"$ref": "#/definitions/TokenExchangeGeneratorGroup"
					}
				}
			},
			"description": "A collection of OAuth 2.0 Token Exchange Generator groups."
		},
		"TokenExchangeProcessorAttribute": {
			"type": "object",
			"required": [
				"name"
			],
			"properties": {
				"name": {
					"type": "string",
					"position": 10,
					"description": "The name of this attribute."
				}
			},
			"description": "An attribute for the OAuth 2.0 Token Exchange Processor policy attribute contract."
		},
		"TokenExchangeProcessorAttributeContract": {
			"type": "object",
			"properties": {
				"coreAttributes": {
					"type": "array",
					"position": 10,
					"description": "A list of read-only attributes (for example, subject) that are automatically populated by PingFederate.",
					"items": {
						"$ref": "#/definitions/TokenExchangeProcessorAttribute"
					}
				},
				"extendedAttributes": {
					"type": "array",
					"position": 20,
					"description": "A list of additional attributes.",
					"items": {
						"$ref": "#/definitions/TokenExchangeProcessorAttribute"
					}
				}
			},
			"description": "A set of attributes exposed by an OAuth 2.0 Token Exchange Processor policy."
		},
		"TokenExchangeProcessorMapping": {
			"type": "object",
			"required": [
				"attributeContractFulfillment",
				"subjectTokenProcessor",
				"subjectTokenType"
			],
			"properties": {
				"attributeSources": {
					"type": "array",
					"position": 10,
					"description": "A list of configured data stores to look up attributes from.",
					"items": {
						"$ref": "#/definitions/AttributeSource"
					}
				},
				"attributeContractFulfillment": {
					"type": "object",
					"position": 20,
					"description": "A list of mappings from attribute names to their fulfillment values.",
					"additionalProperties": {
						"$ref": "#/definitions/AttributeFulfillmentValue"
					}
				},
				"issuanceCriteria": {
					"position": 30,
					"description": "The issuance criteria that this transaction must meet before the corresponding attribute contract is fulfilled.",
					"$ref": "#/definitions/IssuanceCriteria"
				},
				"subjectTokenType": {
					"type": "string",
					"position": 100,
					"description": "The Subject token type"
				},
				"subjectTokenProcessor": {
					"position": 110,
					"description": "The Token processor used to process the subject token",
					"$ref": "#/definitions/ResourceLink"
				},
				"actorTokenType": {
					"type": "string",
					"position": 120,
					"description": "The Actor token type"
				},
				"actorTokenProcessor": {
					"position": 130,
					"description": "The Token processor used to process the actor token",
					"$ref": "#/definitions/ResourceLink"
				}
			},
			"description": "A Token Processor(s) mapping into an OAuth 2.0 Token Exchange Processor policy."
		},
		"TokenExchangeProcessorPolicy": {
			"type": "object",
			"required": [
				"attributeContract",
				"id",
				"name",
				"processorMappings"
			],
			"properties": {
				"id": {
					"type": "string",
					"position": 10,
					"description": "The Token Exchange processor policy ID. ID is unique."
				},
				"name": {
					"type": "string",
					"position": 20,
					"description": "The Token Exchange processor policy name. Name is unique."
				},
				"actorTokenRequired": {
					"type": "boolean",
					"position": 30,
					"description": "Require an Actor token on a OAuth 2.0 Token Exchange request."
				},
				"attributeContract": {
					"position": 40,
					"description": "A set of attributes exposed by an OAuth 2.0 Token Exchange Processor policy.",
					"$ref": "#/definitions/TokenExchangeProcessorAttributeContract"
				},
				"processorMappings": {
					"type": "array",
					"position": 50,
					"description": "A list of Token Processor(s) mappings into an OAuth 2.0 Token Exchange Processor policy.",
					"items": {
						"$ref": "#/definitions/TokenExchangeProcessorMapping"
					}
				}
			},
			"description": "The set of attributes used to configure a OAuth 2.0 Token Exchange processor policy."
		},
		"TokenExchangeProcessorPolicies": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"position": 10,
					"description": "The list of OAuth 2.0 Token Exchange Processor policies.",
					"items": {
						"$ref": "#/definitions/TokenExchangeProcessorPolicy"
					}
				}
			},
			"description": "A collection of OAuth 2.0 Token Exchange Processor policies."
		},
		"TokenExchangeProcessorSettings": {
			"type": "object",
			"properties": {
				"defaultProcessorPolicyRef": {
					"position": 10,
					"description": "Reference to the default Token Exchange Processor policy, if one is defined.",
					"$ref": "#/definitions/ResourceLink"
				}
			},
			"description": "Settings for the OAuth Token Exchange Processor Policy configuration."
		}
	}
}